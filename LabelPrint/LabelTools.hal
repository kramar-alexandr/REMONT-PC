//Edit***************************Sasha2,17:22 24.10.2014 {procedure PopulateAndSaveSingleQtyPURow(var array record PUVc PU2r,string item,val price,var array Integer rownr,integer index,string prlist)begin  record PUVc PU3r;  row PUVc PU3rw,PU2rw;  integer temprownr;  boolean notfound;  integer mtrw,i;    notfound = true;  temprownr = rownr[index];	if (temprownr<1) then begin		RECORDNEW(PU3r);		if (NonBlank(prlist)) then begin			PU3r.LangCode = prlist; //price list		end;	end else begin		PU3r = PU2r[index];	end;	mtrw = matrowcnt(PU3r);	For(i=0;i<mtrw;i=i+1) begin	  matrowget(PU3r,i,PU2rw);	  if(PU2rw.ArtCode==item)then begin	  	notfound = false;	  	i = mtrw;	  end;	end; 	PU3rw.ArtCode = item;	PU3rw.UPrice = price;	if(notfound)then begin		MatRowPut(PU3r,temprownr,PU3rw);	  temprownr = temprownr + 1;	end;	rownr[index] = temprownr;	PU2r[index] = PU3r;  return;end; //Edit***************************Sasha2,17:22 24.10.2014 }//Edit***************************Sasha2,17:22 24.10.2014 {procedure PopulateAndSaveMultipleQtyPURow(var array record PUVc PU2r,string item,val price,val qty,var array Integer rownr,integer index,string prlist)begin  record PUVc PU3r;  row PUVc PU3rw,PU2rw;  integer temprownr;  boolean found;  integer mtrw,i,pos;  val tempqty;    	tempqty = qty;  	found = false;  	temprownr = rownr[index];	if (temprownr<1) then begin		RECORDNEW(PU3r);		if (NonBlank(prlist)) then begin			PU3r.LangCode = prlist; //price list		end;	end else begin		PU3r = PU2r[index];	end;	mtrw = matrowcnt(PU3r);	For(i=0;i<mtrw;i=i+1) begin	  matrowget(PU3r,i,PU2rw);	  if(PU2rw.ArtCode==item)then begin	  	pos = i;	  	found = true;	  	i = mtrw;	  end;	end; 	if(!found)then begin		pos = mtrw - 1;	end;	pos = pos + 1;	PU3rw.ArtCode = item;	PU3rw.UPrice = price;	while (tempqty>0) begin		MatRowInsert(PU3r,pos,PU3rw);		pos = pos + 1;		temprownr = temprownr + 1;		tempqty = tempqty - 1;	end;	rownr[index] = temprownr;	PU2r[index] = PU3r;  return;end; //Edit***************************Sasha2,17:22 24.10.2014 }global //Edit***************************Sasha2,17:38 13.10.2014 {procedure PrepareSingleQtyPUVcLabelItems(record PUVc PUr,var array record PUVc PU2r,var array Integer rownr,string prlist)BEGIN  row PUVc PUrw;  record INVc INr;  Integer i,rwcnt;     rwcnt = MatRowCnt(PUr);    for (i=0;i<rwcnt;i=i+1) begin    	MatRowGet(PUr,i,PUrw);    	INr.Code = PUrw.ArtCode;    	if (nonblank(PUrw.ArtCode) and ReadFirstMain(INr,1,true)) then begin    		switch (INr.LSize) begin    			case 0: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,0,prlist);    			case 1: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,1,prlist);    			case 2: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,2,prlist);    			case 3: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,3,prlist);    			case 4: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,4,prlist);    			case 5: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,5,prlist);    			case 6: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,6,prlist);    			case 7: PopulateAndSaveSingleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,rownr,7,prlist);    		end;	    	end;    end;      RETURN;END; //Edit***************************Sasha2,17:38 13.10.2014 }global //Edit***************************Sasha2,17:38 13.10.2014 {procedure PrepareSingleQtyStockLabelItems(var array record PUVc PU2r,var array Integer rownr,string location,string prlist)BEGIN  record ItemStatusVc ISr;  record INVc INr;  record PLVc PLr;  Integer i,rwcnt;  Boolean TrHs,testf;  val price; 	    ISr.Location = location;    TrHs = true;    While (LoopKey("Location",ISr,1,TrHs)) begin    	testf = true;    	if (blank(location)) then begin TrHs = false; testf = false; end;    	if (nonblank(location) and ISr.Location!=location) then begin TrHs = false; testf = false; end;    	if (ISr.Instock==0) then begin testf = false; end;    	if (testf) then begin    		INr.Code = ISr.Code;    		if (nonblank(ISr.Code) and ReadFirstMain(INr,1,true)) then begin    			if (blank(prlist)) then begin    				price = INr.UPrice1;    			end else begin    				PLr.ArtCode = ISr.Code;    				PLr.PLCode = prlist;    				Readfirstmain(PLr,2,true);    				price = PLr.ExVatPrice;    			end;    			if (price!=0) then begin		    		switch (INr.LSize) begin		    			case 0: PopulateAndSaveSingleQtyPURow(PU2r,ISr.Code,price,rownr,0,prlist);		    			case 1: PopulateAndSaveSingleQtyPURow(PU2r,ISr.Code,price,rownr,1,prlist);		    			case 2: PopulateAndSaveSingleQtyPURow(PU2r,ISr.Code,price,rownr,2,prlist);		    			case 3: PopulateAndSaveSingleQtyPURow(PU2r,ISr.Code,price,rownr,3,prlist);		    			case 4: PopulateAndSaveSingleQtyPURow(PU2r,ISr.Code,price,rownr,4,prlist);		    			case 5: PopulateAndSaveSingleQtyPURow(PU2r,ISr.Code,price,rownr,5,prlist);		    			case 6: PopulateAndSaveSingleQtyPURow(PU2r,ISr.Code,price,rownr,6,prlist);		    		end;	    		end;		    	end;    	end;    	    end;      RETURN;END; //Edit***************************Sasha2,17:38 13.10.2014 }global //Edit***************************Sasha2,17:38 13.10.2014 {procedure PrepareMultipleQtyPUVcLabelItems(record PUVc PUr,var array record PUVc PU2r,var array Integer rownr,string prlist)BEGIN  row PUVc PUrw;  record INVc INr;  Integer i,rwcnt;     rwcnt = MatRowCnt(PUr);    for (i=0;i<rwcnt;i=i+1) begin    	MatRowGet(PUr,i,PUrw);    	INr.Code = PUrw.ArtCode;    	if (nonblank(PUrw.ArtCode) and ReadFirstMain(INr,1,true)) then begin    		PopulateAndSaveMultipleQtyPURow(PU2r,PUrw.ArtCode,PUrw.UPrice,PUrw.Quant,rownr,0,prlist);    	end;    end;      RETURN;END; //Edit***************************Sasha2,17:38 13.10.2014 }global //Edit***************************Sasha2,17:38 13.10.2014 {procedure PrepareMultipleQtyStockLabelItems(var array record PUVc PU2r,var array Integer rownr,string location,string prlist)BEGIN  record ItemStatusVc ISr;  record INVc INr;  record PLVc PLr;  Integer i,rwcnt;  Boolean TrHs,testf;  val price; 	    ISr.Location = location;    TrHs = true;    While (LoopKey("Location",ISr,1,TrHs)) begin    	testf = true;    	if (blank(location)) then begin TrHs = false; testf = false; end;    	if (nonblank(location) and ISr.Location!=location) then begin TrHs = false; testf = false; end;    	if (ISr.Instock==0) then begin testf = false; end;    	if (testf) then begin    		INr.Code = ISr.Code;    		if (nonblank(ISr.Code) and ReadFirstMain(INr,1,true)) then begin    			if (blank(prlist)) then begin    				price = INr.UPrice1;    			end else begin    				PLr.ArtCode = ISr.Code;    				PLr.PLCode = prlist;    				Readfirstmain(PLr,2,true);    				price = PLr.ExVatPrice;    			end;    			if (price!=0) then begin	    			PopulateAndSaveMultipleQtyPURow(PU2r,ISr.Code,price,ISr.Instock,rownr,0,prlist);	    		end;		    	end;    	end;    	    end;      RETURN;END; //Edit***************************Sasha2,17:38 13.10.2014 }globalprocedure LabelStockItemsRn(record RcVc RepSpec)begin  array record PUVc PUr;  Integer i;  array integer rownr;  boolean previewf;  /*StartReportJob(USetStr(0));  EndJob;*/  	switch (RepSpec.ArtMode) begin  		case 0: previewf = false;  		case 1: previewf = true;  	end;  	previewf = false; //Edit***************************Sasha2,16:39 24.12.2014  	if (RepSpec.OnlyUnprntd==0) then begin  		PrepareSingleQtyStockLabelItems(PUr,rownr,RepSpec.f1,RepSpec.f2);  		for (i=0;i<7;i=i+1) begin  			if (rownr[i]>0) then begin  				PrintDocument(PUr[i],"ItemLabForm" & (i+1),previewf);  			end;  		end;  	end else begin  		PrepareMultipleQtyStockLabelItems(PUr,rownr,RepSpec.f1,RepSpec.f2);  		if (rownr[0]>0) then begin  			PrintDocument(PUr[0],"ItemLabForm8",previewf);  		end;  	end;    return;end;procedure ChangeUPrice(var record PUVc PU3r,string prlist)begin  row PUVc PU3rw;  record PLVc PLr;  integer i,rwcnt;  string 40 item;  	  rwcnt = MatRowCnt(PU3r);	  for (i=0;i<rwcnt;i=i+1) begin	    MatRowGet(PU3r,i,PU3rw);	    if (item!=PU3rw.ArtCode) then begin	      PLr.ArtCode = PU3rw.ArtCode;	      item = PU3rw.ArtCode;  	    PLr.PLCode = prlist;  	    Readfirstmain(PLr,2,true);	    end;  	  PU3rw.UPrice = PLr.ExVatPrice;  	  MatRowPut(PU3r,i,PU3rw);	  end;   return; end;globalupdating procedure LabelPUVcItemsRn(record RcVc RepSpec)begin  record PUVc PUr,PU3r;  array record PUVc PU2r;  Integer i;  array integer rownr;  boolean previewf;      	switch (RepSpec.ArtMode) begin  		case 0: previewf = false;  		case 1: previewf = true;  	end;  	previewf = false; //Edit***************************Sasha2,16:39 24.12.2014  	  	PUr.SerNr = RepSpec.long1;  	if (ReadFirstMain(PUr,1,true)) then begin  	  RecordCopy(PUr,PU3r);  	  ChangeUPrice(PU3r,RepSpec.f2);  		if (RepSpec.OnlyUnprntd==0) then begin  			PrepareSingleQtyPUVcLabelItems(PU3r,PU2r,rownr,RepSpec.f2);		    for (i=0;i<7;i=i+1) begin		    	if (rownr[i]>0) then begin		    		PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);		    	end;		    end;  		end else begin  			PrepareMultipleQtyPUVcLabelItems(PU3r,PU2r,rownr,RepSpec.f2);	    	if (rownr[0]>0) then begin	    		PrintDocument(PU2r[0],"ItemLabForm8",previewf);	    	end;  		end;  	end;	    return;end; global //Edit***************************Sasha2,16:14 26.01.2015 {procedure HandlePrintEAN13PU(record PUVc PUr)begin  array record PUVc PU2r;  Integer i;  array integer rownr;  boolean previewf;      	/*switch (RepSpec.ArtMode) begin  		case 0: previewf = false;  		case 1: previewf = true;  	end;*/  	previewf = false;		PrepareMultipleQtyPUVcLabelItems(PUr,PU2r,rownr,"");  	if (rownr[0]>0) then begin  		PrintDocument(PU2r[0],"ItemLabForm9",previewf);  	end;    return;end; //Edit***************************Sasha2,16:14 26.01.2015 }function Boolean MyRepricingDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)BEGIN  record MyRepricingVc MRr;  row MyRepricingVc MRrw;  record MyLabelItemVc MLIr;  record INVc INr;  Boolean res;  record PLVc PLr;  val vat,novat,price;  string 10 curcode;  record ItemStatusVc ISr;    res = true;  if (changedf) then begin        GetWindowRecord(wn,MRr);    matrowget(MRr,rownr,MRrw);    PLr.ArtCode = MRrw.ArtCode;    PLr.PLCode = MRr.DefPriceCode;    if(readfirstmain(PLr,2,true))then begin    	MRrw.Price=PLr.ExVatPrice;    end;    INr.Code = MRrw.ArtCode;    Readfirstmain(INr,1,false);    MRrw.Spec = INr.Name;    ISr.Code = MRrw.ArtCode;    ISr.Location = MRr.Location;    if(readfirstmain(ISr,2,true))then begin      if(ISr.Code==MRrw.ArtCode and ISr.Location==MRr.Location)then begin        MRrw.Quant = ISr.Instock;      end;    end;        MatrowPut(MRr,rownr,MRrw);    PutWindowRecord(wn,MRr);  end;  MyRepricingDClassArtCodeEFAfter = res;  RETURN;END;function Boolean MyRepricingDClassDefPriceCodeEFAfter(Integer wn,Boolean changedf)BEGIN  record MyRepricingVc MRr;  row MyRepricingVc MRrw;  record MyLabelItemVc MLIr;  record INVc INr;  Boolean res;  record PLVc PLr;  val vat,novat,price;  string 10 curcode;  record ItemStatusVc ISr;  integer i,mtrw;    res = true;  if (changedf) then begin        GetWindowRecord(wn,MRr);    mtrw = matrowcnt(MRr);    For(i=0;i<mtrw;i=i+1) begin			matrowget(MRr,i,MRrw);			PLr.ArtCode = MRrw.ArtCode;			PLr.PLCode = MRr.DefPriceCode;			if(readfirstmain(PLr,2,true))then begin				MRrw.Price=PLr.ExVatPrice;			end;			matrowput(MRr,i,MRrw);    end;    MatrowPut(MRr,i,MRrw);    PutWindowRecord(wn,MRr);  end;  MyRepricingDClassDefPriceCodeEFAfter = res;  RETURN;END;function Boolean MyRepricingDClassLocationEFAfter(Integer wn,Boolean changedf)BEGIN  record MyRepricingVc MRr;  row MyRepricingVc MRrw;  record MyLabelItemVc MLIr;  record INVc INr;  Boolean res;  record PLVc PLr;  val vat,novat,price;  string 10 curcode;  record ItemStatusVc ISr;  integer i,mtrw;    res = true;  if (changedf) then begin        GetWindowRecord(wn,MRr);    mtrw = matrowcnt(MRr);    For(i=0;i<mtrw;i=i+1) begin			matrowget(MRr,i,MRrw);			ISr.Code = MRrw.ArtCode;			ISr.Location = MRr.Location;			if(readfirstmain(ISr,2,true))then begin				if(ISr.Code==MRrw.ArtCode and ISr.Location==MRr.Location)then begin					MRrw.Quant = ISr.Instock;				end;			end;			matrowput(MRr,i,MRrw);    end;    MatrowPut(MRr,i,MRrw);    PutWindowRecord(wn,MRr);  end;  MyRepricingDClassLocationEFAfter = res;  RETURN;END;globalfunction Boolean MyRepricingDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  switch (fieldname) begin    case "ArtCode": res = MyRepricingDClassArtCodeEFAfter(wn,rownr,changed);    case "DefPriceCode": res = MyRepricingDClassDefPriceCodeEFAfter(wn,changed);    case "Location": res = MyRepricingDClassLocationEFAfter(wn,changed);  end;  MyRepricingDClassAfterEditField = res;  RETURN;END;globalfunction LongInt MyRepricingVcRecordDefaults(record MyRepricingVc MRr,record MyRepricingVc MR2r,LongInt stat,LongInt check)BEGIN  LongInt res;  record LocalMachineBlock LMb;  record CUVc CUr;        blockload(LMb);	MRr.Location = LMb.DefLocation;	CUr.Code = LMb.DefCustCode;	if(readfirstmain(CUr,1,true))then begin		if(nonblank(CUr.PLCode))then begin			MRr.DefPriceCode = CUr.PLCode;		end;	end;		  MyRepricingVcRecordDefaults = res;    RETURN;END;globalfunction LongInt MyRepricingVcRecordDefaultsClient(record MyRepricingVc MRr,record MyRepricingVc MR2r,LongInt stat,LongInt check)BEGIN  LongInt res;  record LocalMachineBlock LMb;  record CUVc CUr;        blockload(LMb);	MRr.Location = LMb.DefLocation;	CUr.Code = LMb.DefCustCode;	if(readfirstmain(CUr,1,true))then begin		if(nonblank(CUr.PLCode))then begin			MRr.DefPriceCode = CUr.PLCode;		end;	end;		  MyRepricingVcRecordDefaultsClient = res;    RETURN;END;globalfunction LongInt MyRepricingVcRecordCheck(record MyRepricingVc MRr,record MyRepricingVc MR2r,LongInt stat,LongInt check)BEGIN  if(blank(MRr.TransDate))then begin    MRr.TransDate = currentdate;  end;    if(blank(MRr.SalesMan))then begin    MRr.SalesMan = currentuser;  end;    if(MRr.SerNr==-1)then begin    MRr.SerNr = NextSerNr("MyRepricingVc",MRr.TransDate,-1,false,"");  end;return;end;procedure pastepricettopu(var record PUVc PUr, record MyRepricingVc MRr)begin	integer i,j,mtrw1,mtrw2;	row PUVc PUrw;	row MyRepricingVc MRrw;		PUr.Location = MRr.Location;	mtrw1 = matrowcnt(PUr);	For(i=0;i<mtrw1;i=i+1) begin	  matrowget(PUr,i,PUrw);	  mtrw2 = matrowcnt(MRr);	  For(j=0;j<mtrw2;j=j+1) begin	  	matrowget(MRr,j,MRrw);	  	if(PUrw.ArtCode==MRrw.ArtCode)then begin	  		PUrw.UPrice = MRrw.Price;	  		matrowput(PUr,i,PUrw);	  	end;		end; 	  	end; 	return;end;globalupdating function Boolean MyRepricingDClassPrint(Integer wn,Boolean previewf)BEGIN  record MyRepricingVc MRr;  row MyRepricingVc MRrw;  integer i,mtrw,j,mtrw2;  Integer normalmode,tf;  record LocalMachineBlock LMb;	record PUVc PUr;	row PUVc PUrw;	array record PUVc PU2r;	array integer rownr;      blockload(LMb);  normalmode = 0;//Rs_normal  DeselectWindow(wn,false);  GetWindowRecord(wn,MRr);	//previewf = false; 		recordNew(PUr);	PUr.Location = MRr.Location;	mtrw = matrowcnt(MRr);	For(i=0;i<mtrw;i=i+1) begin		matrowget(MRr,i,MRrw);		PUrw.ArtCode = MRrw.ArtCode;		PUrw.Quant = MRrw.Quant;		matrowPUt(PUr,i,PUrw);	end; 		if (MRr.Size==0) then begin		PrepareSingleQtyPUVcLabelItems(PUr,PU2r,rownr,MRr.DefPriceCode);		for (i=0;i<8;i=i+1) begin			if (rownr[i]>0) then begin				switch(i)begin					case 0:pastepricettopu(PU2r[i],MRr);								PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);					case 1:pastepricettopu(PU2r[i],MRr);							  PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);					case 2:pastepricettopu(PU2r[i],MRr);								PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);					case 3:pastepricettopu(PU2r[i],MRr);								PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);					case 4:pastepricettopu(PU2r[i],MRr);								PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);					case 5:pastepricettopu(PU2r[i],MRr);								PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);					case 6:pastepricettopu(PU2r[i],MRr);								PrintDocument(PU2r[i],"ItemLabForm" & (i+1),previewf);					case 7:pastepricettopu(PU2r[i],MRr);// Edit ************************** Thursday, 11 June 2015 12:55:39								 PrintDocument(PU2r[i],"ItemLabForm" & (9),previewf);// Edit ************************** Thursday, 11 June 2015 12:55:40				end;			end;		end;	end else begin		PrepareMultipleQtyPUVcLabelItems(PUr,PU2r,rownr,MRr.DefPriceCode);		if (rownr[0]>0) then begin			pastepricettopu(PU2r[0],MRr);			PrintDocument(PU2r[0],"ItemLabForm8",previewf);		end;	end;      MyRepricingDClassPrint = true;  RETURN;END;