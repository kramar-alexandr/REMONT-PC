remote updating procedure SendToShopsFromORVcRoutine(var record StockMovVc,record ORVc,var integer,integer);remote updating procedure TakeFromShopsFromORVcRoutine(var record StockMovVc,record ORVc,var integer,integer);remote updating procedure HandleSplitSerialItemsORVc(var record ORVc,Integer,var string);//Edit***************************Sasha2,11:38 23.07.2015external function roundmode SetRoundModeD(Integer);// Edit ************************** Thursday, 11 February 2016 11:07:50external procedure ValToText(val,Integer,string,string,var string);// Edit ************************** Thursday, 11 February 2016 11:12:36external procedure GetObjs(string,string,var string);external procedure XmlXlsxWorkBegin(string,string);external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);external procedure EndSheet(integer,string,integer);external procedure SetSheetsCols(integer,array val,array integer,string);external procedure BeginSheetData(integer,string);external procedure EndSheetData(integer,string);external procedure BeginRow(integer,string,integer,integer,val);external procedure EndRow(integer,string,var integer);external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);external procedure NumericCell(integer,string,var integer,integer,integer,val);external procedure EmptyCell(integer,string,var integer,integer,integer,integer);external procedure MergeCells(integer,string,array string,integer);external procedure FillSharedStrings(string,array string,integer,integer,array string);external procedure ConvertToXLSX(string,boolean);external function string 10 GetStringCellNum(integer,integer);external function string 50 TimeToString(time,string,boolean);SetLangMode(LangRussian,"RUS",0);global //Edit***************************Sasha2,15:00 26.08.2014 {updating procedure SplitSerialItemsORVcDm()BEGIN longint wn; record ORVc ORr; integer rwcnt; string 255 warning; 	 	wn = CurWindow;	GetWindowRecord(wn,ORr);	DeselectWindow(wn,true);	rwcnt = MatRowCnt(ORr);  if (WindowState(wn) == Rs_normal and rwcnt>0) then begin  	if (ORr.OKFlag==0) then begin  	  HandleSplitSerialItemsORVc(ORr,rwcnt,warning);  	end else begin  	  warning = "Oreder is OKed";  	end;  	if (Blank(warning)) then begin  	  PutWindowRecord(wn,ORr);  	end else begin  	  MessageBox(0,warning);  	end;  end; RETURN;end;//Edit***************************Sasha2,15:00 26.08.2014 }global //Edit***************************Sasha2,15:00 26.08.2014 {updating procedure SendToShopsFromORVcDm()BEGIN longint wn; record ORVc ORr; record StockMovVc StockMovr; integer res,company; 	 	res = 0; 	company = CurrentCompany; 	wn = CurWindow;  	GetWindowRecord(wn,ORr);    if (WindowState(wn) == Rs_normal) then begin    	RECORDNEW(StockMovr);    	SendToShopsFromORVcRoutine(StockMovr,ORr,res,company);    end;    if (res>0) then begin    	OpenWindow("StockMovDClass",1,0,"","",StockMovr);        UpdateBrowses("StockMov");    end; RETURN;end;//Edit***************************Sasha2,15:00 26.08.2014 }global //Edit***************************Sasha2,15:00 26.08.2014 {updating procedure TakeFromShopsFromORVcDm()BEGIN longint wn; record ORVc ORr; record StockMovVc StockMovr; integer res,company; 	 	res = 0; 	company = CurrentCompany; 	wn = CurWindow;	GetWindowRecord(wn,ORr);  if (WindowState(wn) == Rs_normal) then begin  	RECORDNEW(StockMovr);  	TakeFromShopsFromORVcRoutine(StockMovr,ORr,res,company);  end;  if (res>0) then begin  	OpenWindow("StockMovDClass",1,0,"","",StockMovr);      UpdateBrowses("StockMov");  end;RETURN;end;/*global //Edit***************************Sasha2,15:00 26.08.2014 { TakeFromShopsFromORVcDm using ItemHistVcupdating procedure TakeFromShopsFromORVcDm()BEGIN record ORVc ORr; row ORVc ORrw; longint wn,nwn; record StockMovVc StockMovr,StockMov2r; row StockMovVc StockMovrw, StockMov2rw; record INVc INr; record ItemHistVc IHr; integer rwcnt,i,rwcnt1,j,rownr,company; val itemqty; Boolean notserial,StockMovexists,TrHs,testf;  	rownr = 0; 	company = CurrentCompany; 	wn = CurWindow;  	GetWindowRecord(wn,ORr);  	if (WindowState(wn) == Rs_normal) then begin  		//if (ORr.OrderClass=="Shops" ) then begin  			rwcnt=MatRowCnt(ORr);  			RECORDNEW(StockMov2r);  			StockMovr.OrderNr = ORr.SerNr;  			StockMovexists = ReadFirstKey("OrderNr",StockMovr,1,true);  			for (i=0;i<rwcnt;i=i+1) begin  				MatRowGet(ORr,i,ORrw);  				if ((ORrw.Quant - ORrw.Shipd2) > 0 and NonBlank(ORrw.ArtCode)) then begin  					itemqty = 0;  					notserial = false;  					INr.Code = ORrw.ArtCode;  					ReadFirstMain(INr,1,true);  					if (StockMovexists) then begin  						while (LoopKey("OrderNr",StockMovr,1,true)) begin	  						rwcnt1=MatRowCnt(StockMovr);	  						for (j=0;j<rwcnt1;j=j+1) begin	  							MatRowGet(StockMovr,j,StockMovrw);	  							if (StockMovr.OKFlag==1 and StockMovrw.ArtCode==ORrw.ArtCode and StockMovrw.ORRow==i) then begin	  								IHr.ArtCode = ORrw.ArtCode;	  								IHr.Location = ORr.Location;	  								TrHs = true;	  								while(LoopKey("ActiveLocQty",IHr,2,TrHs)) begin	  									testf = true;	  									if (IHr.ArtCode!=ORrw.ArtCode or IHr.Location!=ORr.Location) then begin testf = false;TrHs = false;end;	  									if (IHr.FileName!="StockMovVc" or IHr.TransNr!=StockMovr.SerNr) then begin testf = false;end;	  									if (INr.SerNrf==1 and IHr.SerialNr!=StockMovrw.SerialNr) then begin  testf = false;end;	  									if (testf) then begin	  										if (INr.SerNrf == 1) then begin	  											StockMov2rw.ArtCode = ORrw.ArtCode;						  						StockMov2rw.Spec = ORrw.Spec;						  						StockMov2rw.OrdQuant = 1;						  						StockMov2rw.SentQuant = 1;						  						StockMov2rw.Quant = 1;						  						StockMov2rw.SerialNr = IHr.SerialNr;						  						StockMov2rw.OldPrice = ORrw.BasePrice;//???		  										StockMov2rw.NewPrice = ORrw.BasePrice;//???						  						StockMov2rw.ORRow = i;						  						MatRowPut(StockMov2r,rownr,StockMov2rw);						  						rownr = rownr + 1;	  											notserial = false;  											end else begin  												itemqty = itemqty + IHr.RemQty;  												notserial = true;  											end;	  									end;	  								end;RESETLOOP(IHr);	  							end;	  						end;  						end;RESETLOOP(StockMovr);  					end;  					if (itemqty > 0 and notserial == true) then begin  						StockMov2rw.ArtCode = ORrw.ArtCode;  						StockMov2rw.Spec = ORrw.Spec;  						StockMov2rw.OrdQuant = itemqty;  						StockMov2rw.SentQuant = itemqty;  						StockMov2rw.Quant = itemqty;  						StockMov2rw.SerialNr = "";  						StockMov2rw.OldPrice = ORrw.BasePrice;//???		  				StockMov2rw.NewPrice = ORrw.BasePrice;//???  						StockMov2rw.ORRow = i;  						MatRowPut(StockMov2r,rownr,StockMov2rw);  						rownr = rownr + 1;  					end;	  				end;  			end;  			if (rownr > 0) then begin  				StockMov2r.OrderNr = ORr.SerNr;  				StockMov2r.OrdTransDate = CurrentDate;  				StockMov2r.SerNr = NextSerNr("StockMovVc","",-1,false,"");  				StockMov2r.FrLocation = ORr.Location;  				if (RECORDSTORE(StockMov2r,true)) then begin  					CreateRecordLink(ORr,company,StockMov2r,company);  					CreateRecordLink(StockMov2r,company,ORr,company);  				end;  			end;	  		//end;	  	end;RETURN;end;*/function string 20 GetMonthName(date d1,boolean upcase)begin	string 20 res;	integer month;		month = getmonth(d1);		if(upcase)then begin		switch(month)begin			case 1: res = "Січня";			case 2: res = "Лютого";			case 3: res = "Березня";			case 4: res = "Квітня";			case 5: res = "Травня";			case 6: res = "Червня";			case 7: res = "Липня";			case 8: res = "Серпня";			case 9: res = "Вересня";			case 10: res = "Жовтня";			case 11: res = "Листопада";			case 12:	res = "Грудня";		end;	end else begin		switch(month)begin			case 1: res = "січня";			case 2: res = "лютого";			case 3: res = "березня";			case 4: res = "квітня";			case 5: res = "травня";			case 6: res = "червня";			case 7: res = "липня";			case 8: res = "серпня";			case 9: res = "вересня";			case 10: res = "жовтня";			case 11: res = "листопада";			case 12:	res = "грудня";		end;	end;		GetMonthName = res;return;end;globalprocedure ORtoExcel1Remote(record ORVc ORr, var string fnserv, var string md5str)begin	record CUVc CUr;	row ORVc ORrw;	integer i,mtrw,cnt;	val t;	string 200 tstr;    array string 10 sheetNames;	array val sheetColls;	array integer sheetCollsOutLvl;	array string 21 mergeCell;	string 255 fileToSave;	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;	array string 100 SharedStrings;	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;	string 16 reportName;  array integer lvlArray;  array string 255 mas;    reportName = "ORtoExcel";  if(windowsmode==1)then begin    fileToSave = DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";  end else begin    fileToSave = "/" & DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";  end;  deletefolder(Left(fileToSave,(len(fileToSave) - 5)));  qtyOfSheets = 1;  sheetNames[0] = "Лист1";    colnum = 0;  sheetColls[colnum] = 4;  colnum = colnum + 1;  sheetColls[colnum] = 13.5703125;  colnum = colnum + 1;  sheetColls[colnum] = 28.85546875;  colnum = colnum + 1;  sheetColls[colnum] = 11;  colnum = colnum + 1;  sheetColls[colnum] = 13.85546875;  colnum = colnum + 1;  sheetColls[colnum] = 17.28515625;  colnum = colnum + 1;  sheetColls[colnum] = 20.7109375;    colnum = 0;  numOfUniqueSharedStrings = 0;  numOfSharedStrings = 0;  sheetnum = 1;  qtyMergeCell = 0;  XmlXlsxWorkBegin(fileToSave,reportName);  CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);  SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);  BeginSheetData(sheetnum,fileToSave);    rownum = 1;    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      style = 15;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,"ВИДАТКОВА НАКЛАДНА № " & ORr.SerNr & "  від   " & getday(ORr.OrdDate) & " " & GetMonthName(ORr.OrdDate,false) & " " & getyear(ORr.OrdDate) & " р.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 6;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    rownum = rownum + 1;    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Постачальник:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,"ТОВАРИСТВО З ОБМЕЖЕНОЮ ВІДПОВІДАЛЬНІСТЮ " & Chr(34) & "XXXXXXXX" & Chr(34),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Код ЄДРПОУ:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,"XXXXXXXX",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Адреса:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Адреса",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Покупець:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,ORr.Addr0,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);        CUr.Code = ORr.CustCode;    readfirstmain(CUr,1,true);            BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Код ЄДРПОУ:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,CUr.RegNr1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Адреса:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,ORr.Addr1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Підстава:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Рахунок на сплату № " & ORr.SerNr & "  від   " & getday(ORr.OrdDate) & " " & GetMonthName(ORr.OrdDate,false) & " " & getyear(ORr.OrdDate) & " р.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 2;      style = 5;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Договір:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 20;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Договір поставки № " & CUr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    rownum = rownum + 1;    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      style = 6;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"№ з/п",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 6;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Артикул",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 7;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Найменування",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 1;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Одиниця виміру",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 7;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кількість",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 7;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Ціна без ПДВ",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 6;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Сума без ПДВ",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);    EndRow(sheetnum,fileToSave,rownum);	    mtrw = matrowcnt(ORr);    cnt = 1;    for (i=0;i<mtrw;i=i+1) begin      matrowget(ORr,i,ORrw);      if (ORrw.stp==1 and nonblank(ORrw.ArtCode)) then begin        BeginRow(sheetnum,fileToSave,rownum,0,blankval);          colnum = 1;          style = 4;          NumericCell(sheetnum,fileToSave,colnum,rownum,style,cnt);          style = 4;          StringCell(sheetnum,fileToSave,colnum,rownum,style,ORrw.ArtCode,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);          style = 9;          StringCell(sheetnum,fileToSave,colnum,rownum,style,ORrw.Spec,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);          style = 9;          StringCell(sheetnum,fileToSave,colnum,rownum,style,"шт.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);          style = 14;          NumericCell(sheetnum,fileToSave,colnum,rownum,style,ORrw.Quant);          style = 13;          NumericCell(sheetnum,fileToSave,colnum,rownum,style,round((ORrw.Price/12*10),SetRoundModeD(2)));          style = 12;          t=t+round((ORrw.Price * (100-ORrw.vRebate)/100/12*10* ORrw.Quant),SetRoundModeD(2));          NumericCell(sheetnum,fileToSave,colnum,rownum,style,round((ORrw.Price * (100-ORrw.vRebate)/100/12*10*ORrw.Quant),SetRoundModeD(2)));        EndRow(sheetnum,fileToSave,rownum);        cnt = cnt + 1;      end;    end;	BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      style = 16;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Разом без ПДВ:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 17;      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      style = 18;      qtyOfEmpStr = 1;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;      style = 2;      NumericCell(sheetnum,fileToSave,colnum,rownum,style,round(ORr.Sum4/12*10,SetRoundModeD(2)));    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      style = 16;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"ПДВ:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 17;      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      style = 18;      qtyOfEmpStr = 1;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;      style = 2;      NumericCell(sheetnum,fileToSave,colnum,rownum,style,ORr.Sum4 - round(ORr.Sum4/12*10,SetRoundModeD(2)));    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      style = 16;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Всього:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 17;      qtyOfEmpStr = 4;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      style = 18;      qtyOfEmpStr = 1;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;      style = 3;      NumericCell(sheetnum,fileToSave,colnum,rownum,style,ORr.Sum4);    EndRow(sheetnum,fileToSave,rownum);    rownum = rownum + 1;    t = ORr.Sum4;    ValToText(t,M4Val,"UAHIB","UKR",tstr);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      style = 24;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Всього: " & tstr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 6;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    rownum = rownum + 3;    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      style = 10;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Відпустив:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      colnum = colnum + 3;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Отримав:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      style = 22;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      //StringCell(sheetnum,fileToSave,colnum,rownum,style,"Ім`я",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 2;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      style = 10;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Директор ХХХХХХХХ",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      colnum = colnum + 4;      style = 22;      mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Доручення №",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);      qtyOfEmpStr = 1;      EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);      mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);      qtyMergeCell = qtyMergeCell + 1;    EndRow(sheetnum,fileToSave,rownum);    BeginRow(sheetnum,fileToSave,rownum,0,blankval);      colnum = 1;      style = 10;      StringCell(sheetnum,fileToSave,colnum,rownum,style,"Місце складання: м.Київ",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);    EndRow(sheetnum,fileToSave,rownum);  EndSheetData(sheetnum,fileToSave);  MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);  EndSheet(sheetnum,fileToSave,0);  FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);  ConvertToXLSX(fileToSave,false);  MilliSleep(2000);  fnserv = fileToSave;  md5str = GetFileMD5(fnserv);  return;end;