external function LongInt DateDiff(Date,Date);
external function LongInt CountWorkingDays(Date,Date,string,string);
external function boolean KIVIFound(record SVOVc);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);

SetLangMode(LangRussian,"RUS",0);

global
procedure MySortStringArray(var array string astr,integer cnt)
begin
	integer i,j;
	string 100 tmp1,tmp2;
	
	if(cnt>1)then begin
		for(j=0;j<cnt;j=j+1)begin
			for(i=0;i<cnt-1;i=i+1)begin
				if(uppercase(astr[i])>uppercase(astr[i+1]))then begin
					tmp1 = astr[i];
					tmp2 = astr[i+1];
					astr[i] = tmp2;
					astr[i+1] = tmp1;
				end;
			end;
		end;
	end;
		

return;
end;

global
procedure MySortLngIntArray(var array longint astr,integer cnt)
begin
	integer i,j;
	string 100 tmp1,tmp2;
	
	if(cnt>1)then begin
		for(j=0;j<cnt;j=j+1)begin
			for(i=0;i<cnt-1;i=i+1)begin
				if(uppercase(astr[i])>uppercase(astr[i+1]))then begin
					tmp1 = astr[i];
					tmp2 = astr[i+1];
					astr[i] = tmp2;
					astr[i+1] = tmp1;
				end;
			end;
		end;
	end;
		

return;
end;


procedure PrintHeader(record RcVc RepSpec)
begin
	if(nonblank(RepSpec.f1))then begin
		Header(1,"Приемка: " & RepSpec.f1,1);
	end else begin
		Header(1,"По всем точкам приемки",1);
	end;
	Header(2,"Период: " & RepSpec.sStartDate & ":" & RepSpec.sEndDate,0);
	
	if(nonblank(RepSpec.f3))then begin
		Header(2,"Мастер: " & RepSpec.f3,1);
	end else begin
		Header(2,"По всем Мастерам",1);
	end;
	if(nonblank(RepSpec.f4))then begin
		Header(3,"Приемщик: " & RepSpec.f4,1);
	end else begin
		Header(3,"По всем Приемщикам",1);
	end;
	endheader;
return;
end;

procedure FindPhoneDomain(record SVOVc SVOr,record RcVc RepSpec,string tphone,string cucude, var vector boolean vPhoneExist,var vector string vCuDomain,var vector string vCallType,var vector string vUTMSource)
begin
	record BinotelCallEndVc BCEr;
	boolean TrHsph;
	string 255 url;
	string 1 sim;
	integer i, l; 
	
	if(RepSpec.flags[0]>0)then begin
		if(nonblank(tphone))then begin
			if(vPhoneExist[tphone]==false)then begin
				vPhoneExist[tphone] = true;
				resetloop(BCEr);
				BCEr.externalNumber = tphone;
				BCEr.TransDate = SVOr.TransDate;
				TrHsph = true;
				while(loopkey("externalNumber",BCEr,2,TrHsph))begin
					if(BCEr.TransDate>RepSpec.sEndDate)then begin TrHsph=false; end;
					if(BCEr.externalNumber!=tphone)then begin TrHsph=false; end;
					
					
					if(TrHsph)then begin
						if(nonblank(BCEr.didName))then begin
							TrHsph=false;
							vCallType[cucude] = "SR";
							vCuDomain[cucude] = BCEr.didName;
						end;
						
						if(nonblank(BCEr.CTid))then begin
							TrHsph=false;
							vCallType[cucude] = "CT";
							if(nonblank(BCEr.CTdomain))then begin
								l = Len(BCEr.CTdomain);
								for(i=0;i<l;i=i+1) begin
									sim = mid(BCEr.CTdomain,i,1);
									if (sim=="?")then begin
										url = Left(BCEr.CTdomain,i-1);
										i = l;
									end else begin
										if(i==l-1)then begin
											url = Left(BCEr.CTdomain,i+1);
										end;
									end;
								end;
								vCuDomain[cucude] = url;
								vUTMSource[cucude] = ";" & BCEr.CTutmsource & ";" & BCEr.CTutmmedium & ";" & BCEr.CTutmcampaign & ";" & BCEr.CTutmcontent & ";" & BCEr.CTutmterm;

							end;
							
							/*if(nonblank(BCEr.CTutmsource))then begin
								vUTMSource[cucude] = BCEr.CTutmsource;
							end;
							if(nonblank(BCEr.CTutmcampaign))then begin
								vUTMCampaign[cucude] = BCEr.CTutmcampaign;
							end;
							if(nonblank(BCEr.CTutmterm))then begin
								vUTMTerm[cucude] = BCEr.CTutmterm;
							end;*/
							
						end;
				
						if(nonblank(BCEr.gCDid))then begin
							TrHsph=false;
							vCallType[cucude] = "GC";
							if(nonblank(BCEr.gCDfullUrl))then begin
								l = Len(BCEr.gCDfullUrl);
								for(i=0;i<l;i=i+1) begin
									sim = mid(BCEr.gCDfullUrl,i,1);
									if (sim=="?")then begin
										url = Left(BCEr.gCDfullUrl,i-1);
										i = l;
									end else begin
										if(i==l-1)then begin
											url = Left(BCEr.gCDfullUrl,i+1);
										end;
									end;
								end;
								vCuDomain[cucude] = url;
								vUTMSource[cucude] = ";" & BCEr.gCDutm_source & ";" & BCEr.gCDutm_medium & ";" & BCEr.gCDutm_campaign & ";" & BCEr.gCDutm_content & ";" & BCEr.gCDutm_term;

							end;
							/*if(nonblank(BCEr.gCDutm_source))then begin
								vUTMSource[cucude] = BCEr.gCDutm_source;
							end;
							if(nonblank(BCEr.gCDutm_campaign))then begin
								vUTMCampaign[cucude] = BCEr.gCDutm_campaign;
							end;
							if(nonblank(BCEr.gCDutm_term))then begin
								vUTMTerm[cucude] = BCEr.gCDutm_term;
							end;*/
							
						end;
						
						
						
						
					
						
						
					
					
					
					end;
				end;
			end;
		end;
	end;
	
return;
end;


procedure OutDaysInStatus(vector val st0,longint sernr,string man,string ing,var vector integer vManCanQty,var vector integer vIngCanQty)
begin
	array val tabs;
	
	tabs[0] = 0;
	tabs[1] = 40;
	tabs[2] = 80;
	tabs[3] = 100;
	tabs[4] = 150;
	tabs[5] = 180;
	tabs[6] = 240;
	tabs[7] = 280;
	tabs[8] = 340;
	
	/*if(st0[sernr & ":0"]>0)then begin
		startformat(15);
			outstring(tabs[0],0,"Дней в статусе:",false);
			outstring(tabs[1],0,"В ожидании",false);
			outstring(tabs[2],0,st0[sernr & ":0"],false);
		endformat;
	end;*/
	if(st0[sernr & ":1"]>3)then begin
		startformat(15);
			outstring(tabs[0],0,"Просрочено Дней в статусе:",false);
			outstring(tabs[1],0,"В ремонте",false);
			outstring(tabs[2],0,st0[sernr & ":1"]-3,false);
		endformat;
		vManCanQty[man & ":1"] = vManCanQty[man & ":1"] + st0[sernr & ":1"]-3;
		vIngCanQty[ing & ":1"] = vIngCanQty[ing & ":1"] + st0[sernr & ":1"]-3;
		vManCanQty[man & ":T"] = vManCanQty[man & ":T"] + st0[sernr & ":1"]-3;
		vIngCanQty[ing & ":T"] = vIngCanQty[ing & ":T"] + st0[sernr & ":1"]-3;
	end;
	/*if(st0[sernr & ":3"]>0)then begin
		startformat(15);
			outstring(tabs[0],0,"Дней в статусе:",false);
			outstring(tabs[1],0,"Ожидает запч.",false);
			outstring(tabs[2],0,st0[sernr & ":3"],false);
		endformat;
	end;*/
	/*if(st0[sernr & ":4"]>0)then begin
		startformat(15);
			outstring(tabs[0],0,"Дней в статусе:",false);
			outstring(tabs[1],0,"На согласовании",false);
			outstring(tabs[2],0,st0[sernr & ":4"],false);
		endformat;
	end;*/
	if(st0[sernr & ":5"]>3)then begin
		startformat(15);
			outstring(tabs[0],0,"Просрочено Дней в статусе:",false);
			outstring(tabs[1],0,"На диагностике",false);
			outstring(tabs[2],0,st0[sernr & ":5"]-3,false);
		endformat;
		vManCanQty[man & ":5"] = vManCanQty[man & ":5"] + st0[sernr & ":5"]-3;
		vIngCanQty[ing & ":5"] = vIngCanQty[ing & ":5"] + st0[sernr & ":5"]-3;
		vManCanQty[man & ":T"] = vManCanQty[man & ":T"] + st0[sernr & ":5"]-3;
		vIngCanQty[ing & ":T"] = vIngCanQty[ing & ":T"] + st0[sernr & ":5"]-3;
	end;
	/*if(st0[sernr & ":7"]>0)then begin
		startformat(15);
			outstring(tabs[0],0,"Дней в статусе:",false);
			outstring(tabs[1],0,"Согласовано",false);
			outstring(tabs[2],0,st0[sernr & ":7"],false);
		endformat;
	end;*/
	/*if(st0[sernr & ":8"]>0)then begin
		startformat(15);
			outstring(tabs[0],0,"Дней в статусе:",false);
			outstring(tabs[1],0,"В удал. сервисе",false);
			outstring(tabs[2],0,st0[sernr & ":8"],false);
		endformat;
	end;*/
	if(st0[sernr & ":10"]>3)then begin
		startformat(15);
			outstring(tabs[0],0,"Просрочено Дней в статусе:",false);
			outstring(tabs[1],0,"Заказать запч.",false);
			outstring(tabs[2],0,st0[sernr & ":10"]-3,false);
		endformat;
		vManCanQty[man & ":10"] = vManCanQty[man & ":10"] + st0[sernr & ":10"]-3;
		vIngCanQty[ing & ":10"] = vIngCanQty[ing & ":10"] + st0[sernr & ":10"]-3;
		vManCanQty[man & ":T"] = vManCanQty[man & ":T"] + st0[sernr & ":10"]-3;
		vIngCanQty[ing & ":T"] = vIngCanQty[ing & ":T"] + st0[sernr & ":10"]-3;
	end;
	/*if(st0[sernr & ":11"]>0)then begin
		startformat(15);
			outstring(tabs[0],0,"Дней в статусе:",false);
			outstring(tabs[1],0,"Вернули на дораб.",false);
			outstring(tabs[2],0,st0[sernr & ":11"],false);
		endformat;
	end;*/
return;
end;

global procedure ServiceJobsRnProc(record RcVc RepSpec,var integer mancnt,var integer ingcnt,var vector val vIngSum,var vector val vManSum,var array string aing,var array string aman)
begin
	record INVc INr;
	record SVOVc SVOr,oldSVOr;
	row SVOVc SVOrw;
	vector longint vSerSVONr;
	array string 50 users;
	integer k,i,mtrw,j,mtrw1;
	array integer tabs;
	val dolg,totdolg,supertotdolg,totserv;
	val dolgdet,totdolgdet,supertotdolgdet,totservdet;
	record IPRsVc IPRsr,IPRs2r;
	date sd,ed;
	boolean TrHs,testf,filter,svoout;
	record IVVc IVr,credIVr,IV2r;
	record IPVc IPr,IP2r;
	vector val ivsum,svodolg,ivsumserv,ivsumdet,svodolgdet,ivsumservdet,ivretsum,ivsumservstrah;
	vector boolean svoexist,vPhoneExist,vCuExist,ivexist;
	vector date paydate;
	array longint asvonr;
	row IVVc IVrw,IV2rw;
	row IPVc IPrw,IP2rw;
	string 100 enginer,tphone,akey;
	val totrem, totpayrem, totnopayrem, totcan, totourcan, totnopayremqty,totpayremqty,totcanceled,totpayremdet,totalcanceled;
	val totdolgqty,totdolgsum,povtorsum,povtorsumdolg,povtorsumotkaz,povtorsumneoplat,totdolgsumdet;
	array val tot;
	record WSVc WSr;
	record RLinkVc RLr;
	integer cnt,mtrw2;
	record CUVc CUr;
	record BinotelCallEndVc BCEr;
	vector string 100 vCuDomain,vCallType;
	vector string 255 vCallExpData;
	vector boolean vCallExpDataBool;
	array string 255 aCallExpData;
	integer cdatacnt;
	boolean TrHs2,testf2;
	vector val vTrackSum;
	vector boolean vTrackFlag,vPovtor,svoiskivi;
	array string 255 TrackSumKey;
	integer TrackCnt,povtorqty,povtorqtydolg,povtorqtyotkaz,povtorqtyneoplat;
	vector integer vIngCanQty,vManCanQty,vSVOQty;
	array string 50 arjct;
	integer irjct,userscnt,ui;
	vector boolean vIngExst,vManExst,vrjct,vsvodolg,vIVoldPer; 
	record UserVc User;
	vector val st0,ivretsummanag;
	array string 255 atags;
	vector string 50 asvosg,svocf7,svoserman,svoinsp; 
	vector val svowscost;
	Integer pos;
	string 255 tstr;
	
	while(loopmain(User,1,true))begin
		users[userscnt] = User.Code;
		userscnt = userscnt + 1;
	end;
	
	if(usercanaction("ServiceJobsGroupAcces",false)==false)then begin
		User.Code = currentuser;
		if(readfirstmain(User,1,true))then begin
			if(nonblank(User.SalesGroup))then begin
				RepSpec.f1 = User.SalesGroup;
			end;
		end;
	end;
		
	tot[0] = blankval;
	tabs[0] = 0;
	tabs[1] = 40;
	tabs[2] = 80;
	tabs[3] = 100;
	tabs[4] = 150;
	tabs[5] = 180;
	tabs[6] = 240;
	tabs[7] = 280;
	tabs[8] = 340;
	
		if (RepSpec.flags[26]==0) then begin
			StartReportJob("Выполеные ремонты");
			PrintHeader(RepSpec);
		end else begin
			StartReportNoHeaderJob("Продажи страховки");
		end;
	
		sd = RepSpec.sStartDate;
		ed = RepSpec.sEndDate;

		IPRsr.TransDate = sd;
		TrHs = true;
		while(loopkey("TransDate",IPRsr,1,TrHs))begin
			if(IPRsr.TransDate>ed)then begin TrHs = false; end;

			if(TrHs)then begin
				switch(IPRsr.TransType)begin
					case 0:	IVr.SerNr = IPRsr.TransNr;
									if(readfirstmain(IVr,1,true))then begin
										if(svoexist[IVr.SVONr]==false)then begin
											asvonr[k] = IVr.SVONr;
											k = k+1;
											svoexist[IVr.SVONr] = true;
											SVOr.SerNr = IVr.SVONr;
											if(readfirstmain(SVOr,1,true))then begin
												svocf7[IVr.SVONr] = SVOr.CustomField7;
												asvosg[IVr.SVONr] = SVOr.SalesGroup;
												svoserman[IVr.SVONr] = SVOr.ServiceManager;
												svoinsp[IVr.SVONr] = SVOr.Inspector;
												svowscost[IVr.SVONr] = SVOr.WSCost;
												if(RepSpec.flags[1]==0)then begin
													svoiskivi[IVr.SVONr] = KIVIFound(SVOr);
												end;
												IF(nonblankdate(SVOr.RegDate) and SVOr.RegDate<=ed and SVOr.RegDate>=sd)THEN BEGIN
													vsvodolg[IVr.SVONr] = TRUE;
												END;
											end;
										end;
										if(IVr.InvType!=kInvoiceTypeCredit)then begin
											if(IVr.InvDate==ed and svoiskivi[IVr.SVONr]==false)then begin
												vIngSum[IVr.SalesMan & ":TODAYSUM"]= vIngSum[IVr.SalesMan & ":TODAYSUM"] + IVr.Sum4;
												vIngSum[IVr.SalesMan & ":TODAYQTY"]= vIngSum[IVr.SalesMan & ":TODAYQTY"] + 1;
												vManSum[svoinsp[IVr.SVONr] & ":TODAYSUM"]= vManSum[svoinsp[IVr.SVONr] & ":TODAYSUM"] + IVr.Sum4;
												vManSum[svoinsp[IVr.SVONr] & ":TODAYQTY"]= vManSum[svoinsp[IVr.SVONr] & ":TODAYQTY"] + 1;
											end;
											if(paydate[IVr.SVONr]<IVr.InvDate)then begin
												paydate[IVr.SVONr] = IVr.InvDate;
											end;
											ivsum[IVr.SVONr] = ivsum[IVr.SVONr] + IVr.Sum4;
											vIVoldPer[IVr.SerNr] = true;
											mtrw = matrowcnt(IVr);
											For(i=0;i<mtrw;i=i+1) begin
												matrowget(IVr,i,IVrw);
												if(IVrw.stp==kInvoiceRowTypePrepayment)then begin
													ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IVrw.Sum;
												end;
											end; 
										end else begin
											if(IVr.InvDate==ed and svoiskivi[IVr.SVONr]==false)then begin
												vIngSum[IVr.SalesMan & ":TODAYSUM"] = vIngSum[IVr.SalesMan & ":TODAYSUM"] - IVr.Sum4;
												vIngSum[IVr.SalesMan & ":TODAYQTY"] = vIngSum[IVr.SalesMan & ":TODAYQTY"] - 1;
												vManSum[svoinsp[IVr.SVONr] & ":TODAYSUM"] = vManSum[svoinsp[IVr.SVONr] & ":TODAYSUM"] - IVr.Sum4;
												vManSum[svoinsp[IVr.SVONr] & ":TODAYQTY"] = vManSum[svoinsp[IVr.SVONr] & ":TODAYQTY"] - 1;
											end;
											ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IVr.Sum4;
											vIVoldPer[IVr.SerNr] = true;
										end;
									end;
					case 1:	IPr.SerNr = IPRsr.TransNr;
									if(readfirstmain(IPr,1,true))then begin
										mtrw = matrowcnt(IPr);
										For(i=0;i<mtrw;i=i+1) begin
	  									matrowget(IPr,i,IPrw);
	  									if(IPrw.CUPNr>0)then begin
	  										if(IPrw.RecVal<0)then begin
	  											if(svoexist[IPrw.CUPNr]==false)then begin
	  												SVOr.SerNr = IPrw.CUPNr;
														if(readfirstmain(SVOr,1,true))then begin
															asvonr[k] = IPrw.CUPNr;
															k = k+1;
															svoexist[IPrw.CUPNr] = true;
															svocf7[IPrw.CUPNr] = SVOr.CustomField7;
															asvosg[IPrw.CUPNr] = SVOr.SalesGroup;
															svoserman[IPrw.CUPNr] = SVOr.ServiceManager;
															svoinsp[IPrw.CUPNr] = SVOr.Inspector;
															svowscost[IPrw.CUPNr] = SVOr.WSCost;
															if(RepSpec.flags[1]==0)then begin
																svoiskivi[IPrw.CUPNr] = KIVIFound(SVOr);
															end;
															IF(nonblankdate(SVOr.RegDate) and SVOr.RegDate<=ed and SVOr.RegDate>=sd)THEN BEGIN
																vsvodolg[IPrw.CUPNr] = TRUE;
															END;
														end;
													end;
													
													//SVOr.SerNr = IPrw.CUPNr;
													if(svoexist[IPrw.CUPNr])then begin
														filter = true;
														if(IVr.SalesMan==svocf7[IPrw.CUPNr])then begin
															enginer = svoserman[IPrw.CUPNr];
														end;
					
														if(nonblank(RepSpec.f1) and RepSpec.f1!=asvosg[IPrw.CUPNr])then begin filter = false; end;
														if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
														if(nonblank(RepSpec.f4) and RepSpec.f4!=svocf7[IPrw.CUPNr])then begin filter = false; end;
														
														if(filter)then begin
															ivretsum[IPrw.CUPNr] = ivretsum[IPrw.CUPNr] - IPrw.RecVal;
															if(nonblank(svoserman[IPrw.CUPNr]))then begin
																ivretsummanag[IPrw.CUPNr & ":" & svoserman[IPrw.CUPNr]] = ivretsum[IPrw.CUPNr & ":" & svoserman[IPrw.CUPNr]] - IPrw.RecVal;
																vIngSum[svoserman[IPrw.CUPNr] & ":VOZVR:SERV"] = vIngSum[svoserman[IPrw.CUPNr] & ":VOZVR:SERV"] - IPrw.RecVal;
																if(vIngExst[svoserman[IPrw.CUPNr]]==false)then begin
																	vIngExst[svoserman[IPrw.CUPNr]] = true;
																	aing[ingcnt] = SVOr.ServiceManager;
																	ingcnt = ingcnt + 1;														
																end;
															end else begin
																ivretsummanag[IPrw.CUPNr & ":PREPAY"] = ivretsum[IPrw.CUPNr & ":PREPAY"] - IPrw.RecVal;
																vIngSum["PREPAY:VOZVR:SERV"] = vIngSum["PREPAY:VOZVR:SERV"] - IPrw.RecVal;
															end;
															if(vManExst["PREPAY"]==false)then begin
																vManExst["PREPAY"] = true;
																aman[mancnt] = "PREPAY";
																mancnt = mancnt + 1;														
															end;
															if(vIngExst["PREPAY"]==false)then begin
																vIngExst["PREPAY"] = true;
																aing[ingcnt] = "PREPAY";
																ingcnt = ingcnt + 1;														
															end;
															
															if(blank(svoinsp[IPrw.CUPNr]))then begin
																svoinsp[IPrw.CUPNr] = "PREPAY";
															end;
															vManSum[svoinsp[IPrw.CUPNr] & ":VOZVR:SERV"] = vManSum[svoinsp[IPrw.CUPNr] & ":VOZVR:SERV"] - IPrw.RecVal;
															if(vManExst[svoinsp[IPrw.CUPNr]]==false)then begin
																vManExst[svoinsp[IPrw.CUPNr]] = true;
																aman[mancnt] = svoinsp[IPrw.CUPNr];
																mancnt = mancnt + 1;														
															end;
														end;
													end;
													
												end;
	  									end;
	  									if(IPrw.InvoiceNr>0 and IPrw.InvoiceNr==IPRsr.IVNr)then begin
	  										IVr.SerNr = IPrw.InvoiceNr;
	  										if(readfirstmain(IVr,1,true))then begin
	  											if(svoexist[IVr.SVONr]==false)then begin
														asvonr[k] = IVr.SVONr;
														k = k+1;
														svoexist[IVr.SVONr] = true;
														SVOr.SerNr = IVr.SVONr;
														if(readfirstmain(SVOr,1,true))then begin
															svocf7[IVr.SVONr] = SVOr.CustomField7;
															asvosg[IVr.SVONr] = SVOr.SalesGroup;
															svoserman[IVr.SVONr] = SVOr.ServiceManager;
															svoinsp[IVr.SVONr] = SVOr.Inspector;
															svowscost[IVr.SVONr] = SVOr.WSCost;
															if(RepSpec.flags[1]==0)then begin
																svoiskivi[IVr.SVONr] = KIVIFound(SVOr);
															end;
															IF(nonblankdate(SVOr.RegDate) and SVOr.RegDate<=ed and SVOr.RegDate>=sd)THEN BEGIN
																vsvodolg[IVr.SVONr] = TRUE;
															END;
														end;
													end;
													
													vIVoldPer[IVr.SerNr] = true;
													if(IVr.InvDate<sd)then begin
														if(ivexist[IVr.SerNr]==false)then begin
															ivexist[IVr.SerNr] = true;
															IPRs2r.IVNr = IVr.SerNr;
															TrHs2 = true;
															while(loopkey("IVKey",IPRs2r,1,TrHs2)) begin
																testf2 = true;
																if(IPRs2r.IVNr!=IVr.SerNr)then begin TrHs2 = false; testf2 = false; end;
																if(IPRs2r.TransDate>=sd)then begin testf2 = false; end;
																if(testf2)then begin
																	switch(IPRs2r.TransType)begin
																		case 0:	IV2r.SerNr = IPRs2r.TransNr;
																						if(readfirstmain(IV2r,1,true))then begin
																							if(IV2r.InvType!=kInvoiceTypeCredit)then begin
																								if(paydate[IV2r.SVONr]<IV2r.InvDate)then begin
																									paydate[IV2r.SVONr] = IV2r.InvDate;
																								end;
																								ivsum[IV2r.SVONr] = ivsum[IV2r.SVONr] + IV2r.Sum4;
																								mtrw2 = matrowcnt(IV2r);
																								For(j=0;j<mtrw2;j=j+1) begin
																									matrowget(IV2r,j,IV2rw);
																									if(IV2rw.stp==kInvoiceRowTypePrepayment)then begin
																										ivsum[IV2r.SVONr] = ivsum[IV2r.SVONr] - IV2rw.Sum;
																									end;
																								end; 
																							end else begin
																								ivsum[IV2r.SVONr] = ivsum[IV2r.SVONr] - IV2r.Sum4;
																							end;
																						end;
																		case 1:	IP2r.SerNr = IPRs2r.TransNr;
																						if(readfirstmain(IP2r,1,true))then begin
																							mtrw = matrowcnt(IP2r);
																							For(j=0;j<mtrw2;j=j+1) begin
																								matrowget(IP2r,j,IP2rw);
																								if(IP2rw.InvoiceNr>0 and IP2rw.InvoiceNr==IPRs2r.IVNr)then begin
																									IVr.SerNr = IPrw.InvoiceNr;
																									if(readfirstmain(IVr,1,true))then begin
																										ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IPrw.InvVal;
																										if(paydate[IVr.SVONr]<IPr.TransDate)then begin
																											paydate[IVr.SVONr] = IPr.TransDate;
																										end;
																									end;
																								end;
																							end;
																						end;
																	end;
																end;
															end; 
															resetloop(IPRs2r);

														end;
													end;
	  											ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IPrw.InvVal;
	  											if(IPrw.InvVal<0)then begin
	  												
														SVOr.SerNr = IVr.SVONr;
														if(readfirstmain(SVOr,1,true))then begin
															filter = true;
															enginer = "";
															cnt=1;
															while(ReadRecordLink(IVr,cnt,WSr,RLr)) begin
																if(nonblank(WSr.EMCode))then begin
																	If(WSr.EMCode!=IVr.SalesMan) then begin
																		IVr.SalesMan = WSr.EMCode;
																	end; 
																end;
																cnt = cnt+1;
															end;
															if(IVr.SalesMan==SVOr.CustomField7)then begin
																enginer = SVOr.ServiceManager;
															end else begin
																enginer = IVr.SalesMan;
															end;
						
															if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin filter = false; end;
															if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
															if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin filter = false; end;
															
															if(filter)then begin
																ivretsum[IVr.SVONr] = ivretsum[IVr.SVONr] - IPrw.InvVal;
																ivretsummanag[IVr.SVONr & ":" & enginer] = ivretsum[IVr.SVONr & ":" & enginer] - IPrw.RecVal;
																if(IPrw.RecVal==-IVr.Sum4)then begin
																	mtrw2 = matrowcnt(IVr);
																	For(j=0;j<mtrw2;j=j+1) begin
	  																matrowget(IVr,j,IVrw);
	  																if(IVrw.stp==kInvoiceRowTypeNormal)then begin
	  																	if(nonblank(IVrw.ArtCode))then begin
	  			
																				if(blank(SVOr.Inspector))then begin
																					SVOr.Inspector = "PREPAY";
																				end;
																				if(blank(enginer))then begin
																					enginer = "PREPAY";
																				end;
																				if(vManExst[SVOr.Inspector]==false)then begin
																					vManExst[SVOr.Inspector] = true;
																					aman[mancnt] = SVOr.Inspector;
																					mancnt = mancnt + 1;														
																				end;
																				if(vIngExst[enginer]==false)then begin
																					vIngExst[enginer] = true;
																					aing[ingcnt] = enginer;
																					ingcnt = ingcnt + 1;														
																				end;
																				INr.Code = IVrw.ArtCode;
																				if(readfirstmain(INr,1,true))then begin																				
																					if(INr.ItemType==3 or INr.ItemType==0)then begin
																						vIngSum[enginer & ":VOZVR:SERV"] = vIngSum[enginer & ":VOZVR:SERV"] + IVrw.Sum;
																						vManSum[SVOr.Inspector & ":VOZVR:SERV"] = vManSum[SVOr.Inspector & ":VOZVR:SERV"] + IVrw.Sum;
																					end else begin
																						vIngSum[enginer & ":VOZVR:DET"] = vIngSum[enginer & ":VOZVR:DET"] + IVrw.Sum;
																						vManSum[SVOr.Inspector & ":VOZVR:DET"] = vManSum[SVOr.Inspector & ":VOZVR:DET"] + IVrw.Sum;
																					end;
																				end;
																			end;
	  																end;
																	end; 
																	
																end else begin
																	if(vManExst["PREPAY"]==false)then begin
																		vManExst["PREPAY"] = true;
																		aman[mancnt] = "PREPAY";
																		mancnt = mancnt + 1;														
																	end;
																	if(vIngExst["PREPAY"]==false)then begin
																		vIngExst["PREPAY"] = true;
																		aing[ingcnt] = "PREPAY";
																		ingcnt = ingcnt + 1;														
																	end;
																	if(blank(SVOr.Inspector))then begin
																		SVOr.Inspector = "PREPAY";
																	end;
																	vIngSum[enginer & ":VOZVR:SERV"] = vIngSum[enginer & ":VOZVR:SERV"] - IPrw.RecVal;
																	vManSum[SVOr.Inspector & ":VOZVR:SERV"] = vManSum[SVOr.Inspector & ":VOZVR:SERV"] - IPrw.RecVal;
																	if(vIngExst[enginer]==false)then begin
																		vIngExst[enginer] = true;
																		aing[ingcnt] = enginer;
																		ingcnt = ingcnt + 1;														
																	end;																	
																	if(vManExst[SVOr.Inspector]==false)then begin
																		vManExst[SVOr.Inspector] = true;
																		aman[mancnt] = SVOr.Inspector;
																		mancnt = mancnt + 1;														
																	end;
																end;
															end;
														end;
	  											end;
	  											if(paydate[IVr.SVONr]<IPr.TransDate)then begin
														paydate[IVr.SVONr] = IPr.TransDate;
													end;
	  										end;
	  									end;
										end; 
									end;
				end;
			end;
		end;
		
		MySortLngIntArray(asvonr,k);
		
		if (RepSpec.flags[26]==0) then begin
			startformat(15);
				outstring(tabs[0],0,"Заказ",false);
				outstring(tabs[1],0,"Дата",false);
				outstring(tabs[2],0,"Кол-во",false);
				outstring(tabs[3],0,"Выдано за деньги",false);
				outstring(tabs[4],0,"Отказ",false);
				outstring(tabs[5],0,"Отказ по нашей вине",false);
				outstring(tabs[6],0,"Сумма по вып. рем.",false);
				outstring(tabs[7],0,"Мастер",false);
				outstring(tabs[8],0,"Статус",false);
				//outstring(tabs[7],0,SVOr.StatusText,false);
			endformat;
		end;
		For(i=0;i<k;i=i+1) begin
			SVOr.SerNr = asvonr[i];
			if(svowscost[asvonr[i]]!=0 and ivsum[asvonr[i]]<=0)then begin
				readfirstmain(SVOr,1,true);
				filter = true;
			
				if(RepSpec.flags[1]==0)then begin
					if(svoiskivi[asvonr[i]])then begin
						filter = false;
					end;
				end;
			end else begin
				filter = false;
			end;
			if(filter)then begin
				if(SVOr.WSCost!=0 and ivsum[asvonr[i]]<=0)then begin
					svoout = false;
					IVr.SVONr = SVOr.SerNr;
					TrHs = true;
					while(loopkey("SVONr",IVr,1,TrHs))begin	
						testf = true;
						if(IVr.SVONr!=SVOr.SerNr)then begin TrHs = false; testf = false; end;
						if(IVr.OKFlag==0)then begin testf = false; end;
						if(IVr.InvDate>ed)then begin testf = false; end;
						///if(IVr.InvDate<sd)then begin testf = false; end;
						if(vIVoldPer[IVr.SerNr]==false)begin testf = false; end;
					
						filter = true;
						if(testf)then begin
							enginer = "";
							cnt=1;
							while(ReadRecordLink(IVr,cnt,WSr,RLr)) begin
								if(nonblank(WSr.EMCode))then begin
									If(WSr.EMCode!=IVr.SalesMan) then begin
										IVr.SalesMan = WSr.EMCode;
									end; 
								end;
								cnt = cnt+1;
							end;
						
							if(IVr.SalesMan==SVOr.CustomField7)then begin
								enginer = SVOr.ServiceManager;
							end else begin
								enginer = IVr.SalesMan;
							end;
						
							if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin filter = false; end;
							if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
							if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin filter = false; end;
							testf = filter;
						
							if(testf)then begin
								if(vCuExist[SVOr.CustCode]==false)then begin
									vCuExist[SVOr.CustCode] = true;
									CUr.Code = SVOr.CustCode;
								
									if(readfirstmain(CUr,1,true))then begin
										tphone = CUr.Phone;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
										tphone = CUr.Mobile;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
										tphone = CUr.AltPhone;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
									end;
								end;
							end;
						
						end;
					
						if(testf)then begin
							mtrw = matrowcnt(IVr);
							For(j=0;j<mtrw;j=j+1) begin
								matrowget(IVr,j,IVrw);
								if(IVrw.stp==kInvoiceRowTypeNormal)then begin
									if(nonblank(IVrw.ArtCode))then begin
										INr.Code = IVrw.ArtCode;
										if(readfirstmain(INr,1,true))then begin
											svoout = true;
											if (RepSpec.flags[26]==0) then begin
													startformat(15);
														outstring(tabs[2],0,IVrw.Spec,false);
											end;
												if(IVr.InvType!=kInvoiceTypeCredit)then begin
													if (RepSpec.flags[26]==0) then begin
														outstring(tabs[6],0,IVrw.Sum,false);
													end;
												end else begin
													if (RepSpec.flags[26]==0) then begin
														outstring(tabs[6],0,-IVrw.Sum,false);
													end;
												end;
												if(IVr.SalesMan==SVOr.CustomField7)then begin
													if (RepSpec.flags[26]==0) then begin
														outstring(tabs[7],0,SVOr.ServiceManager,false);
													end;
													enginer = SVOr.ServiceManager;
												end else begin
													if (RepSpec.flags[26]==0) then begin
														outstring(tabs[7],0,IVr.SalesMan,false);
													end;
													enginer = IVr.SalesMan;
												end;
										if (RepSpec.flags[26]==0) then begin
											endformat;
										end;
											if(INr.ItemType==3 or INr.ItemType==0)then begin  									
												if(filter)then begin
												
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														if(INr.Code!="СТРАХОВКА")then begin
															ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] + IVrw.Sum;
															totserv = totserv + ivsumserv[asvonr[i]];
															supertotdolg = supertotdolg + IVrw.Sum;
															akey = enginer & ":GOTOV:SERV";
															vIngSum[akey] = vIngSum[akey] + IVrw.Sum;
															if(vIngExst[enginer]==false)then begin
																vIngExst[enginer] = true;
																aing[ingcnt] = enginer;
																ingcnt = ingcnt + 1;														
															end;
															akey = SVOr.Inspector & ":GOTOV:SERV";
															vManSum[akey] = vManSum[akey] + IVrw.Sum;
															if(vManExst[SVOr.Inspector]==false)then begin
																vManExst[SVOr.Inspector] = true;
																aman[mancnt] = SVOr.Inspector;
																mancnt = mancnt + 1;														
															end;
														end else begin
															ivsumservstrah[asvonr[i]] = ivsumservstrah[asvonr[i]] + IVrw.Sum;
															akey = IVr.SalesMan & ":GOTOV:STRAH";
															vManSum[akey] = vManSum[akey] + IVrw.Sum;
															akey = IVr.SalesMan & ":GOTOV:STRAH:QTY";
															vManSum[akey] = vManSum[akey] + IVrw.Quant;
															if(vManExst[IVr.SalesMan]==false)then begin
																vManExst[IVr.SalesMan] = true;
																aman[mancnt] = IVr.SalesMan;
																mancnt = mancnt + 1;														
															end;
														end;
													end else begin
														if(INr.Code!="СТРАХОВКА")then begin
															ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] - IVrw.Sum;
															totserv = totserv - ivsumserv[asvonr[i]];
															supertotdolg = supertotdolg - IVrw.Sum;
															akey = enginer & ":GOTOV:SERV";
															vIngSum[akey] = vIngSum[akey] - IVrw.Sum;
															if(vIngExst[enginer]==false)then begin
																vIngExst[enginer] = true;
																aing[ingcnt] = enginer;
																ingcnt = ingcnt + 1;														
															end;
															akey = SVOr.Inspector & ":GOTOV:SERV";
															vManSum[akey] = vManSum[akey] - IVrw.Sum;
															if(vManExst[SVOr.Inspector]==false)then begin
																vManExst[SVOr.Inspector] = true;
																aman[mancnt] = SVOr.Inspector;
																mancnt = mancnt + 1;														
															end;
														end else begin
															ivsumservstrah[asvonr[i]] = ivsumservstrah[asvonr[i]] - IVrw.Sum;
															akey = IVr.SalesMan & ":GOTOV:STRAH";
															vManSum[akey] = vManSum[akey] - IVrw.Sum;
															akey = IVr.SalesMan & ":GOTOV:STRAH:QTY";
															vManSum[akey] = vManSum[akey] - IVrw.Quant;
															if(vManExst[IVr.SalesMan]==false)then begin
																vManExst[IVr.SalesMan] = true;
																aman[mancnt] = IVr.SalesMan;
																mancnt = mancnt + 1;														
															end;
														end;
													end;
												end;
											end;
											if(INr.ItemType==1)then begin  									
												if(filter)then begin
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														ivsumservdet[asvonr[i]] = ivsumservdet[asvonr[i]] + IVrw.Sum;
														totservdet = totservdet + ivsumservdet[asvonr[i]];
														supertotdolgdet = supertotdolgdet + IVrw.Sum;
														akey = enginer & ":GOTOV:DET";
														vIngSum[akey] = vIngSum[akey] + IVrw.Sum;
														if(vIngExst[enginer]==false)then begin
															vIngExst[enginer] = true;
															aing[ingcnt] = enginer;
															ingcnt = ingcnt + 1;														
														end;
														akey = SVOr.Inspector & ":GOTOV:DET";
														vManSum[akey] = vManSum[akey] + IVrw.Sum;
														if(vManExst[SVOr.Inspector]==false)then begin
															vManExst[SVOr.Inspector] = true;
															aman[mancnt] = SVOr.Inspector;
															mancnt = mancnt + 1;														
														end;
													end else begin
														ivsumservdet[asvonr[i]] = ivsumservdet[asvonr[i]] - IVrw.Sum;
														totservdet = totservdet - ivsumservdet[asvonr[i]];
														supertotdolgdet = supertotdolgdet - IVrw.Sum;
														akey = enginer & ":GOTOV:DET";
														vIngSum[akey] = vIngSum[akey] - IVrw.Sum;
														if(vIngExst[enginer]==false)then begin
															vIngExst[enginer] = true;
															aing[ingcnt] = enginer;
															ingcnt = ingcnt + 1;														
														end;
														akey = SVOr.Inspector & ":GOTOV:DET";
														vManSum[akey] = vManSum[akey] - IVrw.Sum;
														if(vManExst[SVOr.Inspector]==false)then begin
															vManExst[SVOr.Inspector] = true;
															aman[mancnt] = SVOr.Inspector;
															mancnt = mancnt + 1;														
														end;
													end;
												end;
											end;
										end;
									end;
								end;
							end; 
						end;
					end;
				
					if(svoout)then begin
						totpayremqty = totpayremqty + 1;
						totrem = totrem + 1;
					
						st0[SVOr.SerNr & ":0"] = CountWorkingDays(SVOr.Status0Sd,SVOr.Status0Ed,"","UA");
						st0[SVOr.SerNr & ":1"] = CountWorkingDays(SVOr.Status1Sd,SVOr.Status1Ed,"","UA");
						st0[SVOr.SerNr & ":3"] = CountWorkingDays(SVOr.Status3Sd,SVOr.Status3Ed,"","UA");
						st0[SVOr.SerNr & ":4"] = CountWorkingDays(SVOr.Status4Sd,SVOr.Status4Ed,"","UA");
						st0[SVOr.SerNr & ":5"] = CountWorkingDays(SVOr.Status5Sd,SVOr.Status5Ed,"","UA");
						st0[SVOr.SerNr & ":7"] = CountWorkingDays(SVOr.Status7Sd,SVOr.Status7Ed,"","UA");
						st0[SVOr.SerNr & ":8"] = CountWorkingDays(SVOr.Status8Sd,SVOr.Status8Ed,"","UA");
						st0[SVOr.SerNr & ":10"] = CountWorkingDays(SVOr.Status10Sd,SVOr.Status10Ed,"","UA");
						st0[SVOr.SerNr & ":11"] = CountWorkingDays(SVOr.Status11Sd,SVOr.Status11Ed,"","UA");
					
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
								outstring(tabs[1],0,SVOr.TransDate,false);
								outstring(tabs[2],0,1,false);
								outstring(tabs[3],0,1,false);
								outstring(tabs[4],0,blankval,false);
								outstring(tabs[5],0,blankval,false);
								outstring(tabs[8],0,SVOr.StatusText,false);
								//outstring(tabs[6],0,SVOr.WSCost,false);
							endformat;
						end else begin
							if(ivsumservstrah[asvonr[i]]!=0)then begin
								startformat(15);
									outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
									outstring(tabs[3],0,SVOr.TransDate,false);
									outstring(tabs[5],0,ivsumservstrah[asvonr[i]],false);
									outstring(tabs[7],0,"Оплачено",false);
								endformat;
							end;
						end;
					
					
						if(SVOr.StatusReturnCnt>0)then begin
							vManCanQty[SVOr.Inspector & "DOR"] = vManCanQty[SVOr.Inspector & "DOR"] + SVOr.StatusReturnCnt;
							vIngCanQty[SVOr.ServiceManager & "DOR"] = vIngCanQty[SVOr.ServiceManager & "DOR"] + SVOr.StatusReturnCnt;
							if(RepSpec.flags[26]==0) then begin
								startformat(15);
									outstring(tabs[0],0,"Возвратов на доработку",false);
									outstring(tabs[2],0,SVOr.StatusReturnCnt,false);
								endformat;
							end;
						end;
					
						if (RepSpec.flags[26]==0) then begin
							OutDaysInStatus(st0,SVOr.SerNr,SVOr.Inspector,SVOr.ServiceManager,vManCanQty,vIngCanQty);
							if(nonblank(vCuDomain[SVOr.CustCode]))then begin
								if(nonblank(vCuDomain[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Звонок с домена",false);
										outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
									endformat;
								end;
								/*if(nonblank(vUTMSource[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Переход с ресурса",false);
										outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
									endformat;
								end;
								if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Кампания",false);
										outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
									endformat;
								end;
								if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Условия",false);
										outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
									endformat;
								end;*/
						
								if(nonblank(SVOr.GarNo))then begin
									oldSVOr.InnerOrderNr = SVOr.GarNo;
									if(readfirstkey("InnerOrderNr",oldSVOr,1,true))then begin
										povtorsum = povtorsum + ivsumserv[asvonr[i]];
										povtorqty = povtorqty + 1;						
										startformat(15);
											outstring(tabs[0],0,"Повторный ремонт",false);
											outstring(tabs[6],"DblSVOVcSer",SVOr.GarNo,false);
										endformat;
										vPovtor[SVOr.SerNr] = true;
									end;
								end;
					
								black_divider(tabs[6],tabs[7]);
								startformat(15);
									outstring(tabs[0],0,"Итого по заказу",false);
									outstring(tabs[6],0,ivsumserv[asvonr[i]],false);
								endformat;
							end;
						end;
						if(nonblank(vCuDomain[SVOr.CustCode]))then begin
							tstr = vCallType[SVOr.CustCode] & ":" & vCuDomain[SVOr.CustCode]; 
							if(!vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]])then begin
								vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]] = true;
								aCallExpData[cdatacnt] = tstr & vCallExpData[SVOr.CustCode];
								cdatacnt = cdatacnt + 1;
							end;
							if(vTrackFlag[tstr])then begin
								vTrackSum[tstr & ":PD"] = vTrackSum[tstr & ":PD"] + ivsumserv[asvonr[i]];
								vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":PD"] = vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":PD"] + ivsumserv[asvonr[i]];
							end else begin
								vTrackFlag[tstr] = true;
								TrackSumKey[TrackCnt] = tstr;
								vTrackSum[tstr & ":PD"] = ivsumserv[asvonr[i]];
								vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":PD"] = ivsumserv[asvonr[i]];
								TrackCnt = TrackCnt +1;
							end;
						end;
						if (RepSpec.flags[26]==0) then begin
							gray_divider(0,1);
						end;
					end;			
					resetloop(IVr);
				end;
			end;
			if(ivretsum[asvonr[i]]>0)then begin
				if (RepSpec.flags[26]==0) then begin
					startformat(15);
						outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
						outstring(tabs[0],0,"Возврат денег",false);
						outstring(tabs[6],0,ivretsum[asvonr[i]],false);
					endformat;
					if(ivretsummanag[asvonr[i] & ":PREPAY"]>0)then begin
						startformat(15);
							outstring(tabs[0],0,"",false);
							outstring(tabs[0],0,"",false);
							outstring(tabs[6],0,ivretsum[asvonr[i]],false);
							outstring(tabs[7],0,"С предоплаты",false);
						endformat;
					end;
					For(ui=0;ui<userscnt;ui=ui+1) begin
						if(ivretsummanag[asvonr[i] & ":" & users[ui]]>0)then begin
							startformat(15);
								outstring(tabs[0],0,"",false);
								outstring(tabs[0],0,"",false);
								outstring(tabs[6],0,ivretsum[asvonr[i]],false);
								outstring(tabs[7],0,users[ui],false);
							endformat;
						end;
					end; 
				end;
				if (RepSpec.flags[26]==0) then begin
					gray_divider(0,1);
				end;
			end;
		end;
		if (RepSpec.flags[26]==0) then begin
			black_divider(0,1);
			startformat(15);
				outstring(0,0,"Итого по оплаченным ремонтам",false);
				outstring(50,0,"Количество:",false);
				outstring(100,0,totpayremqty,false);
				outstring(150,0,"Услуги:",false);
				outstring(200,0,supertotdolg,false);
				outstring(250,0,"Детали:",false);
				outstring(300,0,supertotdolgdet,false);
				outstring(350,0,"Всего:",false);
				outstring(400,0,supertotdolg+supertotdolgdet,false);
			endformat;
		end;
		totpayrem = supertotdolg;
		totpayremdet = supertotdolgdet;
		
		supertotdolg = blankval;
		supertotdolgdet = blankval;
		if (RepSpec.flags[26]==0) then begin
			black_divider(0,1);
			startformat(15);
				outstring(0,0,"Неоплаченные заказы ",false);
			endformat;
		end;
		For(i=0;i<k;i=i+1) begin
			SVOr.SerNr = asvonr[i];
			if(svowscost[asvonr[i]]!=0 and ivsum[asvonr[i]]>0 and vsvodolg[asvonr[i]]==false)then begin
				readfirstmain(SVOr,1,true);
			
				filter = true;
			
				if(RepSpec.flags[1]==0)then begin
					if(svoiskivi[asvonr[i]])then begin
						filter = false;
					end;
				end;
			end else begin
				filter = false;
			end;
			if(filter)then begin
				if(SVOr.WSCost!=0 and ivsum[asvonr[i]]>0 and vsvodolg[asvonr[i]]==false)then begin				
					svoout = false;
					IVr.SVONr = SVOr.SerNr;
					TrHs = true;
					while(loopkey("SVONr",IVr,1,TrHs))begin	
						testf = true;
						if(IVr.SVONr!=SVOr.SerNr)then begin TrHs = false; testf = false; end;
						if(IVr.OKFlag==0)then begin testf = false; end;
						if(nonblankdate(SVOr.RegDate) and SVOr.RegDate<=ed and SVOr.RegDate>=sd)then begin testf = false; end;					
					
						enginer = "";
						cnt=1;
						while(ReadRecordLink(IVr,cnt,WSr,RLr)) begin
							if(nonblank(WSr.EMCode))then begin
								If(WSr.EMCode!=IVr.SalesMan) then begin
									IVr.SalesMan = WSr.EMCode;
								end; 
							end;
							cnt = cnt+1;
						end;
						
					
						if(testf)then begin
							filter = true;
							enginer = "";
							if(IVr.SalesMan==SVOr.CustomField7)then begin
								enginer = SVOr.ServiceManager;
							end else begin
								enginer = IVr.SalesMan;
							end;
						
							if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin filter = false; end;
							if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
							if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin filter = false; end;
						
							testf = filter;
							if(testf)then begin
								if(vCuExist[SVOr.CustCode]==false)then begin
									vCuExist[SVOr.CustCode] = true;
									CUr.Code = SVOr.CustCode;
								
									if(readfirstmain(CUr,1,true))then begin
										tphone = CUr.Phone;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
										tphone = CUr.Mobile;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
										tphone = CUr.AltPhone;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
									end;
								end;
							end;
						end;
					
						if(testf)then begin
							mtrw = matrowcnt(IVr);
							For(j=0;j<mtrw;j=j+1) begin
								matrowget(IVr,j,IVrw);
								if(IVrw.stp==kInvoiceRowTypeNormal)then begin
									if(nonblank(IVrw.ArtCode))then begin
										INr.Code = IVrw.ArtCode;
										if(readfirstmain(INr,1,true))then begin
										
											svoout = true;
											if (RepSpec.flags[26]==0) then begin
												startformat(15);
													outstring(tabs[2],0,IVrw.Spec,false);
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														outstring(tabs[6],0,IVrw.Sum,false);
													end else begin
														outstring(tabs[6],0,-IVrw.Sum,false);
													end;
													if(IVr.SalesMan==SVOr.CustomField7)then begin
														outstring(tabs[7],0,SVOr.ServiceManager,false);
													end else begin
														outstring(tabs[7],0,IVr.SalesMan,false);
													end;
													outstring(tabs[8],0,SVOr.StatusText,false);
												endformat;
											end;
											if(INr.ItemType==3 or INr.ItemType==0)then begin
												if(filter)then begin
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														if(INr.Code!="СТРАХОВКА")then begin
															ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] + IVrw.Sum;
															totserv = totserv + ivsumserv[asvonr[i]];
															supertotdolg = supertotdolg + IVrw.Sum;
															akey = enginer & ":NOPAY:SERV";
															vIngSum[akey] = vIngSum[akey] + IVrw.Sum;
															if(vIngExst[enginer]==false)then begin
																vIngExst[enginer] = true;
																aing[ingcnt] = enginer;
																ingcnt = ingcnt + 1;														
															end;
															akey = SVOr.Inspector & ":NOPAY:SERV";
															vManSum[akey] = vManSum[akey] + IVrw.Sum;
															if(vManExst[SVOr.Inspector]==false)then begin
																vManExst[SVOr.Inspector] = true;
																aman[mancnt] = SVOr.Inspector;
																mancnt = mancnt + 1;														
															end;
														end else begin
															ivsumservstrah[asvonr[i]] = ivsumservstrah[asvonr[i]] + IVrw.Sum;
															akey = IVr.SalesMan & ":NOPAY:STRAH";
															vManSum[akey] = vManSum[akey] + IVrw.Sum;
															akey = IVr.SalesMan & ":NOPAY:STRAH:QTY";
															vManSum[akey] = vManSum[akey] + IVrw.Quant;
															if(vManExst[IVr.SalesMan]==false)then begin
																vManExst[IVr.SalesMan] = true;
																aman[mancnt] = IVr.SalesMan;
																mancnt = mancnt + 1;														
															end;
														end;
													end else begin
														if(INr.Code!="СТРАХОВКА")then begin
															ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] - IVrw.Sum;
															totserv = totserv - ivsumserv[asvonr[i]];
															supertotdolg = supertotdolg - IVrw.Sum;
															akey = enginer & ":NOPAY:SERV";
															vIngSum[akey] = vIngSum[akey] - IVrw.Sum;
															if(vIngExst[enginer]==false)then begin
																vIngExst[enginer] = true;
																aing[ingcnt] = enginer;
																ingcnt = ingcnt + 1;														
															end;
															akey = SVOr.Inspector & ":NOPAY:SERV";
															vManSum[akey] = vManSum[akey] - IVrw.Sum;
															if(vManExst[SVOr.Inspector]==false)then begin
																vManExst[SVOr.Inspector] = true;
																aman[mancnt] = SVOr.Inspector;
																mancnt = mancnt + 1;														
															end;
														end else begin
															ivsumservstrah[asvonr[i]] = ivsumservstrah[asvonr[i]] - IVrw.Sum;
															akey = IVr.SalesMan & ":NOPAY:STRAH";
															vManSum[akey] = vManSum[akey] - IVrw.Sum;
															akey = IVr.SalesMan & ":NOPAY:STRAH:QTY";
															vManSum[akey] = vManSum[akey] - IVrw.Quant;
															if(vManExst[IVr.SalesMan]==false)then begin
																vManExst[IVr.SalesMan] = true;
																aman[mancnt] = IVr.SalesMan;
																mancnt = mancnt + 1;	
															end;
														end;
													end;
												end;
											end;
											if(INr.ItemType==1)then begin
												if(filter)then begin
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														ivsumservdet[asvonr[i]] = ivsumservdet[asvonr[i]] + IVrw.Sum;
														totservdet = totservdet + ivsumservdet[asvonr[i]];
														supertotdolgdet = supertotdolgdet + IVrw.Sum;
														akey = enginer & ":NOPAY:DET";
														vIngSum[akey] = vIngSum[akey] + IVrw.Sum;
														if(vIngExst[enginer]==false)then begin
															vIngExst[enginer] = true;
															aing[ingcnt] = enginer;
															ingcnt = ingcnt + 1;														
														end;
														akey = SVOr.Inspector & ":NOPAY:DET";
														vManSum[akey] = vManSum[akey] + IVrw.Sum;
														if(vManExst[SVOr.Inspector]==false)then begin
															vManExst[SVOr.Inspector] = true;
															aman[mancnt] = SVOr.Inspector;
															mancnt = mancnt + 1;														
														end;
													end else begin
														ivsumservdet[asvonr[i]] = ivsumservdet[asvonr[i]] - IVrw.Sum;
														totservdet = totservdet - ivsumservdet[asvonr[i]];
														supertotdolgdet = supertotdolgdet - IVrw.Sum;
														akey = enginer & ":NOPAY:DET";
														vIngSum[akey] = vIngSum[akey] - IVrw.Sum;
														if(vIngExst[enginer]==false)then begin
															vIngExst[enginer] = true;
															aing[ingcnt] = enginer;
															ingcnt = ingcnt + 1;														
														end;
														akey = SVOr.Inspector & ":NOPAY:DET";
														vManSum[akey] = vManSum[akey] - IVrw.Sum;
														if(vManExst[SVOr.Inspector]==false)then begin
															vManExst[SVOr.Inspector] = true;
															aman[mancnt] = SVOr.Inspector;
															mancnt = mancnt + 1;														
														end;
													end;
												end;
											end;
										end;
									end;
								end;
							end; 
						end;
					end;
				
					if(svoout)then begin
						totnopayremqty = totnopayremqty + 1;
						totrem = totrem + 1;
					
						st0[SVOr.SerNr] = CountWorkingDays(SVOr.Status0Sd,SVOr.Status0Ed,"","UA");
						st0[SVOr.SerNr & ":1"] = CountWorkingDays(SVOr.Status1Sd,SVOr.Status1Ed,"","UA");
						st0[SVOr.SerNr & ":3"] = CountWorkingDays(SVOr.Status3Sd,SVOr.Status3Ed,"","UA");
						st0[SVOr.SerNr & ":4"] = CountWorkingDays(SVOr.Status4Sd,SVOr.Status4Ed,"","UA");
						st0[SVOr.SerNr & ":5"] = CountWorkingDays(SVOr.Status5Sd,SVOr.Status5Ed,"","UA");
						st0[SVOr.SerNr & ":7"] = CountWorkingDays(SVOr.Status7Sd,SVOr.Status7Ed,"","UA");
						st0[SVOr.SerNr & ":8"] = CountWorkingDays(SVOr.Status8Sd,SVOr.Status8Ed,"","UA");
						st0[SVOr.SerNr & ":10"] = CountWorkingDays(SVOr.Status10Sd,SVOr.Status10Ed,"","UA");
						st0[SVOr.SerNr & ":11"] = CountWorkingDays(SVOr.Status11Sd,SVOr.Status11Ed,"","UA");
					
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
								outstring(tabs[1],0,SVOr.TransDate,false);
								outstring(tabs[2],0,1,false);
								outstring(tabs[3],0,blankval,false);
								outstring(tabs[4],0,blankval,false);
								outstring(tabs[5],0,blankval,false);
							endformat;
						end else begin
							if(ivsumservstrah[asvonr[i]]!=0)then begin
								startformat(15);
									outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
									outstring(tabs[3],0,SVOr.TransDate,false);
									outstring(tabs[5],0,ivsumservstrah[asvonr[i]],false);
									outstring(tabs[7],0,"Неоплачено",false);
								endformat;
							end;
						end;
						if(SVOr.StatusReturnCnt>0)then begin
							vManCanQty[SVOr.Inspector & "DOR"] = vManCanQty[SVOr.Inspector & "DOR"] + SVOr.StatusReturnCnt;
							vIngCanQty[SVOr.ServiceManager & "DOR"] = vIngCanQty[SVOr.ServiceManager & "DOR"] + SVOr.StatusReturnCnt;
							if (RepSpec.flags[26]==0) then begin
								startformat(15);
									outstring(tabs[0],0,"Возвратов на доработку",false);
									outstring(tabs[2],0,SVOr.StatusReturnCnt,false);
								endformat;
							end;
						end;
					
						if (RepSpec.flags[26]==0) then begin
							OutDaysInStatus(st0,SVOr.SerNr,SVOr.Inspector,SVOr.ServiceManager,vManCanQty,vIngCanQty);

							if(nonblank(vCuDomain[SVOr.CustCode]))then begin
								if(nonblank(vCuDomain[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Звонок с домена",false);
										outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
									endformat;
								end;
								/*if(nonblank(vUTMSource[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Переход с ресурса",false);
										outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
									endformat;
								end;
								if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Кампания",false);
										outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
									endformat;
								end;
								if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Условия",false);
										outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
									endformat;
								end;*/
							end;
						end;
					
					
						if(nonblank(SVOr.GarNo))then begin
							oldSVOr.InnerOrderNr = SVOr.GarNo;
							if(readfirstkey("InnerOrderNr",oldSVOr,1,true))then begin
								povtorsumneoplat = povtorsumneoplat + ivsumserv[asvonr[i]];
								povtorqtyneoplat = povtorqtyneoplat +1;
								if (RepSpec.flags[26]==0) then begin
									startformat(15);
										outstring(tabs[0],0,"Повторный ремонт",false);
										outstring(tabs[6],"DblSVOVcSer",SVOr.GarNo,false);
									endformat;
								end;
								vPovtor[SVOr.SerNr] = true;
							end;
						end;
					
						if (RepSpec.flags[26]==0) then begin
							black_divider(tabs[6],tabs[7]);
							startformat(15);
								outstring(tabs[0],0,"Итого по заказу",false);							
								outstring(150,0,"Услуги:",false);
								outstring(200,0,ivsumserv[asvonr[i]],false);
								outstring(250,0,"Детали:",false);
								outstring(300,0,ivsumservdet[asvonr[i]],false);
								outstring(350,0,"Всего:",false);
								outstring(400,0,ivsumserv[asvonr[i]]+ivsumservdet[asvonr[i]],false);
							endformat;
						end;
						if(nonblank(vCuDomain[SVOr.CustCode]))then begin
							tstr = vCallType[SVOr.CustCode] & ":" & vCuDomain[SVOr.CustCode];
							if(!vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]])then begin
								vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]] = true;
								aCallExpData[cdatacnt] = tstr & vCallExpData[SVOr.CustCode];
								cdatacnt = cdatacnt +1;
							end;
							if(vTrackFlag[tstr])then begin
								vTrackSum[tstr & ":UNP"] = vTrackSum[tstr & ":UNP"] + ivsumserv[asvonr[i]];
								vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":UNP"] = vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":UNP"] + ivsumserv[asvonr[i]];
							end else begin
								vTrackFlag[tstr] = true;
								TrackSumKey[TrackCnt] = tstr;
								vTrackSum[tstr & ":UNP"] = ivsumserv[asvonr[i]];
								vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":UNP"] = ivsumserv[asvonr[i]];
								TrackCnt = TrackCnt +1;
							end;
						end;
						if (RepSpec.flags[26]==0) then begin
							gray_divider(0,1);
						end;
					end;			
					resetloop(IVr);
				end;
			end;
		end;
		if (RepSpec.flags[26]==0) then begin
			black_divider(0,1);
			startformat(15);
				outstring(0,0,"Итого по НЕ завершенным ремонтам",false);
				outstring(50,0,"Количество:",false);
				outstring(100,0,totnopayremqty,false);
				outstring(150,0,"Услуги:",false);
				outstring(200,0,supertotdolg,false);
				outstring(250,0,"Детали:",false);
				outstring(300,0,supertotdolgdet,false);
				outstring(350,0,"Всего:",false);
				outstring(400,0,supertotdolg+supertotdolgdet,false);
			endformat;
		end;
		totdolgsum = blankval;
		totdolgqty = blankval;
		if (RepSpec.flags[26]==0) then begin
			black_divider(0,1);
			startformat(15);
				outstring(0,0,"Выданные в долг ремонты ",false);
			endformat;
		end;
		For(i=0;i<k;i=i+1) begin
			SVOr.SerNr = asvonr[i];
			if(svowscost[asvonr[i]]!=0 and ivsum[asvonr[i]]>0 and vsvodolg[asvonr[i]])then begin
				readfirstmain(SVOr,1,true);
			
				filter = true;
			
				if(RepSpec.flags[1]==0)then begin
					if(svoiskivi[asvonr[i]])then begin
						filter = false;
					end;
				end;
			end else begin
				filter = false;
			end;
			if(filter)then begin
				if(SVOr.WSCost!=0 and ivsum[asvonr[i]]>0 and vsvodolg[asvonr[i]])then begin				
					svoout = false;
					IVr.SVONr = SVOr.SerNr;
					TrHs = true;
					while(loopkey("SVONr",IVr,1,TrHs))begin	
						testf = true;
						if(IVr.SVONr!=SVOr.SerNr)then begin TrHs = false; testf = false; end;
						if(IVr.OKFlag==0)then begin testf = false; end;
						if(blankdate(SVOr.RegDate))then begin testf = false; end;
						if(SVOr.RegDate>ed)then begin testf = false; end;
					
						enginer = "";
						cnt=1;
						while(ReadRecordLink(IVr,cnt,WSr,RLr)) begin
							if(nonblank(WSr.EMCode))then begin
								If(WSr.EMCode!=IVr.SalesMan) then begin
									IVr.SalesMan = WSr.EMCode;
								end; 
							end;
							cnt = cnt+1;
						end;
					
						if(testf)then begin
							filter = true;
							enginer = "";
							if(IVr.SalesMan==SVOr.CustomField7)then begin
								enginer = SVOr.ServiceManager;
							end else begin
								enginer = IVr.SalesMan;
							end;
						
							if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin filter = false; end;
							if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
							if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin filter = false; end;
						
							testf = filter;
						
							if(testf)then begin
								if(vCuExist[SVOr.CustCode]==false)then begin
									vCuExist[SVOr.CustCode] = true;
									CUr.Code = SVOr.CustCode;
								
									if(readfirstmain(CUr,1,true))then begin
										tphone = CUr.Phone;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
										tphone = CUr.Mobile;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
										tphone = CUr.AltPhone;
										FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
									end;
								end;
							end;
						end;
					
						if(testf)then begin
							mtrw = matrowcnt(IVr);
							For(j=0;j<mtrw;j=j+1) begin
								matrowget(IVr,j,IVrw);
								if(IVrw.stp==kInvoiceRowTypeNormal)then begin
									if(nonblank(IVrw.ArtCode))then begin
										INr.Code = IVrw.ArtCode;
										if(readfirstmain(INr,1,true))then begin
									
											svoout = true;
											if (RepSpec.flags[26]==0) then begin
												startformat(15);
													outstring(tabs[2],0,IVrw.Spec,false);
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														outstring(tabs[6],0,IVrw.Sum,false);
													end else begin
														outstring(tabs[6],0,-IVrw.Sum,false);
													end;
													if(IVr.SalesMan==SVOr.CustomField7)then begin
														outstring(tabs[7],0,SVOr.ServiceManager,false);
													end else begin
														outstring(tabs[7],0,IVr.SalesMan,false);
													end;
													outstring(tabs[8],0,SVOr.StatusText,false);
												endformat;
											end;
											if(INr.ItemType==3 or INr.ItemType==0)then begin
												if(IVr.InvType!=kInvoiceTypeCredit)then begin
													if(INr.Code!="СТРАХОВКА")then begin
														ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] + IVrw.Sum;
														totserv = totserv + ivsumserv[asvonr[i]];
														totdolgsum = totdolgsum + IVrw.Sum;
														akey = enginer & ":DOLG:SERV";
														vIngSum[akey] = vIngSum[akey] + IVrw.Sum;
														if(vIngExst[enginer]==false)then begin
															vIngExst[enginer] = true;
															aing[ingcnt] = enginer;
															ingcnt = ingcnt + 1;														
														end;
														akey = SVOr.Inspector & ":DOLG:SERV";
														vManSum[akey] = vManSum[akey] + IVrw.Sum;
														if(vManExst[SVOr.Inspector]==false)then begin
															vManExst[SVOr.Inspector] = true;
															aman[mancnt] = SVOr.Inspector;
															mancnt = mancnt + 1;														
														end;
													end else begin
														ivsumservstrah[asvonr[i]] = ivsumservstrah[asvonr[i]] + IVrw.Sum;
														akey = IVr.SalesMan & ":DOLG:STRAH";
														vManSum[akey] = vManSum[akey] + IVrw.Sum;
														akey = IVr.SalesMan & ":DOLG:STRAH:QTY";
														vManSum[akey] = vManSum[akey] + IVrw.Quant;
														if(vManExst[IVr.SalesMan]==false)then begin
															vManExst[IVr.SalesMan] = true;
															aman[mancnt] = IVr.SalesMan;
															mancnt = mancnt + 1;														
														end;
													end;
												end else begin
													if(INr.Code!="СТРАХОВКА")then begin
														ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] - IVrw.Sum;
														totserv = totserv - ivsumserv[asvonr[i]];
														totdolgsum = totdolgsum - IVrw.Sum;
														akey = enginer & ":DOLG:SERV";
														vIngSum[akey] = vIngSum[akey] - IVrw.Sum;
														if(vIngExst[enginer]==false)then begin
															vIngExst[enginer] = true;
															aing[ingcnt] = enginer;
															ingcnt = ingcnt + 1;														
														end;
														akey = SVOr.Inspector & ":DOLG:SERV";
														vManSum[akey] = vManSum[akey] - IVrw.Sum;
														if(vManExst[SVOr.Inspector]==false)then begin
															vManExst[SVOr.Inspector] = true;
															aman[mancnt] = SVOr.Inspector;
															mancnt = mancnt + 1;														
														end;
													end else begin
														ivsumservstrah[asvonr[i]] = ivsumservstrah[asvonr[i]] - IVrw.Sum;
														akey = IVr.SalesMan & ":DOLG:STRAH";
														vManSum[akey] = vManSum[akey] - IVrw.Sum;
														akey = IVr.SalesMan & ":DOLG:STRAH:QTY";
														vManSum[akey] = vManSum[akey] - IVrw.Quant;
														if(vManExst[IVr.SalesMan]==false)then begin
															vManExst[IVr.SalesMan] = true;
															aman[mancnt] = IVr.SalesMan;
															mancnt = mancnt + 1;														
														end;
													end;
												end;
											end;
											if(INr.ItemType==1)then begin
												if(IVr.InvType!=kInvoiceTypeCredit)then begin
													ivsumservdet[asvonr[i]] = ivsumservdet[asvonr[i]] + IVrw.Sum;
													totservdet = totservdet + ivsumservdet[asvonr[i]];
													totdolgsumdet = totdolgsumdet + IVrw.Sum;
													akey = enginer & ":DOLG:DET";
													vIngSum[akey] = vIngSum[akey] + IVrw.Sum;
													if(vIngExst[enginer]==false)then begin
														vIngExst[enginer] = true;
														aing[ingcnt] = enginer;
														ingcnt = ingcnt + 1;														
													end;
													akey = SVOr.Inspector & ":DOLG:DET";
													vManSum[akey] = vManSum[akey] + IVrw.Sum;
													if(vManExst[SVOr.Inspector]==false)then begin
														vManExst[SVOr.Inspector] = true;
														aman[mancnt] = SVOr.Inspector;
														mancnt = mancnt + 1;														
													end;
												end else begin
													ivsumservdet[asvonr[i]] = ivsumservdet[asvonr[i]] - IVrw.Sum;
													totservdet = totservdet - ivsumservdet[asvonr[i]];
													totdolgsumdet = totdolgsumdet - IVrw.Sum;
													akey = enginer & ":DOLG:DET";
													vIngSum[akey] = vIngSum[akey] - IVrw.Sum;
													if(vIngExst[enginer]==false)then begin
														vIngExst[enginer] = true;
														aing[ingcnt] = enginer;
														ingcnt = ingcnt + 1;														
													end;
													akey = SVOr.Inspector & ":DOLG:DET";
													vManSum[akey] = vManSum[akey] - IVrw.Sum;
													if(vManExst[SVOr.Inspector]==false)then begin
														vManExst[SVOr.Inspector] = true;
														aman[mancnt] = SVOr.Inspector;
														mancnt = mancnt + 1;														
													end;
												end;
											end;
										end;
									end;
								end;
							end; 
						end;
					end;
				
					if(svoout)then begin
						totdolgqty = totdolgqty + 1;
						totrem = totrem + 1;
						if (RepSpec.flags[26]==0) then begin
							st0[SVOr.SerNr] = CountWorkingDays(SVOr.Status0Sd,SVOr.Status0Ed,"","UA");
							st0[SVOr.SerNr & ":1"] = CountWorkingDays(SVOr.Status1Sd,SVOr.Status1Ed,"","UA");
							st0[SVOr.SerNr & ":3"] = CountWorkingDays(SVOr.Status3Sd,SVOr.Status3Ed,"","UA");
							st0[SVOr.SerNr & ":4"] = CountWorkingDays(SVOr.Status4Sd,SVOr.Status4Ed,"","UA");
							st0[SVOr.SerNr & ":5"] = CountWorkingDays(SVOr.Status5Sd,SVOr.Status5Ed,"","UA");
							st0[SVOr.SerNr & ":7"] = CountWorkingDays(SVOr.Status7Sd,SVOr.Status7Ed,"","UA");
							st0[SVOr.SerNr & ":8"] = CountWorkingDays(SVOr.Status8Sd,SVOr.Status8Ed,"","UA");
							st0[SVOr.SerNr & ":10"] = CountWorkingDays(SVOr.Status10Sd,SVOr.Status10Ed,"","UA");
							st0[SVOr.SerNr & ":11"] = CountWorkingDays(SVOr.Status11Sd,SVOr.Status11Ed,"","UA");
					
						
							startformat(15);
								outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
								outstring(tabs[1],0,SVOr.TransDate,false);
								outstring(tabs[2],0,1,false);
								outstring(tabs[3],0,blankval,false);
								outstring(tabs[4],0,blankval,false);
								outstring(tabs[5],0,blankval,false);
							endformat;
						end else begin
							if(ivsumservstrah[asvonr[i]]!=0)then begin
								startformat(15);
									outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
									outstring(tabs[3],0,SVOr.TransDate,false);
									outstring(tabs[5],0,ivsumservstrah[asvonr[i]],false);
									outstring(tabs[7],0,"Вдолг",false);
								endformat;
							end;
						end;
						if(SVOr.StatusReturnCnt>0)then begin
							vManCanQty[SVOr.Inspector & "DOR"] = vManCanQty[SVOr.Inspector & "DOR"] + SVOr.StatusReturnCnt;
							vIngCanQty[SVOr.ServiceManager & "DOR"] = vIngCanQty[SVOr.ServiceManager & "DOR"] + SVOr.StatusReturnCnt;
							if (RepSpec.flags[26]==0) then begin
								startformat(15);
									outstring(tabs[0],0,"Возвратов на доработку",false);
									outstring(tabs[2],0,SVOr.StatusReturnCnt,false);
								endformat;
							end;
						end;
					
						if (RepSpec.flags[26]==0) then begin
							OutDaysInStatus(st0,SVOr.SerNr,SVOr.Inspector,SVOr.ServiceManager,vManCanQty,vIngCanQty);
					
							if(nonblank(vCuDomain[SVOr.CustCode]))then begin
								if(nonblank(vCuDomain[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Звонок с домена",false);
										outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
									endformat;
								end;
								/*if(nonblank(vUTMSource[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Переход с ресурса",false);
										outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
									endformat;
								end;
								if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Кампания",false);
										outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
									endformat;
								end;
								if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
									startformat(15);
										outstring(tabs[0],0,"Условия",false);
										outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
									endformat;
								end;*/
							end;
						end;
					
						if(nonblank(SVOr.GarNo))then begin
							oldSVOr.InnerOrderNr = SVOr.GarNo;
							if(readfirstkey("InnerOrderNr",oldSVOr,1,true))then begin
								povtorsumdolg = povtorsumdolg + ivsumserv[asvonr[i]];
								povtorqtydolg = povtorqtydolg + 1;
						
								if(RepSpec.flags[26]==0)then begin
									startformat(15);
										outstring(tabs[0],0,"Повторный ремонт",false);
										outstring(tabs[6],"DblSVOVcSer",SVOr.GarNo,false);
									endformat;
								end;
								vPovtor[SVOr.SerNr] = true;
							end;
						end;
					
						if (RepSpec.flags[26]==0) then begin
							black_divider(tabs[6],tabs[7]);
							startformat(15);
								outstring(tabs[0],0,"Итого по заказу",false);
								//outstring(tabs[6],0,ivsumserv[asvonr[i]],false);
							
								outstring(150,0,"Услуги:",false);
								outstring(200,0,ivsumserv[asvonr[i]],false);
								outstring(250,0,"Детали:",false);
								outstring(300,0,ivsumservdet[asvonr[i]],false);
								outstring(350,0,"Всего:",false);
								outstring(400,0,ivsumserv[asvonr[i]]+ivsumservdet[asvonr[i]],false);
							endformat;
						end;
						if(nonblank(vCuDomain[SVOr.CustCode]))then begin
							tstr = vCallType[SVOr.CustCode] & ":" & vCuDomain[SVOr.CustCode];
							if(!vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]])then begin
								vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]] = true;
								aCallExpData[cdatacnt] = tstr & vCallExpData[SVOr.CustCode];
								cdatacnt = cdatacnt +1;
							end;
							if(vTrackFlag[tstr])then begin
								vTrackSum[tstr & ":CRD"] = vTrackSum[tstr & ":CRD"] + ivsumserv[asvonr[i]];
								vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":CRD"] = vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":CRD"] + ivsumserv[asvonr[i]];
							end else begin
								vTrackFlag[tstr] = true;
								TrackSumKey[TrackCnt] = tstr;
								vTrackSum[tstr & ":CRD"] = ivsumserv[asvonr[i]];
								vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":CRD"] = ivsumserv[asvonr[i]];
								TrackCnt = TrackCnt +1;
							end;
						end;
						if (RepSpec.flags[26]==0) then begin
							gray_divider(0,1);
						end;
					end;			
					resetloop(IVr);
				end;
			end;
		end; 
		if (RepSpec.flags[26]==0) then begin
			black_divider(0,1);		
			startformat(15);
				outstring(0,0,"Итого по ремонтам в долг",false);
				outstring(50,0,"Количество:",false);
				outstring(100,0,totdolgqty,false);
				outstring(150,0,"Услуги:",false);
				outstring(200,0,totdolgsum,false);
				outstring(250,0,"Детали:",false);
				outstring(300,0,totdolgsumdet,false);
				outstring(350,0,"Всего:",false);
				outstring(400,0,totdolgsum+totdolgsumdet,false);
			endformat;
		
			black_divider(0,1);
			startformat(15);
				outstring(3,0,"Отмененные ремонты",false);
			endformat;
		end;
		resetloop(SVOr);
		SVOr.RegDate = sd;
		TrHs = true;
		while(loopkey("RegDate",SVOr,1,TrHs))begin
			testf = true;
			if(SVOr.RegDate<sd or SVOr.RegDate>ed)then begin TrHs = false; testf = false; end;
			
			if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin testf = false; end;
			if(nonblank(RepSpec.f3) and RepSpec.f3!=SVOr.ServiceManager)then begin testf = false; end;
			if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin testf = false; end;
			
			
			if(RepSpec.flags[1]==0)then begin
				if(KIVIFound(SVOr))then begin
					testf = false;
				end;
			end;
			
			if(testf)then begin
				if(SVOr.OrderStatus==6)then begin
					totcan = totcan + 1;
					
					st0[SVOr.SerNr] = CountWorkingDays(SVOr.Status0Sd,SVOr.Status0Ed,"","UA");
					st0[SVOr.SerNr & ":1"] = CountWorkingDays(SVOr.Status1Sd,SVOr.Status1Ed,"","UA");
					st0[SVOr.SerNr & ":3"] = CountWorkingDays(SVOr.Status3Sd,SVOr.Status3Ed,"","UA");
					st0[SVOr.SerNr & ":4"] = CountWorkingDays(SVOr.Status4Sd,SVOr.Status4Ed,"","UA");
					st0[SVOr.SerNr & ":5"] = CountWorkingDays(SVOr.Status5Sd,SVOr.Status5Ed,"","UA");
					st0[SVOr.SerNr & ":7"] = CountWorkingDays(SVOr.Status7Sd,SVOr.Status7Ed,"","UA");
					st0[SVOr.SerNr & ":8"] = CountWorkingDays(SVOr.Status8Sd,SVOr.Status8Ed,"","UA");
					st0[SVOr.SerNr & ":10"] = CountWorkingDays(SVOr.Status10Sd,SVOr.Status10Ed,"","UA");
					st0[SVOr.SerNr & ":11"] =CountWorkingDays(SVOr.Status11Sd,SVOr.Status11Ed,"","UA");
					
					if (RepSpec.flags[26]==0) then begin
						startformat(15);
						outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
						outstring(tabs[1],0,SVOr.TransDate,false);
						outstring(tabs[2],0,1,false);
						outstring(tabs[3],0,blankval,false);
						outstring(tabs[4],0,1,false);
					end;
					if(SVOr.StatusReturnCnt>0)then begin
						vManCanQty[SVOr.Inspector & "DOR"] = vManCanQty[SVOr.Inspector & "DOR"] + SVOr.StatusReturnCnt;
						vIngCanQty[SVOr.ServiceManager & "DOR"] = vIngCanQty[SVOr.ServiceManager & "DOR"] + SVOr.StatusReturnCnt;
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],0,"Возвратов на доработку",false);
								outstring(tabs[2],0,SVOr.StatusReturnCnt,false);
							endformat;
						end;
					end;
					if(SVOr.RejectReason=="Не смог сделать")then begin
						totourcan = totourcan + 1;
						if (RepSpec.flags[26]==0) then begin
							outstring(tabs[5],0,1,false);
						end;
						vManCanQty[SVOr.Inspector] = vManCanQty[SVOr.Inspector] + 1;
						vIngCanQty[SVOr.ServiceManager] = vIngCanQty[SVOr.ServiceManager] + 1;
					end else begin
						if (RepSpec.flags[26]==0) then begin
							outstring(tabs[5],0,blankval,false);
						end;
						if(SVOr.RejectReason=="КЛИЕНТ НЕ ПРИШЕЛ")then begin
							totcanceled = totcanceled + 1;
						end;
					end;
					
					if (RepSpec.flags[26]==0) then begin
						OutDaysInStatus(st0,SVOr.SerNr,SVOr.Inspector,SVOr.ServiceManager,vManCanQty,vIngCanQty);
					end;
					
					totcanceled = totcanceled + 1;
					if (RepSpec.flags[26]==0) then begin
						outstring(tabs[6],0,blankval,false);
						outstring(tabs[7],0,SVOr.RejectReason,false);
						outstring(tabs[8],0,SVOr.StatusText,false);
					end;
					if(vCuExist[SVOr.CustCode]==false)then begin
						vCuExist[SVOr.CustCode] = true;
						CUr.Code = SVOr.CustCode;
						if(readfirstmain(CUr,1,true))then begin
							tphone = CUr.Phone;
							FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
							tphone = CUr.Mobile;
							FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
							tphone = CUr.AltPhone;
							FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
						end;
					end;
					if (RepSpec.flags[26]==0) then begin
						endformat;
					end;
				
				if(vrjct[SVOr.RejectReason]==false)then begin
					vrjct[SVOr.RejectReason]=true;
					arjct[irjct] = SVOr.RejectReason;
					irjct = irjct + 1;
				end;
				vIngCanQty[SVOr.RejectReason] = vIngCanQty[SVOr.RejectReason] + 1;
				
				if(nonblank(SVOr.GarNo))then begin
					oldSVOr.InnerOrderNr = SVOr.GarNo;
					if(readfirstkey("InnerOrderNr",oldSVOr,1,true))then begin
						povtorsumotkaz = povtorsumotkaz + ivsumserv[asvonr[i]];
						povtorqtyotkaz = povtorqtyotkaz + 1;
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],0,"Повторный ремонт",false);
								outstring(tabs[6],"DblSVOVcSer",SVOr.GarNo,false);
							endformat;
						end;
						vPovtor[SVOr.SerNr] = true;
					end;
				end;
				
				if(nonblank(vCuDomain[SVOr.CustCode]))then begin
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],0,"Звонок с домена",false);
								outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
							endformat;
						end;
					end;
					/*if(nonblank(vUTMSource[SVOr.CustCode]))then begin
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],0,"Переход с ресурса",false);
								outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
							endformat;
						end;
					end;
					if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],0,"Кампания",false);
								outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
							endformat;
						end;
					end;
					if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
						if (RepSpec.flags[26]==0) then begin
							startformat(15);
								outstring(tabs[0],0,"Условия",false);
								outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
							endformat;
						end;
					end;*/
					tstr = vCallType[SVOr.CustCode] & ":" & vCuDomain[SVOr.CustCode];
					if(!vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]])then begin
						vCallExpDataBool[tstr & vCallExpData[SVOr.CustCode]] = true;
						aCallExpData[cdatacnt] = tstr & vCallExpData[SVOr.CustCode];
						cdatacnt = cdatacnt +1;
					end;
					if(vTrackFlag[tstr])then begin
						vTrackSum[tstr & ":CNC"] = vTrackSum[tstr & ":CNC"] + 1;
						vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":CNC"] = vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":CNC"] + 1;
					end else begin
						vTrackFlag[tstr] = true;
						TrackSumKey[TrackCnt] = tstr;
						vTrackSum[tstr & ":CNC"] = 1;
						vTrackSum[tstr & vCallExpData[SVOr.CustCode] & ":CNC"] = 1;
						TrackCnt = TrackCnt +1;
					end;
				end;
				end;
			end;
		end;
		
		if (RepSpec.flags[26]==0) then begin
			black_divider(0,1);		
			startformat(15);
				outstring(0,0,"Итого отмененных",false);
				outstring(50,0,"Количество:",false);
				outstring(100,0,totcanceled,false);
			endformat;
		
		
			black_divider(0,1);
		
			Gray_divider(0,300);
			startformat(15);
				outstring(tabs[0],0,"Повт. ремонты выполненые",false);
				outstring(tabs[3],0,povtorqty,false);
				outstring(tabs[4],0,povtorsum,false);
			endformat;
			startformat(15);
				outstring(tabs[0],0,"Повт. ремонты неоплаченные",false);
				outstring(tabs[3],0,povtorqtyneoplat,false);
				outstring(tabs[4],0,povtorsumneoplat,false);
			endformat;
			startformat(15);
				outstring(tabs[0],0,"Повт. ремонты в долг",false);
				outstring(tabs[3],0,povtorqtydolg,false);
				outstring(tabs[4],0,povtorsumdolg,false);
			endformat;
			startformat(15);
				outstring(tabs[0],0,"Повт. ремонты отмененные",false);
				outstring(tabs[3],0,povtorqtyotkaz,false);
				outstring(tabs[4],0,povtorsumotkaz,false);
			endformat;
		
			Gray_divider(0,300);
			startformat(15);
				outstring(tabs[0],0,"Всего оплаченных ремонтов",false);
				outstring(tabs[3],0,totpayremqty,false);
			endformat;
			startformat(15);
				outstring(tabs[0],0,"Услуги",false);
				outstring(tabs[3],0,totpayrem,false);
				outstring(tabs[4],0,"Детали",false);
				outstring(tabs[5],0,totpayremdet,false);
				outstring(tabs[6],0,"Итого",false);
				outstring(tabs[7],0,totpayrem + totpayremdet,false);
			endformat;
			Gray_divider(0,300);
			startformat(15);
				outstring(tabs[0],0,"Неоплаченных ремонтов",false);
				outstring(tabs[3],0,totnopayremqty,false);
			endformat;
			startformat(15);
				outstring(tabs[0],0,"Услуги",false);
				outstring(tabs[3],0,supertotdolg,false);
				outstring(tabs[4],0,"Детали",false);
				outstring(tabs[5],0,supertotdolgdet,false);
				outstring(tabs[6],0,"Итого",false);
				outstring(tabs[7],0,supertotdolg + supertotdolgdet,false);
			endformat;

			Gray_divider(0,300);
			startformat(15);
				outstring(tabs[0],0,"Ремонтов в долг",false);
				outstring(tabs[3],0,totdolgqty,false);
			endformat;
			startformat(15);
				outstring(tabs[0],0,"Услуги",false);
				outstring(tabs[3],0,totdolgsum,false);
				outstring(tabs[4],0,"Детали",false);
				outstring(tabs[5],0,totdolgsumdet,false);
				outstring(tabs[6],0,"Итого",false);
				outstring(tabs[7],0,totdolgsum + totdolgsumdet,false);
			endformat;

			Gray_divider(0,300);
			startformat(15);
				outstring(tabs[0],0,"Отмен",false);
				outstring(tabs[3],0,totcan,false);
			endformat;
		
			For(i=0;i<irjct;i=i+1) begin
				startformat(15);
					outstring(tabs[0],0,arjct[i],false);
					outstring(tabs[3],0,vIngCanQty[arjct[i]],false);
				endformat;	
			end; 
		end;
		/*startformat(15);
			outstring(tabs[0],0,"Отмен по нашей вине",false);
			outstring(tabs[3],0,totourcan,false);
		endformat;	
		startformat(15);
			outstring(tabs[0],0,"Клиент не пришел",false);
			outstring(tabs[3],0,totcanceled,false);
		endformat;*/
		
		tabs[0] = 0;
		tabs[1] = 40;
		tabs[2] = 80;
		tabs[3] = 90;
		tabs[4] = 120;
		tabs[5] = 155;
		tabs[6] = 190;
		tabs[7] = 210;
		tabs[8] = 240;
		tabs[9] = 310;
		tabs[10] = 360;
		tabs[11] = 420;
		tabs[12] = 470;
		
		if (RepSpec.flags[26]==0) then begin
			gray_divider(0,1);
		end;
		if(blank(RepSpec.f2))then begin
			if (RepSpec.flags[26]==0) then begin
				startformat(15);
					outstring(tabs[0],0,"-==Статистика по инженерам==-",false);
				endformat;
				startformat(15);
					outstring(tabs[0],0,"Услуги",false);
				endformat;
				startformat(15);
					outstring(tabs[0],0,"Инженер",false);
					outstring(tabs[2],0,"Оплачено",false);
					outstring(tabs[4],0,"Неоплаченно",false);
					outstring(tabs[5],0,"Возвр.",false);
					outstring(tabs[6],0,"Долг",false);
					outstring(tabs[7],0,"Отмена",false);
					outstring(tabs[8],0,"Возвр. на доработку",false);
					outstring(tabs[9],0,"Проср. диагн.",false);
					outstring(tabs[10],0,"Проср. заказ запч.",false);
					outstring(tabs[11],0,"Проср. ремонт.",false);
					outstring(tabs[12],0,"Проср. всего",false);
				endformat;
			end else begin
				/*startformat(15);
				outstring(tabs[0],0,"-==Статистика по инженерам==-",false);
				endformat;
				gray_divider(0,1);
				startformat(15);
				outstring(tabs[0],0,"Страховка",false);
				endformat;
				startformat(15);
					outstring(tabs[0],0,"Менеджер",false);
					outstring(tabs[3],0,"Оплачено",false);
					outstring(tabs[6],0,"Неоплаченно",false);
					outstring(tabs[9],0,"Долг",false);
				endformat;	*/		
			end;
			tot[1] = blankval;
			tot[2] = blankval;
			tot[3] = blankval;
			tot[4] = blankval;
			tot[5] = blankval;
			tot[6] = blankval;
			tot[7] = blankval;
			tot[8] = blankval;
			tot[9] = blankval;
			For(i=0;i<ingcnt;i=i+1) begin
				if (RepSpec.flags[26]==0) then begin
					startformat(15);
						outstring(tabs[0],0,aing[i],false);
							outstring(tabs[2],0,vIngSum[aing[i] & ":GOTOV:SERV"],false);
							outstring(tabs[4],0,vIngSum[aing[i] & ":NOPAY:SERV"],false);
							outstring(tabs[5],0,vIngSum[aing[i] & ":VOZVR:SERV"],false);
							outstring(tabs[6],0,vIngSum[aing[i] & ":DOLG:SERV"],false);
							outstring(tabs[7],0,vIngCanQty[aing[i]],false);
							outstring(tabs[8],0,vIngCanQty[aing[i] & "DOR"],false);
							outstring(tabs[9],0,vIngCanQty[aing[i] & ":5"],false);
							outstring(tabs[10],0,vIngCanQty[aing[i] & ":10"],false);
							outstring(tabs[11],0,vIngCanQty[aing[i] & ":1"],false);
							outstring(tabs[12],0,vIngCanQty[aing[i] & ":T"],false);
						endformat;
				end else begin
					/*if(vIngSum[aman[i] & ":GOTOV:STRAH"]!=0 or vIngSum[aman[i] & ":NOPAY:STRAH"]!=0 or vIngSum[aman[i] & ":DOLG:STRAH"]!=0)then begin
						startformat(15);
							outstring(tabs[0],0,aing[i],false);
							outstring(tabs[3],0,vIngSum[aing[i] & ":GOTOV:STRAH"],false);
							outstring(tabs[6],0,vIngSum[aing[i] & ":NOPAY:STRAH"],false);
							outstring(tabs[9],0,vIngSum[aing[i] & ":DOLG:STRAH"],false);
						endformat;
					end;*/
				end;
				tot[1] = tot[1] + vIngSum[aing[i] & ":GOTOV:SERV"];
				tot[2] = tot[2] + vIngSum[aing[i] & ":NOPAY:SERV"];
				tot[10] = tot[10] + vIngSum[aing[i] & ":VOZVR:SERV"];
				tot[3] = tot[3] + vIngSum[aing[i] & ":DOLG:SERV"];
				tot[4] = tot[4] + vIngCanQty[aing[i]];
				tot[5] = tot[5] + vIngCanQty[aing[i] & "DOR"];
				tot[6] = tot[6] + vIngCanQty[aing[i] & ":5"];
				tot[7] = tot[7] + vIngCanQty[aing[i] & ":10"];
				tot[8] = tot[8] + vIngCanQty[aing[i] & ":1"];
				tot[9] = tot[9] + vIngCanQty[aing[i] & ":T"];
				if (RepSpec.flags[26]==0) then begin				
					gray_divider(0,1);
				end;
			end;
			if (RepSpec.flags[26]==0) then begin
				startformat(15);
					outstring(tabs[0],0,"Всего",false);
					outstring(tabs[2],0,tot[1],false);
					outstring(tabs[4],0,tot[2],false);
					outstring(tabs[5],0,tot[10],false);
					outstring(tabs[6],0,tot[3],false);
					outstring(tabs[7],0,tot[4],false);
					outstring(tabs[8],0,tot[5],false);
					outstring(tabs[9],0,tot[6],false);
					outstring(tabs[10],0,tot[7],false);
					outstring(tabs[11],0,tot[8],false);
					outstring(tabs[12],0,tot[9],false);
				endformat;
				startformat(15);
					outstring(tabs[0],0,"Детали",false);
				endformat;
			end;
			tot[1] = blankval;
			tot[2] = blankval;
			tot[3] = blankval;
			tot[4] = blankval;
			tot[5] = blankval;
			tot[6] = blankval;
			tot[7] = blankval;
			tot[8] = blankval;
			tot[9] = blankval;
			tot[10] = blankval;
			For(i=0;i<ingcnt;i=i+1) begin
				if (RepSpec.flags[26]==0) then begin
					startformat(15);
						outstring(tabs[0],0,aing[i],false);
							outstring(tabs[2],0,vIngSum[aing[i] & ":GOTOV:DET"],false);
							outstring(tabs[4],0,vIngSum[aing[i] & ":NOPAY:DET"],false);
							outstring(tabs[5],0,vIngSum[aing[i] & ":VOZVR:DET"],false);
							outstring(tabs[6],0,vIngSum[aing[i] & ":DOLG:DET"],false);
					endformat;
				end;
				tot[1] = tot[1] + vIngSum[aing[i] & ":GOTOV:DET"];
				tot[2] = tot[2] + vIngSum[aing[i] & ":NOPAY:DET"];
				tot[4] = tot[4] + vIngSum[aing[i] & ":VOZVR:DET"];
				tot[3] = tot[3] + vIngSum[aing[i] & ":DOLG:DET"];
				if (RepSpec.flags[26]==0) then begin
					gray_divider(0,1);
				end;
			end;
			if (RepSpec.flags[26]==0) then begin
				startformat(15);
					outstring(tabs[0],0,"Всего",false);
					outstring(tabs[2],0,tot[1],false);
					outstring(tabs[4],0,tot[2],false);
					outstring(tabs[5],0,tot[4],false);
					outstring(tabs[6],0,tot[3],false);
				endformat;
			end;
		end;
		if(blank(RepSpec.f3))then begin
			if (RepSpec.flags[26]==0) then begin
				startformat(15);
					outstring(tabs[0],0,"-==Статистика по менеджерам==-",false);
				endformat;
				gray_divider(0,1);
				startformat(15);
					outstring(tabs[0],0,"Услуги",false);
				endformat;
				startformat(15);
					outstring(tabs[0],0,"Менеджер",false);
					outstring(tabs[2],0,"Оплачено",false);
					outstring(tabs[4],0,"Неоплаченно",false);
					outstring(tabs[5],0,"Возврат",false);
					outstring(tabs[6],0,"Долг",false);
					outstring(tabs[7],0,"Отмена",false);
					outstring(tabs[8],0,"Возвр. на доработку",false);
					outstring(tabs[9],0,"Проср. диагн.",false);
					outstring(tabs[10],0,"Проср. заказ запч.",false);
					outstring(tabs[11],0,"Проср. ремонт.",false);
					outstring(tabs[12],0,"Проср. всего",false);
				
				endformat;
			end else begin
				startformat(15);
				outstring(tabs[0],0,"-==Статистика по продавцу==-",false);
				endformat;
				gray_divider(0,1);
				startformat(15);
				outstring(tabs[0],0,"Страховка",false);
				endformat;
				startformat(15);
					outstring(tabs[0],0,"Менеджер",false);
					outstring(tabs[3],0,"Оплачено",false);
					outstring(tabs[6],0,"Неоплаченно",false);
					outstring(tabs[9],0,"Долг",false);
					outstring(tabs[11],0,"Всего",false);
				endformat;
			end;
			tot[1] = blankval;
			tot[2] = blankval;
			tot[3] = blankval;
			tot[4] = blankval;
			For(i=0;i<mancnt;i=i+1) begin
				if (RepSpec.flags[26]==0) then begin
					startformat(15);
						outstring(tabs[0],0,aman[i],false);
						outstring(tabs[2],0,vManSum[aman[i] & ":GOTOV:SERV"],false);
						outstring(tabs[4],0,vManSum[aman[i] & ":NOPAY:SERV"],false);
						outstring(tabs[5],0,vManSum[aman[i] & ":VOZVR:SERV"],false);
						outstring(tabs[6],0,vManSum[aman[i] & ":DOLG:SERV"],false);
						outstring(tabs[7],0,vManCanQty[aman[i]],false);
						outstring(tabs[8],0,vManCanQty[aman[i] & "DOR"],false);
						outstring(tabs[9],0,vManCanQty[aman[i] & ":5"],false);
						outstring(tabs[10],0,vManCanQty[aman[i] & ":10"],false);
						outstring(tabs[11],0,vManCanQty[aman[i] & ":1"],false);
						outstring(tabs[12],0,vManCanQty[aman[i] & ":T"],false);
					endformat;
				end else begin
					if(vManSum[aman[i] & ":GOTOV:STRAH"]!=0 or vManSum[aman[i] & ":NOPAY:STRAH"]!=0 or vManSum[aman[i] & ":DOLG:STRAH"]!=0)then begin
						startformat(15);
							outstring(tabs[0],0,aman[i],false);
							outstring(tabs[3],0,vManSum[aman[i] & ":GOTOV:STRAH"] & "(" & vManSum[aman[i] & ":GOTOV:STRAH:QTY"] & ")",false);
							outstring(tabs[6],0,vManSum[aman[i] & ":NOPAY:STRAH"] & "(" & vManSum[aman[i] & ":NOPAY:STRAH:QTY"] & ")",false);
							outstring(tabs[9],0,vManSum[aman[i] & ":DOLG:STRAH"] & "(" & vManSum[aman[i] & ":DOLG:STRAH:QTY"] & ")",false);
							outstring(tabs[11],0,(vManSum[aman[i] & ":GOTOV:STRAH"] + vManSum[aman[i] & ":NOPAY:STRAH"] + vManSum[aman[i] & ":DOLG:STRAH"]) & "(" & (vManSum[aman[i] & ":GOTOV:STRAH:QTY"] + vManSum[aman[i] & ":NOPAY:STRAH:QTY"] + vManSum[aman[i] & ":DOLG:STRAH:QTY"]) & ")",false);
						endformat;
					end;
				end;
				tot[1] = tot[1] + vManSum[aman[i] & ":GOTOV:SERV"];
				tot[2] = tot[2] + vManSum[aman[i] & ":NOPAY:SERV"];
				tot[10] = tot[10] + vManSum[aman[i] & ":VOZVR:SERV"];
				tot[3] = tot[3] + vManSum[aman[i] & ":DOLG:SERV"];
				tot[4] = tot[4] + vManCanQty[aman[i]];
				tot[5] = tot[5] + vManCanQty[aman[i] & "DOR"];
				tot[6] = tot[6] + vManCanQty[aman[i] & ":5"];
				tot[7] = tot[7] + vManCanQty[aman[i] & ":10"];
				tot[8] = tot[8] + vManCanQty[aman[i] & ":1"];
				tot[9] = tot[9] + vManCanQty[aman[i] & ":T"];
				tot[11] = tot[11] + vManSum[aman[i] & ":GOTOV:STRAH"];
				tot[12] = tot[12] + vManSum[aman[i] & ":NOPAY:STRAH"];
				tot[13] = tot[13] + vManSum[aman[i] & ":DOLG:STRAH"];
				tot[14] = tot[14] + vManSum[aman[i] & ":GOTOV:STRAH:QTY"];
				tot[15] = tot[15] + vManSum[aman[i] & ":NOPAY:STRAH:QTY"];
				tot[16] = tot[16] + vManSum[aman[i] & ":DOLG:STRAH:QTY"];
				if (RepSpec.flags[26]==0) then begin
					gray_divider(0,1);
				end;
			end; 
			if (RepSpec.flags[26]==0) then begin
				startformat(15);
					outstring(tabs[0],0,"Всего",false);
					outstring(tabs[2],0,tot[1],false);
					outstring(tabs[4],0,tot[2],false);
					outstring(tabs[5],0,tot[10],false);
					outstring(tabs[6],0,tot[3],false);
					outstring(tabs[7],0,tot[4],false);
					outstring(tabs[8],0,tot[5],false);
					outstring(tabs[9],0,tot[6],false);
					outstring(tabs[10],0,tot[7],false);
					outstring(tabs[11],0,tot[8],false);
					outstring(tabs[12],0,tot[9],false);
				endformat;
				startformat(15);
					outstring(tabs[0],0,"Детали",false);
				endformat;
			end else begin//страховка
				gray_divider(0,1);
				startformat(15);
					outstring(tabs[0],0,"Всего",false);
					outstring(tabs[3],0,tot[11],false);
					outstring(tabs[6],0,tot[12],false);
					outstring(tabs[9],0,tot[13],false);
					outstring(tabs[11],0,tot[11] + tot[12] + tot[13],false);
				endformat;
			end;
			tot[1] = blankval;
			tot[2] = blankval;
			tot[3] = blankval;
			tot[4] = blankval;
			For(i=0;i<mancnt;i=i+1) begin
				if (RepSpec.flags[26]==0) then begin
					startformat(15);
						outstring(tabs[0],0,aman[i],false);
						outstring(tabs[2],0,vManSum[aman[i] & ":GOTOV:DET"],false);
						outstring(tabs[4],0,vManSum[aman[i] & ":NOPAY:DET"],false);
						outstring(tabs[5],0,vManSum[aman[i] & ":VOZVR:DET"],false);
						outstring(tabs[6],0,vManSum[aman[i] & ":DOLG:DET"],false);
					endformat;
				end;
				tot[1] = tot[1] + vManSum[aman[i] & ":GOTOV:DET"];
				tot[2] = tot[2] + vManSum[aman[i] & ":NOPAY:DET"];
				tot[3] = tot[3] + vManSum[aman[i] & ":DOLG:DET"];
				tot[4] = tot[4] + vManSum[aman[i] & ":VOZVR:DET"];
				if (RepSpec.flags[26]==0) then begin
					gray_divider(0,1);
				end;
			end; 
			if (RepSpec.flags[26]==0) then begin
				startformat(15);
					outstring(tabs[0],0,"Всего",false);
					outstring(tabs[2],0,tot[1],false);
					outstring(tabs[4],0,tot[2],false);
					outstring(tabs[5],0,tot[4],false);
					outstring(tabs[6],0,tot[3],false);
				endformat;
			end;
		end;
		if (RepSpec.flags[26]==0) then begin
			gray_divider(0,1);
			startformat(15);
				outstring(tabs[0],0,"Статистика Binotel:",false);
			endformat;
			MySortStringArray(TrackSumKey,TrackCnt);
			/*
			
			tphone = CUr.Phone;
			FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
			tphone = CUr.Mobile;
			FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
			tphone = CUr.AltPhone;
			FindPhoneDomain(SVOr,RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vCallType,vCallExpData);
			*/
			startformat(15);
				outstring(tabs[0],0,"GetCall звонки:",false);
			endformat;
			tabs[2] = 320;
			tabs[4] = 370;
			tabs[6] = 420;
			tabs[7] = 470;
			startformat(15);
					outstring(tabs[0],0,"Страница",false);
					outstring(tabs[2],0,"Оплачено",false);
					outstring(tabs[4],0,"Неоплаченно",false);
					outstring(tabs[6],0,"Долг",false);
					outstring(tabs[7],0,"Отмена",true);			
				endformat;
			for(i=0;i<TrackCnt;i=i+1)begin
				if(Left(TrackSumKey[i],3)=="GC:")then begin
					startformat(15);
						outstring(tabs[0],0,Right(TrackSumKey[i],len(TrackSumKey[i])-3),false);
						outstring(tabs[2],0,vTrackSum[TrackSumKey[i] & ":PD"],false);
						outstring(tabs[4],0,vTrackSum[TrackSumKey[i] & ":UNP"],false);
						outstring(tabs[6],0,vTrackSum[TrackSumKey[i] & ":CRD"],false);
						outstring(tabs[7],0,vTrackSum[TrackSumKey[i] & ":CNC"],true);
					endformat;
					for(j=0;j<cdatacnt;j=j+1) begin
						pos = 0;
						if(left(aCallExpData[j],3)=="GC:")then begin
							pos = 0;
							ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
							if(right(tstr,len(tstr)-3)==Right(TrackSumKey[i],len(TrackSumKey[i])-3))then begin
								tstr = Mid(aCallExpData[j],3,len(Right(TrackSumKey[i],len(TrackSumKey[i])-3)));
								startformat(15);
									outstring(tabs[0],0,tstr,false);
									outstring(tabs[2],0,vTrackSum[aCallExpData[j] & ":PD"],false);
									outstring(tabs[4],0,vTrackSum[aCallExpData[j] & ":UNP"],false);
									outstring(tabs[6],0,vTrackSum[aCallExpData[j] & ":CRD"],false);
									outstring(tabs[7],0,vTrackSum[aCallExpData[j] & ":CNC"],true);
								endformat;
							end;
						end;
					end;
					gray_divider(0,1);
				end;
			end;
			startformat(15);
				outstring(tabs[0],0,"CallTracking звонки:",false);
			endformat;
			startformat(15);
					outstring(tabs[0],0,"Страница",false);
					outstring(tabs[2],0,"Оплачено",false);
					outstring(tabs[4],0,"Неоплаченно",false);
					outstring(tabs[6],0,"Долг",false);
					outstring(tabs[7],0,"Отмена",true);			
				endformat;
			for(i=0;i<TrackCnt;i=i+1)begin
				if(Left(TrackSumKey[i],3)=="CT:")then begin
					startformat(15);
						outstring(tabs[0],0,Right(TrackSumKey[i],len(TrackSumKey[i])-3),false);
						outstring(tabs[2],0,vTrackSum[TrackSumKey[i] & ":PD"],false);
						outstring(tabs[4],0,vTrackSum[TrackSumKey[i] & ":UNP"],false);
						outstring(tabs[6],0,vTrackSum[TrackSumKey[i] & ":CRD"],false);
						outstring(tabs[7],0,vTrackSum[TrackSumKey[i] & ":CNC"],true);
					endformat;
					for(j=0;j<cdatacnt;j=j+1) begin
						pos = 0;
						//ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
						if(left(aCallExpData[j],3)=="CT:")then begin
							pos = 0;
							ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
							if(right(tstr,len(tstr)-3)==Right(TrackSumKey[i],len(TrackSumKey[i])-3))then begin
								tstr = Mid(aCallExpData[j],3,len(Right(TrackSumKey[i],len(TrackSumKey[i])-3)));
								pos = 0;
								ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
								startformat(15);
									ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
									outstring(tabs[0],0,tstr,false);
									ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
									outstring(tabs[0]+50,0,tstr,false);
									ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
									outstring(tabs[0]+80,0,tstr,false);
									ExtractObjWithSeparator(";",aCallExpData[j],true,pos,tstr);
									outstring(tabs[0]+150,0,tstr,false);
									outstring(tabs[2],0,vTrackSum[aCallExpData[j] & ":PD"],false);
									outstring(tabs[4],0,vTrackSum[aCallExpData[j] & ":UNP"],false);
									outstring(tabs[6],0,vTrackSum[aCallExpData[j] & ":CRD"],false);
									outstring(tabs[7],0,vTrackSum[aCallExpData[j] & ":CNC"],true);
								endformat;
							end;
						end;
					end;
					gray_divider(0,1);
				end;
			end;
			
			startformat(15);
				outstring(tabs[0],0,"Звонки с источников:",false);
			endformat;
			startformat(15);
					outstring(tabs[0],0,"Источник",false);
					outstring(tabs[2],0,"Оплачено",false);
					outstring(tabs[4],0,"Неоплаченно",false);
					outstring(tabs[6],0,"Долг",false);
					outstring(tabs[7],0,"Отмена",true);			
				endformat;
			for(i=0;i<TrackCnt;i=i+1)begin
				if(Left(TrackSumKey[i],3)=="SR:")then begin
					startformat(15);
						outstring(tabs[0],0,Right(TrackSumKey[i],len(TrackSumKey[i])-3),false);
						outstring(tabs[2],0,vTrackSum[TrackSumKey[i] & ":PD"],false);
						outstring(tabs[4],0,vTrackSum[TrackSumKey[i] & ":UNP"],false);
						outstring(tabs[6],0,vTrackSum[TrackSumKey[i] & ":CRD"],false);
						outstring(tabs[7],0,vTrackSum[TrackSumKey[i] & ":CNC"],true);
					endformat;
					gray_divider(0,1);
				end;
			end;
		end;
	endjob;

return;
end;


global procedure BinotelSimpleRepRn(record RcVc RepSpec)
begin
	record BinotelCallEndVc BCEr;
	record CUVc CUr;
	record SVOVc SVOr;
	array string 20 phones;
	vector string 50 vcustcode;
	vector boolean vphone,vdublicate;
	longint phi,svi,phial;
	boolean TrHs;
	
	
	StartReportnoheaderJob("BinotelSimpleRepRn");
	
	while(loopmain(BCEr,1,true))begin
		if(nonblank(BCEr.gCDdomain) or nonblank(BCEr.CTdomain))then begin
			if(vphone[BCEr.externalNumber]==false)then begin
				vphone[BCEr.externalNumber] = true;
				CUr.Code = BCEr.externalNumber;
				if(blank(vcustcode[BCEr.externalNumber]))then begin
					if(readfirstmain(CUr,1,true))then begin
						vcustcode[BCEr.externalNumber] = CUr.Code;
					end else begin
						CUr.Phone = BCEr.externalNumber;
						if(readfirstkey("Phone",CUr,1,true))then begin
							vcustcode[BCEr.externalNumber] = CUr.Code;
						end else begin
							CUr.Mobile = BCEr.externalNumber;
							if(readfirstkey("Mobile",CUr,1,true))then begin
								vcustcode[BCEr.externalNumber] = CUr.Code;
							end else begin
								CUr.AltPhone = BCEr.externalNumber;
								if(readfirstkey("AltPhone",CUr,1,true))then begin
									vcustcode[BCEr.externalNumber] = CUr.Code;
								end;
							end;
						end;
					end;
				end;
				
			end;
			
			phial = phial + 1;
			
			startformat(15);
				outstring(0,0,BCEr.externalNumber,false);
				outstring(100,0,vcustcode[BCEr.externalNumber],false);
				
				if(vdublicate[BCEr.externalNumber]==true)then begin
					outstring(150,0,"dublicate",false);
				end;
			endformat;
			
			if(vdublicate[BCEr.externalNumber]==false)then begin
				vdublicate[BCEr.externalNumber] = true;
				phi = phi + 1;
				vdublicate[BCEr.externalNumber]=true;
				if(nonblank(vcustcode[BCEr.externalNumber]))then begin
					SVOr.CustCode = vcustcode[BCEr.externalNumber];
					TrHs = true;
					while(loopkey("CustCode",SVOr,1,TrHs))begin
						if(SVOr.CustCode==vcustcode[BCEr.externalNumber])then begin
							if(SVOr.SerNr>90000)then begin
								startformat(15);
								outstring(200,"DblSVOVcSer",SVOr.InnerOrderNr,false);
								outstring(300,"DblSVOVc",SVOr.SerNr,false);
								endformat;
								svi = svi + 1;
							end;
						end else begin
							TrHs = false;
						end;
					end;
					resetloop(SVOr);
				end;
			end;
			
			
			
			
			
		end;
	end;
	startformat(15);
		outstring(0,0,"phi",false);
		outstring(100,0,phi,false);
	endformat;
	startformat(15);
		outstring(0,0,"svi",false);
		outstring(100,0,svi,false);
	endformat;
	startformat(15);
		outstring(0,0,"phial",false);
		outstring(100,0,phial,false);
	endformat;
		
	endjob;
return;
end;

global procedure BinotelTrackListRn(record RcVc RepSpec)
begin
	record BinotelCallEndVc BCEr;
	record CUVc CUr;
	record SVOVc SVOr;
	array string 20 phones;
	vector string 50 vcustcode;
	vector boolean vphone,vdublicate;
	longint phi,svi,phial;
	boolean TrHs;
	
	
	StartReportnoheaderJob("BinotelTrackListRn");
	
	while(loopmain(BCEr,1,true))begin
		if(nonblank(BCEr.CTdomain))then begin
			startformat(15);
				outstring(0,"DblBCEr",BCEr.SerNr,false);
				outstring(50,0,"CallTracking",false);
				outstring(100,0,BCEr.CTdomain,false);
				outstring(1,0,BCEr.TransDate,true);
			endformat;
			phi = phi +1;
		end;
		if(nonblank(BCEr.gCDdomain))then begin
			startformat(15);
				outstring(0,"DblBCEr",BCEr.SerNr,false);
				outstring(150,0,"Get Call Detail",false);
				outstring(200,0,BCEr.gCDdomain,false);
				outstring(1,0,BCEr.TransDate,true);
				svi = svi +1;
			endformat;
		end;
	end;
	startformat(15);
		outstring(0,0,"CallTracking Total",false);
		outstring(100,0,phi,false);
	endformat;
	startformat(15);
		outstring(0,0,"Get Call Detail total",false);
		outstring(100,0,svi,false);
	endformat;

		
	endjob;
return;
end;

global procedure ServiceJobsRn(record RcVc RepSpec)
begin
	integer mancnt;
	integer ingcnt;
	vector val vIngSum;
	vector val vManSum;
	array string 50 aing;
	array string 50 aman;
	
	ServiceJobsRnProc(RepSpec,mancnt,ingcnt,vIngSum,vManSum,aing,aman);
	
return;
end;

global procedure ServiceJobsRnStat(record RcVc RepSpec,var integer mancnt,var integer ingcnt,var vector val vIngSum,var vector val vManSum,var array string aing,var array string aman)
begin

	RepSpec.flags[26] = 1;
	ServiceJobsRnProc(RepSpec,mancnt,ingcnt,vIngSum,vManSum,aing,aman);
	
return;
end;
