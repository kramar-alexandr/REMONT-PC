remote procedure FindStockValue(string,string,var record ItemStatusVc);
remote procedure INDCLass_BIChart_Tool(record INVc,var val,var Array val,var Array Integer);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
remote function string 255 UpWindDI_IN2SClass(string,Integer);
remote function string 255 GetSelDI_IN2SClass(string,LongInt,var Array string,var Integer);
remote procedure IN2SClassOnOKWindowExecute(string,var Array string,var Integer);
external procedure OrderStockRClassRD(var record RcVc);
external procedure RecSumup(record RecVc);
external procedure FindMotherWindowLocation(Integer,var string,var Date);
external procedure INrsRClassReportDef(var record RcVc);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure PasteFromSysList(Integer,Integer); //Edit***************************Sasha2,14:52 14.12.2015
remote procedure DI2SClassArrayOnOpen(string,var Array string,var Array string,var Array string);

SetLangMode(LangRussian,"RUS",0);


procedure CalcVolume(val w,val h,val d,var val vol)
begin
  vol = blankval;
  if (w!=0) then begin
    if (h!=0) then begin
      vol = w*h;
    end else begin
      if (d!=0) then begin
        vol = w;
      end else begin
        goto LCalcVolume;
      end;
    end;
  end else begin
    if (h!=0) then begin
      if (d!=0) then begin
        vol = h;
      end else begin
        goto LCalcVolume;
      end;
    end else begin
      goto LCalcVolume;
    end;
  end;
  if (d!=0) then begin
    vol = vol*d;
  end;
  if (vol==0) then begin vol = blankval; end;
LCalcVolume:;
  return;
end;

function val CalcWeight(string unit,val volume)
begin
  val weight;
  record UnitVc UNr;

  weight = blankval;
  UNr.Code = unit;
  if (ReadFirstMain(UNr,1,true)) then begin
    if (UNr.VolWeighFact!=0) then begin
      weight = volume*UNr.VolWeighFact;
    end;
  end;
  if (weight==0) then begin weight = blankval; end;
  CalcWeight = weight;
  return;
end;

procedure CalcINFields(record INVc INp)
begin
  val v,d,w;
  
  v = INp.Volume;
  d = INp.Density;
  if ((INp.Width!=0) and (INp.Height!=0) and (INp.Depth!=0)) then begin
    CalcVolume(INp.Width,INp.Height,INp.Depth,v);
  end;
  if (INp.NetWeight==0) then begin
    INp.NetWeight = CalcWeight(INp.Unittext,v);
  end;
  if ((INp.NetWeight==0) and (v==0)) then begin
    d = INp.NetWeight/v;
  end;  
  INp.Volume = v;
  INp.Density = d;
  return;
end;

function Boolean INDClassWidthEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,INr);
    CalcINFields(INr);    
    PutWindowRecord(wn,INr);        
  end;
  INDClassWidthEFAfter = res;
  return;
end;

function Boolean INDClassHeightEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,INr);
    CalcINFields(INr);    
    PutWindowRecord(wn,INr);        
  end;
  INDClassHeightEFAfter = res;
  return;
end;

function Boolean INDClassDepthEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,INr);
    CalcINFields(INr);    
    PutWindowRecord(wn,INr);        
  end;
  INDClassDepthEFAfter = res;
  return;
end;

function Boolean INDClassDensityEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record INVc INr;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,INr);
    if ((INr.Volume!=0) and (INr.Density!=0)) then begin
      INr.NetWeight = INr.Volume*INr.Density;
    end;
    PutWindowRecord(wn,INr);        
  end;
  INDClassDensityEFAfter = res;
  return;
end;

function Boolean INDClassNetWeightEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record INVc INr;
  val d;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,INr);
    d = INr.Density;
    if ((INr.Volume!=0) and (INr.NetWeight!=0)) then begin
      d = INr.NetWeight/INr.Volume;
    end;
    INr.Density = d;
    PutWindowRecord(wn,INr);        
  end;
  INDClassNetWeightEFAfter = res;
  return;
end;

function Boolean INDClassVARMaskEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record INVc INr;
  record VARMasksVc VARMr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    VARMr.Code = INr.VARMask;
    if (ReadFirstMain(VARMr,1,true)) then begin
      INr.VARMask = VARMr.Masks;
      PutWindowRecord(wn,INr);        
    end;
  end;
  INDClassVARMaskEFAfter = res;
  return;
end;

function Boolean INDClassDisp1EFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record DIVc Dir;
  record INVc INr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    DIr.Code = INr.Disp1;
    if(readfirstmain(DIr,1,true))then begin
    	INr.Disp1Name = DIr.Name;
    	putwindowrecord(wn,INr);
    end else begin
    	INr.Disp1Name = "";
    	putwindowrecord(wn,INr);
    end;
    GetWindowRecord(wn,INr);
    if(INr.Disp1=="USER")then begin
    	INr.Disp2 = "SKLADU";
    	DIr.Code = INr.Disp2;
    	if(readfirstmain(DIr,1,true))then begin
    		INr.Disp2Name = DIr.Name;
    	end;
    	INr.Disp3 = "ìëíêéâë001";
    	DIr.Code = INr.Disp3;
    	if(readfirstmain(DIr,1,true))then begin
    		INr.Disp3Name = DIr.Name;
    	end;
    	putwindowrecord(wn,INr);
    end;
    
  end;
  INDClassDisp1EFAfter = res;
  return;
end;

function Boolean INDClassDisp2EFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record DIVc Dir;
  record INVc INr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    DIr.Code = INr.Disp2;
    if(readfirstmain(DIr,1,true))then begin
    	INr.Disp2Name = DIr.Name;
    	putwindowrecord(wn,INr);
    end else begin
    	INr.Disp2Name = "";
    	putwindowrecord(wn,INr);
    end;
  end;
  INDClassDisp2EFAfter = res;
  return;
end;

function Boolean INDClassDisp3EFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record DIVc Dir;
  record INVc INr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    DIr.Code = INr.Disp3;
    if(readfirstmain(DIr,1,true))then begin
    	INr.Disp3Name = DIr.Name;
    	putwindowrecord(wn,INr);
    end else begin
    	INr.Disp3Name = "";
    	putwindowrecord(wn,INr);
    end;
  end;
  INDClassDisp3EFAfter = res;
  return;
end;

function Boolean INDClassDisp4EFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record DIVc Dir;
  record INVc INr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    DIr.Code = INr.Disp4;
    if(readfirstmain(DIr,1,true))then begin
    	INr.Disp4Name = DIr.Name;
    	putwindowrecord(wn,INr);
    end else begin
    	INr.Disp4Name = "";
    	putwindowrecord(wn,INr);
    end;
  end;
  INDClassDisp4EFAfter = res;
  return;
end;

function Boolean INDClassDisp5EFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record DIVc Dir;
  record INVc INr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    DIr.Code = INr.Disp5;
    if(readfirstmain(DIr,1,true))then begin
    	INr.Disp5Name = DIr.Name;
    	putwindowrecord(wn,INr);
    end else begin
    	INr.Disp5Name = "";
    	putwindowrecord(wn,INr);
    end;
  end;
  INDClassDisp5EFAfter = res;
  return;
end;

function Boolean INDClassDisp6EFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record DIVc Dir;
  record INVc INr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,INr);
    DIr.Code = INr.Disp6;
    if(readfirstmain(DIr,1,true))then begin
    	INr.Disp6Name = DIr.Name;
    	putwindowrecord(wn,INr);
    end else begin
    	INr.Disp6Name = "";
    	putwindowrecord(wn,INr);
    end;
  end;
  INDClassDisp6EFAfter = res;
  return;
end;

global
function Boolean INDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Width": res = INDClassWidthEFAfter(wn,changed);
    case "Height": res = INDClassHeightEFAfter(wn,changed);
    case "Depth": res = INDClassDepthEFAfter(wn,changed);
    case "Density": res = INDClassDensityEFAfter(wn,changed);
    case "NetWeight": res = INDClassNetWeightEFAfter(wn,changed);
    case "VARMask": res = INDClassVARMaskEFAfter(wn,changed!=0);
    case "Disp1": res = INDClassDisp1EFAfter(wn,changed!=0);
    case "Disp2": res = INDClassDisp2EFAfter(wn,changed!=0);
    case "Disp3": res = INDClassDisp3EFAfter(wn,changed!=0);
    case "Disp4": res = INDClassDisp4EFAfter(wn,changed!=0);
    case "Disp5": res = INDClassDisp5EFAfter(wn,changed!=0);
    case "Disp6": res = INDClassDisp6EFAfter(wn,changed!=0);
  end;
  INDClassAfterEditField = res;
  return;
end;

global
function Boolean INDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;

  GetWindowRecord(wn,INr);
  SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0); // To work with NextRecord etc.
  INDClassBeforeEditField = res;
  return;
end;

//special menus

global
procedure INStatusINDsm()
begin
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    wn = CurWindow;
    GetWindowRecord(wn,INr);
    RepSpec.Media = mtScreen;
    RepSpec.f1 = INr.Code;
    RepSpec.repname = "INInfoRn";
    RunReport(RepSpec,0);
  end else begin
    MessageBox(22099,"");
  end;
  return;
end;

global
procedure INStatusINLsm()
begin
  record INVc INr;
  record RcVc RepSpec;
  Integer wn,i;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    if (i==1) then begin
      RepSpec.f1 = INr.Code;
    end;
    i = i + 1;
  end;  
  if (nonblank(RepSpec.f1)) then begin
    RepSpec.f1 = RepSpec.f1 & ":";
  end;
  RepSpec.f1 = RepSpec.f1 & INr.Code;  
  RepSpec.Media = mtScreen;
  RepSpec.repname = "INInfoRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure INStatusINSsm()
begin
  record INVc INr;
  record RcVc RepSpec;
  Integer wn,i;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    if (i==1) then begin
      RepSpec.f1 = INr.Code;
    end;
    i = i + 1;
  end;  
  if (nonblank(RepSpec.f1)) then begin
    RepSpec.f1 = RepSpec.f1 & ":";
  end;
  RepSpec.f1 = RepSpec.f1 & INr.Code;  
  RepSpec.Media = mtScreen;
  RepSpec.repname = "INInfoRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure PIFromINDsm()
begin
  record INVc INr;
  record PIVc PIr;
  row PIVc PIrw;
  row INVc INrw;
  Integer wn,nwn;
  Integer i,rwcnt,pi;
  
  wn = CurWindow;
  GetWindowRecord(wn,INr);
  RecordNew(PIr);
  
  PIr.ItemCode = INr.Code;
  PIr.Comment = INr.Name;
  PIr.PurPrice = INr.InPrice;
  PIr.PIFactor = blankval;
  PIr.NormPOQty = 1;
  PIr.MinPOQty = 1;
  rwcnt = MatRowCnt(INr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INr,i,INrw);
    if (blank(INrw.LangCode)) then begin
      PIrw.Text = INrw.Text;
      MatRowPut(PIr,pi,PIrw);
      pi = pi + 1;
    end;
  end;
  nwn = OpenWindow("PIDClass",1,0,"","",PIr);
//      EFGoto(nwn,oldfn,true);
  return;
end;

global
procedure RecFromINDsm()
begin
  record INVc INr;
  record RecVc Recr;
  row RecVc Recrw;
  Integer wn,nwn,wnst;
  Integer i,rwcnt;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,INr);
  RecordNew(Recr);
  Recr.Code = INr.Code;
  if (ReadFirstMain(Recr,1,true)==false) then begin
    Recr.Code = INr.Code;
    Recr.Comment = INr.Name;
    Recr.NormProdQty = 1;
    Recr.StdBatch = 1;
    Recr.NumProd = 1;
    wnst = WindowState(wn);
    if (wnst==Rs_normal or wnst==Rs_update) then begin
      Recrw.Item = INr.Code;    
      Recrw.Comment = INr.Name;
      Recrw.ItemCost = INr.InPrice;    
      Recrw.OutQty = 1;
      Recrw.Unittext = INr.Unittext;
      MatRowPut(Recr,0,Recrw);
      RecSumup(Recr);        
    end;
    nwn = OpenWindow("RecDClass",1,0,"","",Recr);
    INr.Recepy = Recr.Code;
    PutWindowRecord(wn,INr);
  end;
  return;
end;

global
procedure INrsRn_INSm()
begin
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    wn = CurWindow;
    GetWindowRecord(wn,INr);
    ReportDefaults(RepSpec,"INrsRClass");  
    INrsRClassReportDef(RepSpec); 
    RepSpec.Media = mtScreen;
    RepSpec.f1 = INr.Code;
    RepSpec.repname = "INrsRn";
    RepSpec.flags[14] = 1;
    RepSpec.flags[20] = 1;
    RepSpec.ArtMode = 1;
    RunReport(RepSpec,0);
  end else begin
    MessageBox(22099,"");
  end;
  return;
end;

global
procedure INHistINLsm()
begin
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  if (ReadMarkedRecord(wn,INr)) then begin
    ReportDefaults(RepSpec,"INrsRClass"); 
    INrsRClassReportDef(RepSpec); 
    RepSpec.Media = mtScreen;
    RepSpec.f1 = INr.Code;
    RepSpec.repname = "INrsRn";
    RepSpec.flags[14] = 1;
    RepSpec.flags[20] = 1;
    RepSpec.ArtMode = 1;
    RunReport(RepSpec,0);
  end;
  return;
end;

global
procedure ItemStatusINLsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,false);
  if (ReadMarkedRecord(wn,INr)) then begin
    SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
  end;
  return;
end;

global
function Boolean INLClassSwitchRow(Integer wn,Integer rownr)
begin
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  INLClassSwitchRow = true;
  return;
end;

global
function Boolean INSClassSwitchRow(Integer wn,Integer rownr)
begin
  record INVc INr;
  val t,tproc,unitprdisc;
  string 20 location;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      FindMotherWindowLocation(wn,location,td);
      SendArtStat(INr.Code,location,INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  INSClassSwitchRow = true;
  return;
end;

global
function Boolean IN2SClassSwitchRow(Integer wn,Integer rownr)
begin
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  IN2SClassSwitchRow = true;
  return;
end;

global
function Boolean IN3SClassSwitchRow(Integer wn,Integer rownr)
begin
  record INVc INr;
  val t,tproc,unitprdisc;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,INr)) then begin
      SendArtStat(INr.Code,"",INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  IN3SClassSwitchRow = true;
  return;
end;

global
function Boolean ForSaleINSClassSwitchRow(Integer wn,Integer rownr)
begin
  INSClassSwitchRow(wn,rownr);
  ForSaleINSClassSwitchRow = true;
  return;
end;

global
function Boolean ForSaleIN2SClassSwitchRow(Integer wn,Integer rownr)
begin
  INSClassSwitchRow(wn,rownr);
  ForSaleIN2SClassSwitchRow = true;
  return;
end;

global
function Boolean ForSaleIN3SClassSwitchRow(Integer wn,Integer rownr)
begin
  INSClassSwitchRow(wn,rownr);
  ForSaleIN3SClassSwitchRow = true;
  return;
end;

global
function Boolean INDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record ItemSettingBlock ItemRec;
  record INVc INr;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    switch (fieldname) begin
      case "Code": res = false;
      case "UPrice1":
        BlockLoad(ItemRec);
        if (ItemRec.NoBasePriceChange!=0) then begin res = false; end;
      case "WeighedAvPrice":
        if (UserCanAction("AllowINWeighedAvChange",true)==false) then begin 
          res = false;
        end;
      case "WeighedAvPriceB2":
        if (UserCanAction("AllowINWeighedAvChange",true)==false) then begin 
          res = false;
        end;
      case "CostPerc":
        if (UserCanAction("AllowINCostModelChange",true)==false) then begin
          res = false;
        end;
    end;
  end;
  // Edit Start ---------------------------------------------- Edit Start
	//Thursday, 7 December 2017 18:30:08
	
  getwindowrecord(wn,INr);
  switch (fieldname) begin
  	case"Disp2":if(blank(INr.Disp1))then begin res = false; end;
  	case"Disp3":if(blank(INr.Disp2) or INr.Disp2=="SERS")then begin res = false; end;
  	case"Disp4":if(blank(INr.Disp3) or INr.Disp2=="SERS")then begin res = false; end;
  	case"Disp5":if(blank(INr.Disp4) or INr.Disp2=="SERS")then begin res = false; end;
  	case"Disp6":if(blank(INr.Disp5) or INr.Disp2=="SERS")then begin res = false; end;
  end;
	
	// Edit End ---------------------------------------------- Edit End
	
  
  INDClassActiveEditField = res;
  return;
end;

global
function Boolean INDClassSerNrfButtonAction(Integer wn,Integer value)
begin        
  Boolean res;
  record INVc INr;  
  record ItemStatusVc ISr;

  if (UserCanAction("ChangingINType",(IsStandardProduct and SingleUserMode) or WindowState(wn)==Rs_insert)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"ChangingINType"));
    goto LINDClassSerNrfButtonAction;
  end;
  GetWindowRecord(wn,INr);
  if (INr.ItemType!=kItemTypeStocked) then begin
    MessageBox(21443,"");
    goto LINDClassSerNrfButtonAction;
  end;
  switch (WindowState(wn)) begin
    case Rs_normal:
      goto LButtonActionSerNrfRs_normal;
    case Rs_update:
LButtonActionSerNrfRs_normal:;    
      switch (value) begin
        case 0:
          switch (INr.SerNrf) begin
            case 1:
              FindStockValue(INr.Code,"",ISr);
              if (ISr.Instock!=0) then begin
                MessageBox(21442,"");
                goto LINDClassSerNrfButtonAction;
              end;                          
            case 2:
              FindStockValue(INr.Code,"",ISr);
              if (ISr.Instock!=0) then begin
                MessageBox(21442,"");
                goto LINDClassSerNrfButtonAction;
              end;                          
          end;
        case 1:
          switch (INr.ItemType) begin
            case 0:
              FindStockValue(INr.Code,"",ISr);
              if (ISr.Instock!=0) then begin
                MessageBox(21442,"");
                goto LINDClassSerNrfButtonAction;
              end;                          
            case 2:
              FindStockValue(INr.Code,"",ISr);
              if (ISr.Instock!=0) then begin
                MessageBox(21442,"");
                goto LINDClassSerNrfButtonAction;
              end;                          
          end;
        case 2:
          switch (INr.ItemType) begin
            case 0:
              FindStockValue(INr.Code,"",ISr);
              if (ISr.Instock!=0) then begin
                MessageBox(21442,"");
                goto LINDClassSerNrfButtonAction;
              end;                          
            case 2:
              FindStockValue(INr.Code,"",ISr);
              if (ISr.Instock!=0) then begin
                MessageBox(21442,"");
                goto LINDClassSerNrfButtonAction;
              end;                          
          end;
      end;
  end;
  res = true;
LINDClassSerNrfButtonAction:;
  INDClassSerNrfButtonAction = res;  
  return;
end;

global
function Boolean INDClassItemTypeButtonAction(Integer wn,Integer value)
begin        
  record INVc INr;  
  record STVc STr;  
  Boolean res;
  record ItemStatusVc ISr;
  record ItemHistVc IHr;  

  if (UserCanAction("ChangingINType",(IsStandardProduct and SingleUserMode) or WindowState(wn)==Rs_insert)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"ChangingINType"));
    goto LINDClassItemTypeButtonAction;
  end;
  GetWindowRecord(wn,INr);
  switch (WindowState(wn)) begin
    case Rs_normal:
      goto LButtonActionRs_normal;
    case Rs_update:
LButtonActionRs_normal:;    
      switch (value) begin
        case kItemTypeService:
          goto LButtonActionkItemTypePlain;
        case kItemTypePlain:
LButtonActionkItemTypePlain:;
          switch (INr.ItemType) begin
            case kItemTypeStocked:
              FindStockValue(INr.Code,"",ISr);
              if (ISr.Instock!=0) then begin
                MessageBox(21440,"");
                goto LINDClassItemTypeButtonAction;
              end;                          
            case kItemTypeStructured:      
              MessageBox(21441,"");
              goto LINDClassItemTypeButtonAction;
          end;
        case kItemTypeStructured:      
          switch (INr.ItemType) begin
            case kItemTypeStocked:
              IHr.ArtCode = INr.Code;
              if (ReadFirstKey("ArtCode",IHr,1,true)) then begin
                MessageBox(21441,"");
                goto LINDClassItemTypeButtonAction;
              end;
            case kItemTypePlain:
              IHr.ArtCode = INr.Code;
              if (ReadFirstKey("ArtCode",IHr,1,true)) then begin
                MessageBox(21441,"");
                goto LINDClassItemTypeButtonAction;
              end;
            case kItemTypeService:
              IHr.ArtCode = INr.Code;
              if (ReadFirstKey("ArtCode",IHr,1,true)) then begin
                MessageBox(21441,"");
                goto LINDClassItemTypeButtonAction;
              end;
          end;
      end;
  end;
  res = true;
LINDClassItemTypeButtonAction:;
  INDClassItemTypeButtonAction = res;  
  return;
end;
  
global
function Boolean INDClassItemTypeButtonAfter(Integer wn,Boolean changedf)
begin        
  Boolean res;
  record INVc INr;  
  record STVc STr;  
  record ItemStatusVc ISr;

  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_insert) then begin goto LINDClassItemTypeButtonAfter; end;
  GetWindowRecord(wn,INr);
LINDClassItemTypeButtonAfter:;
  INDClassItemTypeButtonAfter = res;  
  return;
end;

global
function Boolean INDClassSerNrfButtonAfter(Integer wn,Boolean changedf)
begin        
  record INVc INr;  
  record STVc STr;  
  record ItemHistVc IHr;  
  Boolean res;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,INr);
/*  
  STr.ArtCode = INr.Code;
  if (ReadFirstMain(STr,1,true)) then begin
    MessageBox(1257,"");
    goto LINDClassSerNrfButtonAfter;
  end;
*/  
/*moved to rcheck  
  IHr.ArtCode = INr.Code;
  if (ReadFirstKey("ArtCode",IHr,1,true)) begin
    MessageBox(1257,"");
    goto LINDClassSerNrfButtonAfter;
  end;
*/  
LINDClassSerNrfButtonAfter:;
  INDClassSerNrfButtonAfter = res;  
  return;
end;

global
procedure INSearchLsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("SearchItemRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchItemRClass");
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchItemRn";
  RepSpec.critname = "SearchItemRClass";
  RepSpec.Media = 6;
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  return;
end;

global
function string 40 INDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record INVc INr;
  record ITVc ITr;
  Integer rownr;
  boolean sp;
  
  sp=false;
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DispGroups":
      GetWindowRecord(wn,INr);
      if (nonblank(INr.Group)) then begin
        ITr.Code = INr.Group;
        if (ReadFirstMain(ITr,1,true)) then begin
          if (nonblank(ITr.ClassType)) then begin
            sp = true;
          end;
        end;
      end;
      if (sp) then begin
        psname = "DIClassSClass";
      end else begin
        psname = "DISClass";
      end;
  end;
  INDClassSpecPasteName = psname;
  return;
end;

global
procedure INSearchSsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("SearchItemRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchItemRClass");
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchItemRn";
  RepSpec.critname = "SearchItemRClass";
  RepSpec.Media = 6;
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  return;
end;

global
procedure ArtStatIClassSL()
begin
  Integer wn;
  record RcVc RepSpec,curRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,curRepSpec);

  ReportDefaults(RepSpec,"INRClass");
  RepSpec.repname = "InvValRn";
  RepSpec.Media = mtScreen;
  RepSpec.f1 = curRepSpec.f1;
  RepSpec.f2 = curRepSpec.f6;
  RepSpec.ArtMode = 2;
  RepSpec.flags[14] = 1;
  RepSpec.flags[10] = 1;
  RunReport(RepSpec,0);
  return;
end;

global
procedure ArtStatIClassOS()
begin
  Integer wn;
  record RcVc RepSpec,curRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,curRepSpec);

  ReportDefaults(RepSpec,"OrderStockRClass");  
  OrderStockRClassRD(RepSpec);
  RepSpec.repname = "OrderStockRn";
  RepSpec.Media = mtScreen;
  RepSpec.LastAcc = curRepSpec.f1;
  RepSpec.f5 = curRepSpec.f6;
  RepSpec.flags[10] = 1;
  RepSpec.flags[15] = 2;
  RepSpec.ArtMode = 2;
  RepSpec.flags[4] = 0;
  RepSpec.flags[6] = 0;
  RepSpec.f7 = StringFromSet(433,kOrderTypeNormal);
  RunReport(RepSpec,0);
  return;
end;

global
procedure ArtStatIClassPOS()
begin
  Integer wn;
  record RcVc RepSpec,curRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,curRepSpec);

  ReportDefaults(RepSpec,"POOrdStockRClass");
  RepSpec.repname = "POOrdStockRn";
  RepSpec.Media = mtScreen;
  RepSpec.LastAcc = curRepSpec.f1;
  RepSpec.TransStr = curRepSpec.f6;
  RepSpec.flags[0] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[6] = 0;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[10] = 1;
  RepSpec.ArtMode = 2;
  RepSpec.f7 = StringFromSet(433,kOrderTypeNormal);
  RunReport(RepSpec,0);
  return;
end;

global
procedure LocItemStatDsm()
Begin
  record INVc INr;
  Record RcVc RepSpec;
  GetWindowRecord(CurWindow,INr);
  RepSpec.f1 = INr.Code;
  RepSpec.long1 = 6;
  RepSpec.flags[12] = 1;
  RepSpec.flags[15] = 1;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ItemLocationStatusRn";
  RunReport(RepSpec,0);
  return;
End;

global
function Boolean IN2SClassOnOKWindow(Integer wn)
begin  
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
    
  l = SelectedListLine(wn);
  subset = GetSelDI_IN2SClass(GetWindowSubset(wn),l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowExecute(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  IN2SClassOnOKWindow = true;
  return;
end;

global
function Boolean ForSaleIN2SClassOnOKWindow(Integer wn)
begin  
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
    
  l = SelectedListLine(wn);
  subset = GetSelDI_IN2SClass(GetWindowSubset(wn),l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowExecute(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  ForSaleIN2SClassOnOKWindow = true;
  return;
end;

global
procedure IN2SClassTop()
begin
  Integer wn;
  string 255 subset;
  LongInt l;
  Array string 255 adi;
  Integer i,acnt;
  
  wn = CurWindow;
  subset = UpWindDI_IN2SClass(GetWindowSubset(wn),0);
  subset = GetSelDI_IN2SClass(subset,l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowExecute(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  return;
end;

global
procedure IN2SClassBack()
begin
  Integer wn;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  LongInt l;
  
  wn = CurWindow;
  subset = UpWindDI_IN2SClass(GetWindowSubset(wn),1);
  subset = GetSelDI_IN2SClass(subset,l,adi,acnt);
  ClearStringList(wn);
//  IN2SClassOnOKWindowExecute(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  return;
end;

global
procedure AltItemINSsm()
begin
  Integer wn,mwn,i;
  record INVc INr;
  record AltINVc AltINr;
  
  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    i = i + 1;
  end;
  if (i==2) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    wn = OpenWindow("AltINSClass",0,mwn,INr.Code,"",AltINr);
  end else begin
    MessageBox(26210,"");
  end;
  
  return;
end;

global
procedure CrossItemINSsm()
begin
  Integer wn,mwn,i;
  record INVc INr;
  record CrossINVc CrossINr;
  
  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(INr,wn,i)) begin
    i = i + 1;
  end;
  if (i==2) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    wn = OpenWindow("CrossINSClass",0,mwn,INr.Code,"",CrossINr);
  end else begin
    MessageBox(26210,"");
  end;
  
  return;
end;

global
function Boolean INDClassPrimaryCostModelButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (UserCanAction("AllowINCostModelChange",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassPrimaryCostModelButtonAction = res;
  return;
end;

global
function Boolean INDClassQueuedCostModelButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (UserCanAction("AllowINCostModelChange",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassQueuedCostModelButtonAction = res;
  return;
end;

global
function Boolean INDClassFIFOPerSerialNrButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (UserCanAction("AllowINCostModelChange",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassFIFOPerSerialNrButtonAction = res;
  return;
end;

global
function Boolean INDClassFIFOPerLocationButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (UserCanAction("AllowINCostModelChange",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassFIFOPerLocationButtonAction = res;
  return;
end;

global
function Boolean INDClassWAPerLocationButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = true;
  if (UserCanAction("AllowINCostModelChange",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowINCostModelChange"));
    res = false;
  end;
  
  INDClassWAPerLocationButtonAction = res;
  return;
end;

global
procedure ItemStatusAltINDsm()
begin
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,INr);
  RepSpec.Media = mtScreen;
  RepSpec.f1 = INr.Code;
  RepSpec.repname = "AlternativeINInfoRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure ItemStatusAltINLsm()
begin
  record INVc INr;
  record RcVc RepSpec;
  Integer wn;
  wn = CurWindow;
  if (ReadMarkedRecord(wn,INr)) then begin
    if (nonblank(INr.AlternativeCode)) then begin
      RepSpec.Media = mtScreen;
      RepSpec.f1 = INr.Code;
      RepSpec.repname = "AlternativeINInfoRn";
      RunReport(RepSpec,0);
    end else begin
      MessageBox(1058," Alternative Code");
    end;
  end;
  return;
end;

procedure INDCLass_BIChart(Integer wn,record INVc INr)
begin
  Integer i;
  val maxv;
  Array val vsales;
  Array Integer vmonth;

  ChartBegin(wn,"$INDCLass_BIChart",kChartTypeColumn,kChartLegendTypeNone,0,-1);
  ChartXAxis(0,12.5,UsetStr(21371));
  threadremote.INDCLass_BIChart_Tool(INr,maxv,vsales,vmonth);
  ChartYAxis(0,maxv,UsetStr(21370));  

  ChartDataSeriesBegin("INDCLass_BIChartSales");
  for (i=1;i<=12;i=i+1) begin
    ChartXAxisLabel(i,USetStr(2870+vmonth[i]));
    ChartDatum(vsales[i],"");  
  end;
  EndChartDataSeries;
  EndChart;
  return;
end;

global
function Boolean INDCLassOnOpenWindow(Integer wn)
begin
  record INVc INr;

  GetWindowRecord(wn,INr);
  INDCLass_BIChart(wn,INr);
  INDCLassOnOpenWindow = false;
  return;
end;

global
procedure INDClassOnWindowRecordChange(Integer wn)
begin
  record INVc INr;

  GetWindowRecord(wn,INr);
  INDCLass_BIChart(wn,INr);
  return;
end;


global
procedure INDCLassBarcodeData(Integer wn,string bcdata)
begin
  record INVc INr;

  DeselectWindow(wn,false);
  if (WindowState(wn)>2) then begin goto LINDCLassBarcodeData; end;//Rs_insert,Rs_update,Rs_normal

  WindowFieldGoto(wn,INr,-1,"BarCode",true);
  GetWindowRecord(wn,INr);
  INr.BarCode = bcdata;
  PutWindowRecord(wn,INr);

LINDCLassBarcodeData:;
  SelectWindow(wn);

  return;
end;

global
procedure LocationClassificationSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record UserVc Userr;
  record LocationVc Locationr;
  Boolean testf;
  string 200 classif;
  
    Userr.Code = CurrentUser;
    if (ReadFirstMain(Userr,1,true) and NonBlank(Userr.Location)) then begin
      Locationr.Code = Userr.Location;
      if (ReadFirstMain(Locationr,1,true) and NonBlank(Locationr.Classification)) then begin
        classif = Locationr.Classification;
        Locationr.Code = "";
        while (LoopMain(Locationr,1,true)) begin
          testf = true;
          if (classif!=Locationr.Classification) then begin testf = false; end;
          if (testf) then begin 
            astr[acnt] = Left(Locationr.Code & "    ",14);
            astr[acnt] = astr[acnt] & Locationr.Name;
            acnt = acnt + 1;
          end;
        end;
      end;
    end; 
 
  RETURN;
END;



global //Edit***************************Sasha2,14:20 14.12.2015 {
function Boolean LocationClassificationSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  LocationClassificationSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  LocationClassificationSClassOnOpenWindow = false;
  return;
end; //Edit***************************Sasha2,14:20 14.12.2015 }


global //Edit***************************Sasha2,14:51 14.12.2015 {
function Boolean LocationClassificationSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  LocationClassificationSClassOnOKWindow = false;
  return;
end; //Edit***************************Sasha2,14:51 14.12.2015 }

//Edit***************************Sasha2,13:21 14.12.2015 {
global
function Boolean LocationSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  record UserVc Userr;
  record LocationVc Locationr;
  
    mwn = MotherWindow(wn);
    Userr.Code = CurrentUser;
    if (ReadFirstMain(Userr,1,true) and NonBlank(Userr.Location)) then begin
      Locationr.Code = Userr.Location;
      if (ReadFirstMain(Locationr,1,true) and NonBlank(Locationr.Classification)) then begin
        CloseWindow(wn);
        OpenPasteWindow(mwn,"LocationClassificationSClass","");
      end;   
    end;
    
  LocationSClassOnOpenWindow = false;
  return;
end; //Edit***************************Sasha2,13:21 14.12.2015 ]


global
function Boolean INUsersSClassOnOpenWindow(Integer wn)
begin
  
  setwindowsubset(wn,"USER");
  
  INUsersSClassOnOpenWindow = false;
  return;
end;// Edit ************************** Wednesday, 19 July 2017 14:53:36

global
function Boolean INEnginerSClassOnOpenWindow(Integer wn)
begin
  
  setwindowsubset(wn,"SERV");
  
  INEnginerSClassOnOpenWindow = false;
  return;
end;// Edit ************************** Wednesday, 19 July 2017 14:53:36

global
function Boolean MyDISClassOnOpenWindow(Integer wn)
begin
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt,mwn;
  record INVc INr;
  
  mwn = motherwindow(wn);
  getwindowrecord(mwn,INr);
  switch (WindowActiveField(mwn)) begin
    case "Disp1": subset = "Disp1";
    case "Disp2": subset = INr.Disp1;
    case "Disp3": subset = INr.Disp2;
    case "Disp4": subset = INr.Disp3;
    case "Disp5": subset = INr.Disp4;
    case "Disp6": subset = INr.Disp5;
    case "Disp7": subset = INr.Disp6;
    case "Disp8": subset = INr.Disp7;
  end;
  if(blank(subset))then begin
  	subset = "NO";
  end;
  setwindowsubset(wn,subset);
  
  MyDISClassOnOpenWindow = true;
  return;
end;


global
function Boolean DISClassOnOpenWindow(Integer wn)
begin
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt,mwn;
  
  subset = "DISP4";
  setwindowsubset(wn,subset);
  
  DISClassOnOpenWindow = true;
  return;
end;

global
function Boolean DI2SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,20);
  DI2SClassOnOKWindow = false;
  return;
end;

global
function Boolean DI2SClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Array string 255 astr2;
  Array string 255 astr3;
  Array string 255 astr4;
  Integer i,mwn;
  record RcVc RepSpec;
  record DIVc DIr;
  
  
	mwn = MotherWindow(wn);
	GetWindowRecord(mwn,RepSpec);
		
	DI2SClassArrayOnOpen(RepSpec.f9,astr,astr2,astr3);
	
    for (i=0;i<astr.length;i=i+1) begin
      AddListRow(wn,"PDIDL",1,astr[i],0);
      AddListData(wn,"PDIDL","Name",astr[i]);
      //AddListData(wn,"PDIDL","Code",astr2[i]);
      //AddListData(wn,"PDIDL","CType",astr3[i]);
    end;
 
  DI2SClassOnOpenWindow = false;
  return;
end;




global updating procedure DeleteThisINDsm()
begin
	record INVc INr;
	integer wn;
	
	wn = curwindow;
	getwindowrecord(wn,INr);
	CloseWindow(wn);
	recorddelete(INr);

return;
end;