external function LongInt DateDiff(Date,Date);

SetLangMode(LangRussian,"RUS",0);

procedure MySortStringArray(var array string astr,integer cnt)
begin
	integer i,j;
	string 100 tmp1,tmp2;
	
	if(cnt>1)then begin
		for(j=0;j<cnt;j=j+1)begin
			for(i=0;i<cnt-1;i=i+1)begin
				if(uppercase(astr[i])>uppercase(astr[i+1]))then begin
					tmp1 = astr[i];
					tmp2 = astr[i+1];
					astr[i] = tmp2;
					astr[i+1] = tmp1;
				end;
			end;
		end;
	end;
		

return;
end;

procedure MySortLngIntArray(var array longint astr,integer cnt)
begin
	integer i,j;
	string 100 tmp1,tmp2;
	
	if(cnt>1)then begin
		for(j=0;j<cnt;j=j+1)begin
			for(i=0;i<cnt-1;i=i+1)begin
				if(uppercase(astr[i])>uppercase(astr[i+1]))then begin
					tmp1 = astr[i];
					tmp2 = astr[i+1];
					astr[i] = tmp2;
					astr[i+1] = tmp1;
				end;
			end;
		end;
	end;
		

return;
end;


procedure PrintHeader(record RcVc RepSpec)
begin
	
	Header(1,"test0",0);
	Header(1,"test1",1);

	endheader;
return;
end;

procedure FindPhoneDomain(record RcVc RepSpec,string tphone,string cucude, var vector boolean vPhoneExist,var vector string vCuDomain,var vector string vUTMSource,var vector string vUTMCampaign,var vector string vUTMTerm)
begin
	record BinotelCallEndVc BCEr;
	boolean TrHsph;
	
	if(RepSpec.flags[0]>0)then begin
		if(nonblank(tphone))then begin
			if(vPhoneExist[tphone]==false)then begin
				vPhoneExist[tphone] = true;
				resetloop(BCEr);
				BCEr.externalNumber = tphone;
				TrHsph = true;
				while(loopbackkey("externalNumber",BCEr,1,TrHsph))begin
					if(BCEr.externalNumber!=tphone)then begin TrHsph=false; end;
			
					if(TrHsph)then begin
						if(nonblank(BCEr.CTdomain))then begin
							vCuDomain[cucude] = BCEr.CTdomain;
						end;
						if(nonblank(BCEr.gCDdomain))then begin
							vCuDomain[cucude] = BCEr.gCDdomain;
						end;
						if(nonblank(BCEr.CTutmsource))then begin
							vUTMSource[cucude] = BCEr.CTutmsource;
						end;
						if(nonblank(BCEr.gCDutm_source))then begin
							vUTMSource[cucude] = BCEr.gCDutm_source;
						end;
					
						if(nonblank(BCEr.CTutmcampaign))then begin
							vUTMCampaign[cucude] = BCEr.CTutmcampaign;
						end;
						if(nonblank(BCEr.gCDutm_campaign))then begin
							vUTMCampaign[cucude] = BCEr.gCDutm_campaign;
						end;
					
						if(nonblank(BCEr.CTutmterm))then begin
							vUTMTerm[cucude] = BCEr.CTutmterm;
						end;
						if(nonblank(BCEr.CTutmterm))then begin
							vUTMTerm[cucude] = BCEr.gCDutm_term;
						end;
					
					
					
					end;
				end;
			end;
		end;
	end;
	
return;
end;

global procedure ServiceJobsRn(record RcVc RepSpec)
begin
	record INVc INr;
	record SVOVc SVOr;
	row SVOVc SVOrw;
	record IntSerBalVc SBr;
	vector string 50 vSerLoc,vSerInServ;
	vector boolean vSGExist,vLocExist,vSGLocExist;
	vector longint vSerSVONr;
	array string 50 aSerials,aSerials1;
	integer k,i,mtrw,j,mtrw1;
	record SalesGroupVc SGr;
	record LocationVc Locr;
	array integer tabs;
	boolean testfsg,testfloc,testfsvo;
	val dolg,totdolg,supertotdolg,totserv;
	record IPRsVc IPRsr,IPRs2r;
	date sd,ed;
	boolean TrHs,testf,filter,svoout,TrHsph;
	record IVVc IVr,credIVr,IV2r;
	record IPVc IPr,IP2r;
	vector val ivsum,svodolg,ivsumserv;
	vector boolean svoexist,vPhoneExist,vCuExist,ivexist;
	vector date paydate;
	array longint asvonr;
	row IVVc IVrw,IV2rw;
	row IPVc IPrw,IP2rw;
	string 100 enginer,tphone,tstr;
	val totrem, totpayrem, totnopayrem, totcan, totourcan, totnopayremqty,totpayremqty,totcanceled;
	val totdolgqty,totdolgsum;
	record WSVc WSr;
	record RLinkVc RLr;
	integer cnt,mtrw2;
	record CUVc CUr;
	record BinotelCallEndVc BCEr;
	vector string 100 vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm;
	boolean TrHs2,testf2;
	vector val vTrackSum;
	vector boolean vTrackFlag;
	array string 255 TrackSumKey;
	integer TrackCnt;
	
	
	tabs[0] = 0;
	tabs[1] = 40;
	tabs[2] = 80;
	tabs[3] = 100;
	tabs[4] = 150;
	tabs[5] = 180;
	tabs[6] = 240;
	tabs[7] = 280;
	tabs[8] = 340;
	StartReportJob("Выполненые ремонты");
		PrintHeader(RepSpec);
		
		sd = RepSpec.sStartDate;
		ed = RepSpec.sEndDate;

		IPRsr.TransDate = sd;
		TrHs = true;
		while(loopkey("TransDate",IPRsr,1,TrHs))begin
			if(IPRsr.TransDate>ed)then begin TrHs = false; end;

			if(TrHs)then begin
				switch(IPRsr.TransType)begin
					case 0:	IVr.SerNr = IPRsr.TransNr;
									if(readfirstmain(IVr,1,true))then begin
										if(svoexist[IVr.SVONr]==false)then begin
											asvonr[k] = IVr.SVONr;
											k = k+1;
											svoexist[IVr.SVONr] = true;
										end;
										if(IVr.InvType!=kInvoiceTypeCredit)then begin
											if(paydate[IVr.SVONr]<IVr.InvDate)then begin
												paydate[IVr.SVONr] = IVr.InvDate;
											end;
											ivsum[IVr.SVONr] = ivsum[IVr.SVONr] + IVr.Sum4;
											mtrw = matrowcnt(IVr);
											For(i=0;i<mtrw;i=i+1) begin
												matrowget(IVr,i,IVrw);
												if(IVrw.stp==kInvoiceRowTypePrepayment)then begin
													ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IVrw.Sum;
												end;
											end; 
										end else begin
											ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IVr.Sum4;
										end;
									end;
					case 1:	IPr.SerNr = IPRsr.TransNr;
									if(readfirstmain(IPr,1,true))then begin
										mtrw = matrowcnt(IPr);
										For(i=0;i<mtrw;i=i+1) begin
	  									matrowget(IPr,i,IPrw);
	  									if(IPrw.InvoiceNr>0 and IPrw.InvoiceNr==IPRsr.IVNr)then begin
	  										IVr.SerNr = IPrw.InvoiceNr;
	  										if(readfirstmain(IVr,1,true))then begin
	  											if(svoexist[IVr.SVONr]==false)then begin
														asvonr[k] = IVr.SVONr;
														k = k+1;
														svoexist[IVr.SVONr] = true;
													end;
													
													if(IVr.InvDate<sd)then begin
														if(ivexist[IVr.SerNr]==false)then begin
															ivexist[IVr.SerNr] = true;
															IPRs2r.IVNr = IVr.SerNr;
															TrHs2 = true;
															while(loopkey("IVKey",IPRs2r,1,TrHs2)) begin
																testf2 = true;
																if(IPRs2r.IVNr!=IVr.SerNr)then begin TrHs2 = false; testf2 = false; end;
																if(IPRs2r.TransDate>=sd)then begin testf2 = false; end;
																if(testf2)then begin
																	switch(IPRs2r.TransType)begin
																		case 0:	IV2r.SerNr = IPRs2r.TransNr;
																						if(readfirstmain(IV2r,1,true))then begin
																							if(IV2r.InvType!=kInvoiceTypeCredit)then begin
																								if(paydate[IV2r.SVONr]<IV2r.InvDate)then begin
																									paydate[IV2r.SVONr] = IV2r.InvDate;
																								end;
																								ivsum[IV2r.SVONr] = ivsum[IV2r.SVONr] + IV2r.Sum4;
																								mtrw2 = matrowcnt(IV2r);
																								For(j=0;j<mtrw2;j=j+1) begin
																									matrowget(IV2r,j,IV2rw);
																									if(IV2rw.stp==kInvoiceRowTypePrepayment)then begin
																										ivsum[IV2r.SVONr] = ivsum[IV2r.SVONr] - IV2rw.Sum;
																									end;
																								end; 
																							end else begin
																								ivsum[IV2r.SVONr] = ivsum[IV2r.SVONr] - IV2r.Sum4;
																							end;
																						end;
																		case 1:	IP2r.SerNr = IPRs2r.TransNr;
																						if(readfirstmain(IP2r,1,true))then begin
																							mtrw = matrowcnt(IP2r);
																							For(j=0;j<mtrw2;j=j+1) begin
																								matrowget(IP2r,j,IP2rw);
																								if(IP2rw.InvoiceNr>0 and IP2rw.InvoiceNr==IPRs2r.IVNr)then begin
																									IVr.SerNr = IPrw.InvoiceNr;
																									if(readfirstmain(IVr,1,true))then begin
																										ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IPrw.InvVal;
																										if(paydate[IVr.SVONr]<IPr.TransDate)then begin
																											paydate[IVr.SVONr] = IPr.TransDate;
																										end;
																									end;
																								end;
																							end;
																						end;
																	end;
																end;
															end; 
															resetloop(IPRs2r);
															/*ivsum[IVr.SVONr] = ivsum[IVr.SVONr] + IPrw.InvVal;
															mtrw1 = matrowcnt(IVr);
															For(j=0;j<mtrw;j=j+1) begin
																matrowget(IVr,j,IVrw);
																if(IVrw.stp==kInvoiceRowTypePrepayment)then begin
																	ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IVrw.Sum;
																end;
															end;*/
														end;
													end;
	  											ivsum[IVr.SVONr] = ivsum[IVr.SVONr] - IPrw.InvVal;
	  											if(paydate[IVr.SVONr]<IPr.TransDate)then begin
														paydate[IVr.SVONr] = IPr.TransDate;
													end;
	  										end;
	  									end;
										end; 
									end;
				end;
			end;
		end;
		
		MySortLngIntArray(asvonr,k);
		
		startformat(15);
			outstring(tabs[0],0,"Заказ",false);
			outstring(tabs[1],0,"Дата",false);
			outstring(tabs[2],0,"Кол-во",false);
			outstring(tabs[3],0,"Выдано за деньги",false);
			outstring(tabs[4],0,"Отказ",false);
			outstring(tabs[5],0,"Отказ по нашей вине",false);
			outstring(tabs[6],0,"Сумма по вып. рем.",false);
			outstring(tabs[7],0,"Мастер",false);
			outstring(tabs[8],0,"Статус",false);
			//outstring(tabs[7],0,SVOr.StatusText,false);
		endformat;
		
		For(i=0;i<k;i=i+1) begin
			SVOr.SerNr = asvonr[i];
			readfirstmain(SVOr,1,true);
			if(SVOr.WSCost!=0 and ivsum[asvonr[i]]<=0)then begin
					
				svoout = false;
				IVr.SVONr = SVOr.SerNr;
				TrHs = true;
				while(loopkey("SVONr",IVr,1,TrHs))begin	
					testf = true;
					if(IVr.SVONr!=SVOr.SerNr)then begin TrHs = false; testf = false; end;
					if(IVr.OKFlag==0)then begin testf = false; end;
					
					if(testf)then begin
						mtrw = matrowcnt(IVr);
						For(j=0;j<mtrw;j=j+1) begin
	  					matrowget(IVr,j,IVrw);
	  					if(IVrw.stp==kInvoiceRowTypeNormal)then begin
	  						if(nonblank(IVrw.ArtCode))then begin
	  							INr.Code = IVrw.ArtCode;
	  							if(readfirstmain(INr,1,true))then begin
	  								if(INr.ItemType==3 or INr.ItemType==0)then begin
	  									filter = true;
	  									enginer = "";
	  									
	  									cnt=1;
											while(ReadRecordLink(IVr,cnt,WSr,RLr)) begin
												if(nonblank(WSr.EMCode))then begin
													If(WSr.EMCode!=IVr.SalesMan) then begin
														IVr.SalesMan = WSr.EMCode;
													end; 
												end;
												cnt = cnt+1;
											end;
	  									
	  									if(IVr.SalesMan==SVOr.CustomField7)then begin
												enginer = SVOr.ServiceManager;
											end else begin
												enginer = IVr.SalesMan;
											end;
	  									
	  									if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin filter = false; end;
											if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
											if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin filter = false; end;
	  									
	  									if(filter)then begin
	  										svoout = true;
												startformat(15);
													outstring(tabs[2],0,IVrw.Spec,false);
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														outstring(tabs[6],0,IVrw.Sum,false);
													end else begin
														outstring(tabs[6],0,-IVrw.Sum,false);
													end;
													if(IVr.SalesMan==SVOr.CustomField7)then begin
														outstring(tabs[7],0,SVOr.ServiceManager,false);
													end else begin
														outstring(tabs[7],0,IVr.SalesMan,false);
													end;
													
													if(vCuExist[SVOr.CustCode]==false)then begin
														vCuExist[SVOr.CustCode] = true;
														CUr.Code = SVOr.CustCode;
														
														if(readfirstmain(CUr,1,true))then begin
															tphone = CUr.Phone;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
															tphone = CUr.Mobile;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
															tphone = CUr.AltPhone;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
														end;
													end;
												endformat;
												outstring(tabs[8],0,SVOr.StatusText,false);
												if(IVr.InvType!=kInvoiceTypeCredit)then begin
													ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] + IVrw.Sum;
													totserv = totserv + ivsumserv[asvonr[i]];
													supertotdolg = supertotdolg + IVrw.Sum;
												end else begin
													ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] - IVrw.Sum;
													totserv = totserv - ivsumserv[asvonr[i]];
													supertotdolg = supertotdolg - IVrw.Sum;
												end;
	  									end;
	  									
	  								end;
	  							end;
	  						end;
	  					end;
						end; 
					end;
				end;
				
				if(svoout)then begin
					totpayremqty = totpayremqty + 1;
					totrem = totrem + 1;
					startformat(15);
						outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
						outstring(tabs[1],0,SVOr.TransDate,false);
						outstring(tabs[2],0,1,false);
						outstring(tabs[3],0,1,false);
						outstring(tabs[4],0,blankval,false);
						outstring(tabs[5],0,blankval,false);
						//outstring(tabs[6],0,SVOr.WSCost,false);
					endformat;
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						if(nonblank(vCuDomain[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Звонок с домена",false);
								outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMSource[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Переход с ресурса",false);
								outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Кампания",false);
								outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Условия",false);
								outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
							endformat;
						end;
					end;
					
					
					black_divider(tabs[6],tabs[7]);
					startformat(15);
						outstring(tabs[0],0,"Итого по заказу",false);
						outstring(tabs[6],0,ivsumserv[asvonr[i]],false);
					endformat;
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						tstr = "Оплаченные:" & vUTMSource[SVOr.CustCode] & "->" & vCuDomain[SVOr.CustCode] & "("  & vUTMCampaign[SVOr.CustCode] & "|" & vUTMTerm[SVOr.CustCode] & ")";
						if(vTrackFlag[tstr])then begin
							vTrackSum[tstr] = vTrackSum[tstr] + ivsumserv[asvonr[i]];
						end else begin
							vTrackFlag[tstr] = true;
							vTrackSum[tstr] = ivsumserv[asvonr[i]];
							TrackSumKey[TrackCnt] = tstr;
							TrackCnt = TrackCnt +1;
						end;
					end;
					
					gray_divider(0,1);
				end;			
				resetloop(IVr);
			end;
		end; 
		black_divider(0,1);
		startformat(15);
			outstring(0,0,"Итого по оплаченным ремонтам",false);
			outstring(400,0,supertotdolg,false);
		endformat;
		totpayrem = supertotdolg;
		
		supertotdolg = blankval;
		black_divider(0,1);
		startformat(15);
			outstring(0,0,"Неоплаченные заказы ",false);
		endformat;
		For(i=0;i<k;i=i+1) begin
			SVOr.SerNr = asvonr[i];
			readfirstmain(SVOr,1,true);
			
			if(SVOr.WSCost!=0 and ivsum[asvonr[i]]>0)then begin				
				svoout = false;
				IVr.SVONr = SVOr.SerNr;
				TrHs = true;
				while(loopkey("SVONr",IVr,1,TrHs))begin	
					testf = true;
					if(IVr.SVONr!=SVOr.SerNr)then begin TrHs = false; testf = false; end;
					if(IVr.OKFlag==0)then begin testf = false; end;
					if(nonblankdate(SVOr.RegDate))then begin testf = false; end;
					
					if(testf)then begin
						mtrw = matrowcnt(IVr);
						For(j=0;j<mtrw;j=j+1) begin
	  					matrowget(IVr,j,IVrw);
	  					if(IVrw.stp==kInvoiceRowTypeNormal)then begin
	  						if(nonblank(IVrw.ArtCode))then begin
	  							INr.Code = IVrw.ArtCode;
	  							if(readfirstmain(INr,1,true))then begin
	  								if(INr.ItemType==3 or INr.ItemType==0)then begin
	  									filter = true;
	  									enginer = "";
	  									if(IVr.SalesMan==SVOr.CustomField7)then begin
												enginer = SVOr.ServiceManager;
											end else begin
												enginer = IVr.SalesMan;
											end;
	  									
	  									if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin filter = false; end;
											if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
											if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin filter = false; end;
	  									
	  									if(filter)then begin
	  										svoout = true;
												startformat(15);
													outstring(tabs[2],0,IVrw.Spec,false);
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														outstring(tabs[6],0,IVrw.Sum,false);
													end else begin
														outstring(tabs[6],0,-IVrw.Sum,false);
													end;
													if(IVr.SalesMan==SVOr.CustomField7)then begin
														outstring(tabs[7],0,SVOr.ServiceManager,false);
													end else begin
														outstring(tabs[7],0,IVr.SalesMan,false);
													end;
													outstring(tabs[8],0,SVOr.StatusText,false);
													
													if(vCuExist[SVOr.CustCode]==false)then begin
														vCuExist[SVOr.CustCode] = true;
														CUr.Code = SVOr.CustCode;
														
														if(readfirstmain(CUr,1,true))then begin
															tphone = CUr.Phone;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
															tphone = CUr.Mobile;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
															tphone = CUr.AltPhone;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
														end;
													end;
													
												endformat;
												
												if(IVr.InvType!=kInvoiceTypeCredit)then begin
													ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] + IVrw.Sum;
													totserv = totserv + ivsumserv[asvonr[i]];
													supertotdolg = supertotdolg + IVrw.Sum;
												end else begin
													ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] - IVrw.Sum;
													totserv = totserv - ivsumserv[asvonr[i]];
													supertotdolg = supertotdolg - IVrw.Sum;
												end;
												
	  									end;
	  									
	  								end;
	  							end;
	  						end;
	  					end;
						end; 
					end;
				end;
				
				if(svoout)then begin
					totnopayremqty = totnopayremqty + 1;
					totrem = totrem + 1;
					startformat(15);
						outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
						outstring(tabs[1],0,SVOr.TransDate,false);
						outstring(tabs[2],0,1,false);
						outstring(tabs[3],0,blankval,false);
						outstring(tabs[4],0,blankval,false);
						outstring(tabs[5],0,blankval,false);
						//outstring(tabs[6],0,SVOr.WSCost,false);
					endformat;
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						if(nonblank(vCuDomain[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Звонок с домена",false);
								outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMSource[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Переход с ресурса",false);
								outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Кампания",false);
								outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Условия",false);
								outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
							endformat;
						end;
					end;
					black_divider(tabs[6],tabs[7]);
					startformat(15);
						outstring(tabs[0],0,"Итого по заказу",false);
						outstring(tabs[6],0,ivsumserv[asvonr[i]],false);
					endformat;
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						tstr = "Неоплаченные:" & vUTMSource[SVOr.CustCode] & "->" & vCuDomain[SVOr.CustCode] & "("  & vUTMCampaign[SVOr.CustCode] & "|" & vUTMTerm[SVOr.CustCode] & ")";
						if(vTrackFlag[tstr])then begin
							vTrackSum[tstr] = vTrackSum[tstr] + ivsumserv[asvonr[i]];
						end else begin
							vTrackFlag[tstr] = true;
							vTrackSum[tstr] = ivsumserv[asvonr[i]];
							TrackSumKey[TrackCnt] = tstr;
							TrackCnt = TrackCnt +1;
						end;
					end;
					gray_divider(0,1);
				end;			
				resetloop(IVr);
			end;
		end; 
		black_divider(0,1);
		startformat(15);
			outstring(0,0,"Итого по НЕ завершенным ремонтам",false);

			outstring(400,0,supertotdolg,false);
		endformat;
		
		totdolgsum = blankval;
		totdolgqty = blankval;
		black_divider(0,1);
		startformat(15);
			outstring(0,0,"Выданные в долг ремонты ",false);
		endformat;
		For(i=0;i<k;i=i+1) begin
			SVOr.SerNr = asvonr[i];
			readfirstmain(SVOr,1,true);
			
			if(SVOr.WSCost!=0 and ivsum[asvonr[i]]>0)then begin				
				svoout = false;
				IVr.SVONr = SVOr.SerNr;
				TrHs = true;
				while(loopkey("SVONr",IVr,1,TrHs))begin	
					testf = true;
					if(IVr.SVONr!=SVOr.SerNr)then begin TrHs = false; testf = false; end;
					if(IVr.OKFlag==0)then begin testf = false; end;
					if(blankdate(SVOr.RegDate))then begin testf = false; end;
					
					if(testf)then begin
						mtrw = matrowcnt(IVr);
						For(j=0;j<mtrw;j=j+1) begin
	  					matrowget(IVr,j,IVrw);
	  					if(IVrw.stp==kInvoiceRowTypeNormal)then begin
	  						if(nonblank(IVrw.ArtCode))then begin
	  							INr.Code = IVrw.ArtCode;
	  							if(readfirstmain(INr,1,true))then begin
	  								if(INr.ItemType==3 or INr.ItemType==0)then begin
	  									filter = true;
	  									enginer = "";
	  									if(IVr.SalesMan==SVOr.CustomField7)then begin
												enginer = SVOr.ServiceManager;
											end else begin
												enginer = IVr.SalesMan;
											end;
	  									
	  									if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin filter = false; end;
											if(nonblank(RepSpec.f3) and RepSpec.f3!=enginer)then begin filter = false; end;
											if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin filter = false; end;
	  									
	  									if(filter)then begin
	  										svoout = true;
												startformat(15);
													outstring(tabs[2],0,IVrw.Spec,false);
													if(IVr.InvType!=kInvoiceTypeCredit)then begin
														outstring(tabs[6],0,IVrw.Sum,false);
													end else begin
														outstring(tabs[6],0,-IVrw.Sum,false);
													end;
													if(IVr.SalesMan==SVOr.CustomField7)then begin
														outstring(tabs[7],0,SVOr.ServiceManager,false);
													end else begin
														outstring(tabs[7],0,IVr.SalesMan,false);
													end;
													outstring(tabs[8],0,SVOr.StatusText,false);
													
													if(vCuExist[SVOr.CustCode]==false)then begin
														vCuExist[SVOr.CustCode] = true;
														CUr.Code = SVOr.CustCode;
														
														if(readfirstmain(CUr,1,true))then begin
															tphone = CUr.Phone;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
															tphone = CUr.Mobile;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
															tphone = CUr.AltPhone;
															FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
														end;
													end;
													
												endformat;
												
												if(IVr.InvType!=kInvoiceTypeCredit)then begin
													ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] + IVrw.Sum;
													totserv = totserv + ivsumserv[asvonr[i]];
													totdolgsum = totdolgsum + IVrw.Sum;
												end else begin
													ivsumserv[asvonr[i]] = ivsumserv[asvonr[i]] - IVrw.Sum;
													totserv = totserv - ivsumserv[asvonr[i]];
													totdolgsum = totdolgsum - IVrw.Sum;
												end;
												
	  									end;
	  									
	  								end;
	  							end;
	  						end;
	  					end;
						end; 
					end;
				end;
				
				if(svoout)then begin
					totdolgqty = totdolgqty + 1;
					totrem = totrem + 1;
					startformat(15);
						outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
						outstring(tabs[1],0,SVOr.TransDate,false);
						outstring(tabs[2],0,1,false);
						outstring(tabs[3],0,blankval,false);
						outstring(tabs[4],0,blankval,false);
						outstring(tabs[5],0,blankval,false);
						//outstring(tabs[6],0,SVOr.WSCost,false);
					endformat;
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						if(nonblank(vCuDomain[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Звонок с домена",false);
								outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMSource[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Переход с ресурса",false);
								outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Кампания",false);
								outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
							endformat;
						end;
						if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
							startformat(15);
								outstring(tabs[0],0,"Условия",false);
								outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
							endformat;
						end;
					end;
					black_divider(tabs[6],tabs[7]);
					startformat(15);
						outstring(tabs[0],0,"Итого по заказу",false);
						outstring(tabs[6],0,ivsumserv[asvonr[i]],false);
					endformat;
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						tstr = "Вдолг:" & vUTMSource[SVOr.CustCode] & "->" & vCuDomain[SVOr.CustCode] & "("  & vUTMCampaign[SVOr.CustCode] & "|" & vUTMTerm[SVOr.CustCode] & ")";
						if(vTrackFlag[tstr])then begin
							vTrackSum[tstr] = vTrackSum[tstr] + ivsumserv[asvonr[i]];
						end else begin
							vTrackFlag[tstr] = true;
							vTrackSum[tstr] = ivsumserv[asvonr[i]];
							TrackSumKey[TrackCnt] = tstr;
							TrackCnt = TrackCnt +1;
						end;
					end;
					gray_divider(0,1);
				end;			
				resetloop(IVr);
			end;
		end; 
		black_divider(0,1);
		startformat(15);
			outstring(0,0,"Итого по ремонтам в долг",false);
			outstring(400,0,totdolgsum,false);
		endformat;
		
		
		black_divider(0,1);
		startformat(15);
			outstring(3,0,"Отмененные ремонты",false);

		endformat;
		resetloop(SVOr);
		SVOr.RegDate = sd;
		TrHs = true;
		while(loopkey("RegDate",SVOr,1,TrHs))begin
			testf = true;
			if(SVOr.RegDate<sd or SVOr.RegDate>ed)then begin TrHs = false; testf = false; end;
			
			if(nonblank(RepSpec.f1) and RepSpec.f1!=SVOr.SalesGroup)then begin testf = false; end;
			if(nonblank(RepSpec.f3) and RepSpec.f3!=SVOr.ServiceManager)then begin testf = false; end;
			if(nonblank(RepSpec.f4) and RepSpec.f4!=SVOr.CustomField7)then begin testf = false; end;
			
			if(testf)then begin
				if(SVOr.OrderStatus==6)then begin
					totcan = totcan + 1;
					startformat(15);
					outstring(tabs[0],"DblSVOVcSer",SVOr.InnerOrderNr,false);
					outstring(tabs[1],0,SVOr.TransDate,false);
					outstring(tabs[2],0,1,false);
					outstring(tabs[3],0,blankval,false);
					outstring(tabs[4],0,1,false);
					if(SVOr.RejectReason=="Не смог сделать")then begin
						totourcan = totourcan + 1;
						outstring(tabs[5],0,1,false);
					end else begin
						outstring(tabs[5],0,blankval,false);
						if(SVOr.RejectReason=="КЛИЕНТ НЕ ПРИШЕЛ")then begin
							totcanceled = totcanceled + 1;
						end;
					end;
					outstring(tabs[6],0,blankval,false);
					outstring(tabs[7],0,SVOr.RejectReason,false);
					outstring(tabs[8],0,SVOr.StatusText,false);
					if(vCuExist[SVOr.CustCode]==false)then begin
						vCuExist[SVOr.CustCode] = true;
						CUr.Code = SVOr.CustCode;
						if(readfirstmain(CUr,1,true))then begin
							tphone = CUr.Phone;
							FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
							tphone = CUr.Mobile;
							FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
							tphone = CUr.AltPhone;
							FindPhoneDomain(RepSpec,tphone,CUr.Code,vPhoneExist,vCuDomain,vUTMSource,vUTMCampaign,vUTMTerm);
						end;
					end;
				endformat;
				if(nonblank(vCuDomain[SVOr.CustCode]))then begin
					if(nonblank(vCuDomain[SVOr.CustCode]))then begin
						startformat(15);
							outstring(tabs[0],0,"Звонок с домена",false);
							outstring(tabs[2],0,vCuDomain[SVOr.CustCode],false);
						endformat;
					end;
					if(nonblank(vUTMSource[SVOr.CustCode]))then begin
						startformat(15);
							outstring(tabs[0],0,"Переход с ресурса",false);
							outstring(tabs[2],0,vUTMSource[SVOr.CustCode],false);
						endformat;
					end;
					if(nonblank(vUTMCampaign[SVOr.CustCode]))then begin
						startformat(15);
							outstring(tabs[0],0,"Кампания",false);
							outstring(tabs[2],0,vUTMCampaign[SVOr.CustCode],false);
						endformat;
					end;
					if(nonblank(vUTMTerm[SVOr.CustCode]))then begin
						startformat(15);
							outstring(tabs[0],0,"Условия",false);
							outstring(tabs[2],0,vUTMTerm[SVOr.CustCode],false);
						endformat;
					end;
					tstr = "Отмененные:" & vUTMSource[SVOr.CustCode] & "->" & vCuDomain[SVOr.CustCode] & "("  & vUTMCampaign[SVOr.CustCode] & "|" & vUTMTerm[SVOr.CustCode] & ")";
					if(vTrackFlag[tstr])then begin
						vTrackSum[tstr] = vTrackSum[tstr] + 1;
					end else begin
						vTrackFlag[tstr] = true;
						vTrackSum[tstr] = 1;
						TrackSumKey[TrackCnt] = tstr;
						TrackCnt = TrackCnt +1;
					end;
				end;
				end;
			end;
		end;
		
		
		black_divider(0,1);
		startformat(15);
			outstring(tabs[0],0,"Всего ремонтов",false);
			outstring(tabs[3],0,totrem,false);
		endformat;
		Gray_divider(0,300);
		startformat(15);
			outstring(tabs[0],0,"Всего оплаченных ремонтов",false);
			outstring(tabs[3],0,totpayremqty,false);
		endformat;
		startformat(15);
			outstring(tabs[0],0,"На сумму",false);
			outstring(tabs[3],0,totpayrem,false);
		endformat;
		Gray_divider(0,300);
		startformat(15);
			outstring(tabs[0],0,"Неоплаченных ремонтов",false);
			outstring(tabs[3],0,totnopayremqty,false);
		endformat;
		startformat(15);
			outstring(tabs[0],0,"На сумму",false);
			outstring(tabs[3],0,supertotdolg,false);
		endformat;
		Gray_divider(0,300);
		startformat(15);
			outstring(tabs[0],0,"Ремонтов в долг",false);
			outstring(tabs[3],0,totdolgqty,false);
		endformat;
		startformat(15);
			outstring(tabs[0],0,"На сумму",false);
			outstring(tabs[3],0,totdolgsum,false);
		endformat;
		Gray_divider(0,300);
		startformat(15);
			outstring(tabs[0],0,"Отмен",false);
			outstring(tabs[3],0,totcan,false);
		endformat;
		startformat(15);
			outstring(tabs[0],0,"Отмен по нашей вине",false);
			outstring(tabs[3],0,totourcan,false);
		endformat;	
		startformat(15);
			outstring(tabs[0],0,"Клиент не пришел",false);
			outstring(tabs[3],0,totcanceled,false);
		endformat;
		gray_divider(0,1);
		startformat(15);
			outstring(tabs[0],0,"Статистика Binotel:",false);
			outstring(tabs[6],0,"Сумма",false);
		endformat;
		MySortStringArray(TrackSumKey,TrackCnt);

		for(i=0;i<TrackCnt;i=i+1)begin
			startformat(15);
				outstring(tabs[0],0,TrackSumKey[i],false);
				outstring(tabs[6],0,vTrackSum[TrackSumKey[i]],false);
			endformat;
		end;
	endjob;

return;
end;


global procedure BinotelSimpleRepRn(record RcVc RepSpec)
begin
	record BinotelCallEndVc BCEr;
	record CUVc CUr;
	record SVOVc SVOr;
	array string 20 phones;
	vector string 50 vcustcode;
	vector boolean vphone,vdublicate;
	longint phi,svi;
	boolean TrHs;
	
	
	StartReportnoheaderJob("BinotelSimpleRepRn");
	
	while(loopmain(BCEr,1,true))begin
		if(nonblank(BCEr.gCDdomain) or nonblank(BCEr.CTdomain))then begin
			if(vphone[BCEr.externalNumber]==false)then begin
				vphone[BCEr.externalNumber] = true;
				CUr.Code = BCEr.externalNumber;
				if(blank(vcustcode[BCEr.externalNumber]))then begin
					if(readfirstmain(CUr,1,true))then begin
						vcustcode[BCEr.externalNumber] = CUr.Code;
					end else begin
						CUr.Phone = BCEr.externalNumber;
						if(readfirstkey("Phone",CUr,1,true))then begin
							vcustcode[BCEr.externalNumber] = CUr.Code;
						end else begin
							CUr.Mobile = BCEr.externalNumber;
							if(readfirstkey("Mobile",CUr,1,true))then begin
								vcustcode[BCEr.externalNumber] = CUr.Code;
							end else begin
								CUr.AltPhone = BCEr.externalNumber;
								if(readfirstkey("AltPhone",CUr,1,true))then begin
									vcustcode[BCEr.externalNumber] = CUr.Code;
								end;
							end;
						end;
					end;
				end;
				
			end;
			
			
			startformat(15);
				outstring(0,0,BCEr.externalNumber,false);
				outstring(100,0,vcustcode[BCEr.externalNumber],false);
				
				if(vdublicate[BCEr.externalNumber]==true)then begin
					outstring(150,0,"dublicate",false);
				end;
			endformat;
			
			if(vdublicate[BCEr.externalNumber]==false)then begin
				vdublicate[BCEr.externalNumber] = true;
				phi = phi + 1;
				vdublicate[BCEr.externalNumber]=true;
				if(nonblank(vcustcode[BCEr.externalNumber]))then begin
					SVOr.CustCode = vcustcode[BCEr.externalNumber];
					TrHs = true;
					while(loopkey("CustCode",SVOr,1,TrHs))begin
						if(SVOr.CustCode==vcustcode[BCEr.externalNumber])then begin
							if(SVOr.SerNr>90000)then begin
								startformat(15);
								outstring(200,"DblSVOVcSer",SVOr.InnerOrderNr,false);
								outstring(300,"DblSVOVc",SVOr.SerNr,false);
								endformat;
								svi = svi + 1;
							end;
						end else begin
							TrHs = false;
						end;
					end;
					resetloop(SVOr);
				end;
			end;
			
			
			
			
			
		end;
	end;
	startformat(15);
		outstring(0,0,"phi",false);
		outstring(100,0,phi,false);
	endformat;
	startformat(15);
		outstring(0,0,"svi",false);
		outstring(100,0,svi,false);
	endformat;
	
	endjob;
return;
end;