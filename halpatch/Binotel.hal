external function string 255 StrReplace(string,string,string);
external procedure UTCTimeToDate(LongInt,var Date,var Time);
external function boolean MySendWebRequest(string,integer,longint,boolean,string,string,string,string,boolean,area,var area,integer);
external procedure MySendAsyncWebRequest(string,integer,longint,boolean,string,string,string,string,area,string,integer);
external procedure FindUserMailboxName(string,var string,var string);
external procedure AlarmMessage(record ActVc,integer,string);

global webpublic updating procedure WebBinotelAPICallEnd()
begin
	area arequest,newarea,encodearea;
	string 255 tstr;
	longint lenth,i,lasti;
	json jobj;
	record BinotelCallEndVc BECr;
	row BinotelCallEndVc BECrw;
	string 255 node;
	time timestamp;
	date datestamp;
	area delim;
	boolean foundf;
	
	webgetpostdata(encodearea);
	writeareatofile(encodearea,"WebBinotelAPICallEnd.txt",0);
	logtext(0,"WebBinotelAPICallEnd1");
	tstr = "";
	lenth = getarealength(encodearea);
	For(i=0;i<lenth;i=i+1) begin
		if(getstringfromarea(arequest,i,1)=="=" or i==lenth-1)then begin
			tstr = urldecode(getstringfromarea(encodearea,lasti,i-lasti));
			tstr = StrReplace(tstr,"+&gt;+", " > ");
			tstr = StrReplace(tstr,"+", " ");
			tstr = StrReplace(tstr,"&apos;", "'");
			addtexttoarea(tstr,arequest);
		end;
	end;
	
	lenth = getarealength(arequest);
	tstr = "";
	lasti = 0;
	addtexttoarea("{\"",newarea);
	For(i=0;i<lenth;i=i+1) begin
	  if(getstringfromarea(arequest,i,1)=="&" or i==lenth-1)then begin
	  	tstr = urldecode(getstringfromarea(arequest,lasti,i-lasti));
	  	tstr = StrReplace(tstr,"=", "\":\"");
	  	tstr = StrReplace(tstr,"[", "(");
	  	tstr = StrReplace(tstr,"]", ")");
	  	tstr = StrReplace(tstr,"&", chr(13) & chr(10) & "\"");
	  	if(getstringfromarea(arequest,i,1)=="&")then begin
	  		tstr = tstr & "\",";
	  	end else begin
	  		tstr = tstr & "\"";
	  	end;
	  	addtexttoarea(tstr,newarea);
	  	lasti = i;
	  	tstr = "";
	  end;
	end; 
	addtexttoarea("}",newarea);
	
	addtexttoarea(chr(13) & chr(10) & "*********" & currenttime & "************" & chr(13) & chr(10),delim);
	writeareatofile(delim,"WebBinotelAPICallEnd_nrm.txt",1);
	writeareatofile(newarea,"WebBinotelAPICallEnd_nrm.txt",1);
	weboutstring("{\"status\":\"success\"}");
	jobj = parsejsonarea(newarea);
	
	recordnew(BECr);
	
	BECr.TransDate = currentdate;
	BECr.TransTime = currenttime;
	
	BECr.SerNr = NextSerNr("BinotelCallEndVc",currentdate,-1,false,"");
		
		node = "requestType";
		if(JSONNodeExists(jobj,node))then begin
			BECr.requestType = JSONGet(jobj,node);
		end;
		node = "callDetails(companyID)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.companyID = JSONGet(jobj,node);
		end;
		node = "callDetails(generalCallID)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.generalCallID = JSONGet(jobj,node);
		end;
		node = "callDetails(callID)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.callID = JSONGet(jobj,node);
		end;
		node = "callDetails(startTime)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.startTime = JSONGet(jobj,node);
			UTCTimeToDate(StringToLongInt(BECr.startTime),datestamp,timestamp);
			BECr.BTransDate = datestamp;
			BECr.BTransTime = timestamp;			
		end;
		node = "callDetails(callType)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.callType = JSONGet(jobj,node);
		end;
		node = "callDetails(internalNumber)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.internalNumber = JSONGet(jobj,node);
		end;
		node = "callDetails(internalAdditionalData)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.internalAdditionalData = JSONGet(jobj,node);
		end;
		node = "callDetails(externalNumber)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.externalNumber = JSONGet(jobj,node);
		end;
		node = "callDetails(srcNumber)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.srcNumber = JSONGet(jobj,node);
		end;
		node = "callDetails(customerData)(id)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.customerDataId = JSONGet(jobj,node);
		end;
		node = "callDetails(customerData)(name)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.customerDataName = JSONGet(jobj,node);
		end;
		node = "callDetails(employeeName)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.employeeName = JSONGet(jobj,node);
		end;
		node = "callDetails(employeeEmail)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.employeeEmail = JSONGet(jobj,node);
		end;
		
		foundf = true;
		For(i=0;i<20;i=i+1) begin
	  	if(foundf)then begin
	  		foundf = false;
	  		ClearRow(BECr,BECrw,0);
	  		node = "callDetails(dstNumbers)(" & i & ")(dstNumber)";
				if(JSONNodeExists(jobj,node))then begin
					BECrw.mdstNumber = JSONGet(jobj,node);
					foundf = true;
				end;
				node = "callDetails(dstNumbers)(" & i & ")(waitsec)";
				if(JSONNodeExists(jobj,node))then begin
					BECrw.mwaitsec = JSONGet(jobj,node);
					foundf = true;
				end;
				node = "callDetails(dstNumbers)(" & i & ")(billsec)";
				if(JSONNodeExists(jobj,node))then begin
					BECrw.mbillsec = JSONGet(jobj,node);
					foundf = true;
				end;
				node = "callDetails(dstNumbers)(" & i & ")(disposition)";
				if(JSONNodeExists(jobj,node))then begin
					BECrw.mdisposition = JSONGet(jobj,node);
					foundf = true;
				end;
				node = "callDetails(dstNumbers)(" & i & ")(employeeName)";
				if(JSONNodeExists(jobj,node))then begin
					BECrw.memployeeName = JSONGet(jobj,node);
					foundf = true;
				end;
				node = "callDetails(dstNumbers)(" & i & ")(employeeEmail)";
				if(JSONNodeExists(jobj,node))then begin
					BECrw.memployeeEmail = JSONGet(jobj,node);
					foundf = true;
				end;
				matrowput(BECr,i,BECrw);
	  	end;
		end; 
		
		
		
		
		node = "callDetails(waitsec)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.waitsec = JSONGet(jobj,node);
		end;
		node = "callDetails(billsec)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.billsec = JSONGet(jobj,node);
		end;
		node = "callDetails(disposition)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.disposition = JSONGet(jobj,node);
		end;
		node = "callDetails(isNewCall)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.isNewCall = JSONGet(jobj,node);
		end;
		node = "callDetails(did)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.did = JSONGet(jobj,node);
		end;
		node = "callDetails(didNumber)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.didNumber = JSONGet(jobj,node);
		end;
		node = "callDetails(didName)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.didName = JSONGet(jobj,node);
		end;
		
		
		node = "callDetails(callTrackingData)(id)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTid = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(gaClientId)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTgaClientId = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(firstVisitAt)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTfirstVisitAt = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(utm_source)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTutmsource = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(utm_medium)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTutmmedium = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(utm_campaign)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTutmcampaign = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(utm_content)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTutmcontent = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(utm_term)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTutmterm = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(ipAddress)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTipAddress = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(geoipCountry)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTgeoipCountry = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(geoipRegion)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTgeoipRegion = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(geoipCity)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTgeoipCity = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(geoipOrg)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTgeoipOrg = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(domain)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTdomain = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(gaTrackingId)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTgaTrackingId = JSONGet(jobj,node);
		end;
		node = "callDetails(callTrackingData)(timeSpentOnSiteBeforeMakeCall)";
		if(JSONNodeExists(jobj,node))then begin
			BECr.CTtimeSpentOnSiteBeforeMakeCall = JSONGet(jobj,node);
		end;
		
		
	recordstore(BECr,true);
	
return;
end;

global webpublic updating procedure WebBinotelAPIPush()
begin
	area arequest,newarea,encodearea;
	string 255 tstr,mailboxnr;
	longint lenth,i,lasti;
	json jobj;
	record BinotelCallPushVc BECr;
	string 255 node;
	time timestamp;
	date datestamp;
	string 255 str,recidstr;
	
	webgetpostdata(encodearea);
	writeareatofile(encodearea,"WebBinotelAPICallPush.txt",0);
	logtext(0,"WebBinotelAPICallPush");
	tstr = "";
	lenth = getarealength(encodearea);
	For(i=0;i<lenth;i=i+1) begin
		if(getstringfromarea(arequest,i,1)=="=" or i==lenth-1)then begin
			tstr = urldecode(getstringfromarea(encodearea,lasti,i-lasti));
			tstr = StrReplace(tstr,"+&gt;+", " > ");
			addtexttoarea(tstr,arequest);
		end;
	end;
	
	lenth = getarealength(arequest);
	tstr = "";
	lasti = 0;
	addtexttoarea("{\"",newarea);
	For(i=0;i<lenth;i=i+1) begin
	  if(getstringfromarea(arequest,i,1)=="&" or i==lenth-1)then begin
	  	tstr = urldecode(getstringfromarea(arequest,lasti,i-lasti));
	  	tstr = StrReplace(tstr,"=", "\":\"");
	  	tstr = StrReplace(tstr,"[", "(");
	  	tstr = StrReplace(tstr,"]", ")");
	  	tstr = StrReplace(tstr,"&","\"");
	  	if(getstringfromarea(arequest,i,1)=="&")then begin
	  		tstr = tstr & "\",";
	  	end else begin
	  		tstr = tstr & "\"";
	  	end;
	  	logtext(0,tstr);
	  	addtexttoarea(tstr,newarea);
	  	lasti = i;
	  	tstr = "";
	  end;
	end; 
	addtexttoarea("}",newarea);
	
	jobj = parsejsonarea(newarea);
	
	recordnew(BECr);
	
	BECr.TransDate = currentdate;
	BECr.TransTime = currenttime;
	
	BECr.SerNr = NextSerNr("BinotelCallPushVc",currentdate,-1,false,"");
		
		node = "requestType";
		if(JSONNodeExists(jobj,node))then begin
			BECr.requestType = JSONGet(jobj,node);
		end;
		node = "companyID";
		if(JSONNodeExists(jobj,node))then begin
			BECr.companyID = JSONGet(jobj,node);
		end;
		node = "generalCallID";
		if(JSONNodeExists(jobj,node))then begin
			BECr.generalCallID = JSONGet(jobj,node);
		end;
		node = "callID";
		if(JSONNodeExists(jobj,node))then begin
			BECr.callID = JSONGet(jobj,node);
		end;
		node = "callType";
		if(JSONNodeExists(jobj,node))then begin
			BECr.callType = JSONGet(jobj,node);
		end;
		node = "internalNumber";
		if(JSONNodeExists(jobj,node))then begin
			BECr.internalNumber = JSONGet(jobj,node);
		end;
		node = "internalAdditionalData";
		if(JSONNodeExists(jobj,node))then begin
			BECr.internalAdditionalData = JSONGet(jobj,node);
		end;
		node = "externalNumber";
		if(JSONNodeExists(jobj,node))then begin
			BECr.externalNumber = JSONGet(jobj,node);
		end;
		node = "srcNumber";
		if(JSONNodeExists(jobj,node))then begin
			BECr.srcNumber = JSONGet(jobj,node);
		end;
		node = "employeeName";
		if(JSONNodeExists(jobj,node))then begin
			BECr.employeeName = JSONGet(jobj,node);
		end;
		node = "employeeEmail";
		if(JSONNodeExists(jobj,node))then begin
			BECr.employeeEmail = JSONGet(jobj,node);
		end;
		node = "waitsec";
		if(JSONNodeExists(jobj,node))then begin
			BECr.waitsec = JSONGet(jobj,node);
		end;
		node = "billsec";
		if(JSONNodeExists(jobj,node))then begin
			BECr.billsec = JSONGet(jobj,node);
		end;
		node = "disposition";
		if(JSONNodeExists(jobj,node))then begin
			BECr.disposition = JSONGet(jobj,node);
		end;
		node = "isNewCall";
		if(JSONNodeExists(jobj,node))then begin
			BECr.isNewCall = JSONGet(jobj,node);
		end;
		node = "did";
		if(JSONNodeExists(jobj,node))then begin
			BECr.did = JSONGet(jobj,node);
		end;
		node = "didNumber";
		if(JSONNodeExists(jobj,node))then begin
			BECr.didNumber = JSONGet(jobj,node);
		end;
		node = "didName";
		if(JSONNodeExists(jobj,node))then begin
			BECr.didName = JSONGet(jobj,node);
		end;
		
		
	recordstore(BECr,true);
	//logtext(0,"recidstr " & recidstr);
	//SendAlarmMessage("@MESSAGE@","",tstr,recidstr);
	//AllClientsRemoteAsync.AlarmMessage(Actr,1,"MESAGE");
	
	
	if(BECr.requestType=="gettingCallSettings")then begin
		str = "{\"customerData\":{\"name\":\"Balanovich Oleksandr\",\"description\":\"programer\"}}";
		weboutstring(str);
	end;
	

return;
end;

global webpublic updating procedure WebBinotelAPICallSet()
begin
	area arequest,newarea,encodearea;
	string 255 tstr;
	longint lenth,i,lasti;
	json jobj;
	record BinotelCallPushVc BECr;
	string 255 node;
	time timestamp;
	date datestamp;
	string 255 str,inphone,name;
	record CUVc CUr;
	
	webgetpostdata(encodearea);
	writeareatofile(encodearea,"WebBinotelAPICallSet.txt",0);
	logtext(0,"WebBinotelAPICallSet");
	tstr = "";
	lenth = getarealength(encodearea);
	For(i=0;i<lenth;i=i+1) begin
		if(getstringfromarea(arequest,i,1)=="=" or i==lenth-1)then begin
			tstr = urldecode(getstringfromarea(encodearea,lasti,i-lasti));
			tstr = StrReplace(tstr,"+&gt;+", " > ");
			addtexttoarea(tstr,arequest);
		end;
	end;
	
	lenth = getarealength(arequest);
	tstr = "";
	lasti = 0;
	addtexttoarea("{\"",newarea);
	For(i=0;i<lenth;i=i+1) begin
	  if(getstringfromarea(arequest,i,1)=="&" or i==lenth-1)then begin
	  	tstr = urldecode(getstringfromarea(arequest,lasti,i-lasti));
	  	tstr = StrReplace(tstr,"=", "\":\"");
	  	tstr = StrReplace(tstr,"[", "(");
	  	tstr = StrReplace(tstr,"]", ")");
	  	tstr = StrReplace(tstr,"&","\"");
	  	if(getstringfromarea(arequest,i,1)=="&")then begin
	  		tstr = tstr & "\",";
	  	end else begin
	  		tstr = tstr & "\"";
	  	end;
	  	logtext(0,tstr);
	  	addtexttoarea(tstr,newarea);
	  	lasti = i;
	  	tstr = "";
	  end;
	end; 
	addtexttoarea("}",newarea);
	
	jobj = parsejsonarea(newarea);
	
	node = "requestType";
	if(JSONNodeExists(jobj,node))then begin
		if(JSONGet(jobj,node)=="gettingCallSettings")then begin
			if(JSONNodeExists(jobj,"externalNumber"))then begin
				inphone = JSONGet(jobj,"externalNumber");
				CUr.Code = inphone;
				if(Readfirstmain(CUr,1,true))then begin
					name = CUr.Name;
				end else begin
					CUr.Phone = inphone;
					if(readfirstkey("Phone",CUr,1,true))then begin
						name = CUr.Name;
					end else begin
						CUr.AltPhone = inphone;
						if(readfirstkey("AltPhone",CUr,1,true))then begin
							name = CUr.Name;
						end else begin
							CUr.Mobile = inphone;
							if(readfirstkey("Mobile",CUr,1,true))then begin
								name = CUr.Name;
							end;
						end;
					end;
				end;
			end;
			if(blank(CUr.Name))then begin
				name = inphone;
			end;
		
			str = "{\"customerData\":{\"name\":\"" & name & "\",\"description\":\"programer\"}}";
			weboutstring(str);
		end;
	end;
	
return;
end;

global //Edit***************************Sasha2,13:28 01.06.2017 {
procedure MakeBinotelCallFromExtNumToPhone(string fromExtNumber,string toPhoneNumber)
begin
  string 255 key,secret,host,keyNode,signatureNode,extNumNode,phoneNode,page;
  Area req,reply;
    
    if (NonBlank(fromExtNumber) and NonBlank(toPhoneNumber)) then begin
      key = "bc327a-61c63b1";
      secret = "1546c2-8c393b-fcf888-acbaba-3ec826a2";
      host = "api.binotel.com";
      page = "/api/2.0/calls/ext-to-phone.json";
      
      extNumNode = "\"ext_number\":" & "\"" & fromExtNumber & "\"";
      phoneNode = "\"phone_number\":" & "\"" & toPhoneNumber & "\"";
      keyNode = "\"key\":" & "\"" & key & "\"";
      
      secret = secret & "{" & extNumNode & "," & phoneNode & "}";
      signatureNode = "\"signature\":" & "\"" & LowerCase(MD5String(secret)) & "\"";
      
      AddTextToArea("{",req);
      AddTextToArea(extNumNode & ",",req);
      AddTextToArea(phoneNode & ",",req);
      AddTextToArea(signatureNode & ",",req);
      AddTextToArea(keyNode,req);
      AddTextToArea("}",req);
      
      WriteAreaToFile(req,"Binotel.txt",0);
      //SendRawWebRequest(host,"433",false,"POST","","application/json","",false,req,reply,10);
      //MySendWebRequest(host,443,-1,true,"POST",page,"application/json","",false,req,reply,10);
      WriteAreaToFile(reply,"Binotel_reply.txt",0);
      //MySendRawWebRequest(host,"443",true,"POST","","application/json","",false,req,reply,10);
			MySendAsyncWebRequest(host,443,-1,true,"POST",page,"application/json","",req,"WebCalReqCallBack",5);

    end;
    
  return;
end; //Edit***************************Sasha2,13:29 01.06.2017 }


global webpublic updating procedure WebCalReqCallBack()
begin


return;
end;