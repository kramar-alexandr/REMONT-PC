//external updating procedure RecalcORShops(string); //Edit***************************Sasha2,17:05 31.10.2014
external procedure CalcEANCHS(var string); //Edit***************************Sasha2,17:05 31.10.2014 
external procedure ORVc_PastePrice(var record ORVc,Integer,var Boolean); //Edit***************************Sasha2,14:50 28.07.2015
external procedure ORDchsum(var record ORVc,Integer); //Edit***************************Sasha2,14:51 28.07.2015
external procedure ORSumup(var record ORVc); //Edit***************************Sasha2,14:51 28.07.2015
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean PasteItemInSVO(var record SVOVc,Integer);
external function roundmode SetRoundModeD(Integer);
external function Boolean PODClassAfterEditField(Integer,string,Integer,Integer,Integer);
external updating function Boolean PUDClassAfterEditField(Integer,string,Integer,Integer,Integer);
external function LongInt GetCurUserLastNr(string);
external function Boolean PasteCustInOrder(var record ORVc,string,string,var string,var string);
external procedure ORVc_PasteCurncyCode(var record ORVc,string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean SetInSet2(string,string);
external function Boolean MySendWebRequest(string,longint,longint,boolean,string,string,string,string,boolean,area,var area,integer);
external function Boolean FindStringInString(string, string);
remote updating function Integer RecordAction_raPasteSVOInOffHire(record SVOVc,var record OffHireVc,record LocalMachineBlock,Boolean); //Edit***************************Sasha2,11:57 09.06.2017
remote updating function Integer RecordAction_raPasteSVOInDispatch(record SVOVc,var record DispatchVc,record LocalMachineBlock,Boolean); //Edit***************************Sasha2,11:59 09.06.2017
external procedure GetCurUser(var record UserVc);
remote function Boolean IntORVc_PasteArtCode(var record IntORVc,Integer,Boolean);
remote function Boolean IntORchrsum(record IntORVc,Integer);
remote procedure SumupIntOR(var record IntORVc,var val);
external function string 255 StrReplace(string,string,string);
external updating procedure UpdateLoyCard(record SVOVc,record SVOVc);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 15 03 2018 y. î 19:51:40

SetLangMode(LangRussian,"RUS",0);

global updating procedure ARRStock()
begin
record RcVc RepSpec;

  ReportDefaults(RepSpec,"RebuildStockVClass");
  RepSpec.repname = "RebuildStockMn";
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 0;
  RunMaintenance(RepSpec);

return;
end;

global
procedure MyMyPrintSMRecord(record SMVc SMr,Integer type,Val Curr)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  string 255 dblstr;
 
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i= i+1) begin
    MatRowGet(SMr,i,SMrw);
    StartFormat(15);
    OutLongInt(0,0,SMr.SerNr,false);
    OutDate(100,0,SMr.TransDate,false);
    OutString(200,0,SMr.RefStr,false);
    switch (type)  begin
      case 1: dblstr = "DblAT2UnitVc";
    end;
    OutString(280,dblstr,SMr.Comment,false);
    OutString(1,0,SMr.Sign,true);
    EndFormat;
    rwcnt = MatRowCnt(SMr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      StartFormat(15);
      OutString(20,0,SMrw.AccNumber,false);
      OutString(80,0,SMrw.Objects,false);
      OutString(170,0,SMrw.Comment,false);
      OutVal(380,0,round(SMrw.DebVal*Curr,SetRoundModeD(0)),M4Val,true);
      OutVal(465,0,round(SMrw.CredVal*Curr,SetRoundModeD(0)),M4Val,true);
      OutString(480,0,SMrw.VATCode,true);
      EndFormat;
    end;
    Black_Divider(300,480);
    StartFormat(15);
    OutVal(380,0,round(SMr.DSum*Curr,SetRoundModeD(0)),M4Val,true);
    OutVal(465,0,round(SMr.CSum*Curr,SetRoundModeD(0)),M4NegVal,true);
    EndFormat;    
  end;
  Gray_Divider(0,1);
  RETURN;
END;

Global updating procedure MyConvertCur(var record CashVc Cashr)
BEGIN
integer i,rwcnt;
row CashVc Cashrw;
val frrate,to1,to2,br1,br2;
date curdate;
String 5 curcode;

curdate=Cashr.TransDate;
curcode="UAH";

GetFullCurncyRate(curcode,curdate,frrate,to1,to2,br1,br2);
to1=to1*100;
rwcnt=MatrowCnt(Cashr);
For (i=0;i<rwcnt;i=i+1) begin
Matrowget(Cashr,i,Cashrw);

Cashrw.Amount=round(Cashrw.Amount*to1/frrate/100,DefaultCurRoundoff);
MatRowPut(Cashr,i,Cashrw);
end;
Cashr.Total=round(Cashr.Total*to1/frrate/100,defaultcurroundoff);

RecordStore(Cashr,true);

RETURN;
END;


Global updating procedure MyConvertCurBal(var record CashierBalVc Cashr)
BEGIN
integer i,rwcnt;
row CashierBalVc Cashrw;
val frrate,to1,to2,br1,br2;
date curdate;
String 5 curcode;
record POSCurncyBlock PCb;// Edit ************************** Wednesday, 13 April 2011 12:27:35


curdate=Cashr.TransDate;
blockLoad(PCb);// Edit ************************** Wednesday, 13 April 2011 12:25:34
  curcode=PCb.CurncyCode;// Edit ************************** Wednesday, 13 April 2011 12:29:19
//curcode="UAH";

GetFullCurncyRate(curcode,curdate,frrate,to1,to2,br1,br2);
to1=to1*100;
rwcnt=MatrowCnt(Cashr);
For (i=0;i<rwcnt;i=i+1) begin
Matrowget(Cashr,i,Cashrw);

Cashrw.Amount=round(Cashrw.Amount*to1/frrate/100,defaultcurroundoff);
MatRowPut(Cashr,i,Cashrw);
end;
Cashr.EndBal=round(Cashr.EndBal*to1/frrate/100,defaultcurroundoff);

RecordStore(Cashr,true);

RETURN;
END;


procedure Gen0EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen1EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen2EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen3EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen4EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen5EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen6EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen7EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen8EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen9EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
    res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

global function CreateEAN128(var string str)
begin
string 255 res,res1;
integer ksum,sum,c,lenth,i;
val csum;
area arr;
  res = "";
  sum = 0;
  res = res & chr(195) & chr(144);
  sum = sum+103;
  lenth = len(str);
  for(i=0;i<lenth;i=i+1)begin
    c = asc(mid(str,i,1));
    c = c - 32;
    sum = sum + c*(i+1);
  end;
  csum = sum/103;
  if(csum<round(csum,SetRoundModeD(0))) then begin ksum = round(csum,SetRoundModeD(0))-1; end else begin
    ksum = round(csum,SetRoundModeD(0));
  end;
  sum = sum-(ksum*103);
  res = res & str;
  if(sum<95) then begin
    If(sum==0) then begin
      res = res & chr(195) & chr(148);
    end else begin
      res = res & chr(sum+32);
    end;  
  end else begin
  res = res & chr(195) & chr(sum+41);
  end;
  //res = res & chr(211);
  //res = res & chr(211);
  res = res & chr(195) & chr(147);
  addtexttoarea(res,arr);
  writeareatofile(arr,"888",0);
  str = res;
return;
end;

global function CreateEAN13(var string str)
begin
integer lenth,i,c;
string 5 c0,ci;
string 20 res;
boolean testf;
  lenth = len(str);
  testf = true;
  if(lenth!=13) then begin testf = false; end;
  for(i=0;i<lenth;i=i+1)begin
    c=asc(mid(str,i,1));
    if(c<48 or c>57) then begin testf = false; end;
  end;
  res = "";
  if(testf) then begin
    c0 = mid(str,0,1);
    switch(c0) begin
      case "0":Gen0EAN(str,res);
      case "1":Gen1EAN(str,res);
      case "2":Gen2EAN(str,res);
      case "3":Gen3EAN(str,res);
      case "4":Gen4EAN(str,res);
      case "5":Gen5EAN(str,res);
      case "6":Gen6EAN(str,res);
      case "7":Gen7EAN(str,res);
      case "8":Gen8EAN(str,res);
      case "9":Gen9EAN(str,res);
    end;
  end;
str = res;
return
end;

global procedure CreateEAN128C(var string str)
begin
string 255 res,res1;
integer ksum,sum,c,lenth,i;
val csum;
area arr;
  res = "";
  sum = 0;
  res = res & chr(195) & chr(146);
  sum = sum+105;
  lenth = len(str);
  for(i=0;i<lenth;i=i+1)begin
    c = asc(mid(str,i,1));
    c = c - 32;
    sum = sum + c*(i+1);
  end;
  csum = sum/103;
  if(csum<round(csum,SetRoundModeD(0))) then begin ksum = round(csum,SetRoundModeD(0))-1; end else begin
    ksum = round(csum,SetRoundModeD(0));
  end;
  sum = sum-(ksum*103);
  res = res & str;
  if(sum<95) then begin
    If(sum==0) then begin
      res = res & chr(195) & chr(148);
    end else begin
      res = res & chr(sum+32);
    end;  
  end else begin
  res = res & chr(195) & chr(sum+41);
  end;
  res = res & chr(195) & chr(147);
  str = res;
return;
end;

global //Edit***************************Sasha2,11:48 25.04.2016 { 
updating procedure CustTimeTableAction()
begin
  record RcVc RepSpec;
  time t1,t2,t3,t4,t5,t6,t7,t8,t9,curt,curtnew;
  string 5 hr,mn;
  integer minute, curcomp, days,i,min;
  date startdate;
  record SamsungSendLog1Vc SSLr;

    t1 = StringToTime("22:50");
    t2 = StringToTime("23:00");
    //t3 = StringToTime("12:00");
    //t4 = StringToTime("14:00");
    //t5 = StringToTime("16:00");
    //t6 = StringToTime("18:00");
    //t7 = StringToTime("20:00");
    //t8 = StringToTime("22:00");
    //t9 = StringToTime("00:00");
    
    curt = CurrentTime; 
    hr = GetHour(curt);
    if (len(hr)==1) then begin
    	hr = "0" & hr;
    end;
    mn = GetMinute(curt);
    minute = StringToInt(mn);
    if (len(mn)==1) then begin
    	mn = "0" & mn;
    end;
    curtnew = StringToTime(hr & ":" & mn);

    curcomp = CurrentCompany;
    
    
    min = getminute(CurrentTime);
    /*if(right(min,1)=="5" and currentdate>stringtodate("25/08/2016"))then begin
			if (SetCompany(9,false)) then begin
				SSLr.TransDate = addday(currentdate,-1);
				if(!Readfirstkey("TransDate",SSLr,1,true))then begin
					goto lCustTimeTableActionRun;
				end;
			end;
    end;
    
    if (curtnew>=t1 and curtnew<t2 and SetCompany(9,false)) then begin
lCustTimeTableActionRun:;
			startdate = addday(currentdate,-2);
			
			if(currentdate>=stringtodate("25/08/2016"))then begin
				For(i=0;i<3;i=i+1) begin
					LogText(0,"SamsungSendFilesToFtpMn at planned time: " & curtnew);
					RepSpec.sStartDate = startdate;
					RepSpec.sEndDate = RepSpec.sStartDate;
					SamsungSendFilesToFtpMn(RepSpec);
					startdate = addday(startdate,1);
				end; 
			end else begin
				LogText(0,"SamsungSendFilesToFtpMn at planned time: " & curtnew);
				RepSpec.sStartDate = currentdate;
				RepSpec.sEndDate = RepSpec.sStartDate;
				SamsungSendFilesToFtpMn(RepSpec);
				startdate = addday(startdate,1);
			end;
			
    	ResetCompany(curcomp); 
    end;*/
    

return;
end; //Edit***************************Sasha2,11:48 25.04.2016 }


global
updating function Integer RecordAction_raPasteSVOInOrder(var record ORVc ORp,var record SVOVc SVOp)
BEGIN
  Integer res;
  record SRBlock SRRec;
  LongInt newnr;
  string 200 errstr,warning;
  
  res = -1;
  if (ReadFirstMain(SVOp,0,true)) then begin end;  
  RecordNew(ORp);
  if (ORp.SerNr==-1) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("ORVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastOrdNr;
    end;    
    ORp.SerNr = NextSerNr("ORVc",ORp.OrdDate,newnr,false,"");
    if (ORp.SerNr==-1) then begin goto LRecordAction_raPasteSVOInOrder; end;
  end;
  ORp.CustCode = SVOp.CustCode;
  
  
  
  if (PasteCustInOrder(ORp,SVOp.CustCode,"",warning,errstr)) then begin
    ORp.Addr0 = SVOp.Vlastnik;// Edit ************************** Thursday, 5 August 2010 12:29:40
    //ORp.CurncyCode = "UAH_B";
    //ORVc_PasteCurncyCode(ORp,"USD");
    //ORp.Location = "SERVICE";
    ORp.OrderClass = "SRV";
    if (RecordStore(ORp,false)) then begin end;
    res = 1;
    CreateRecordLink(ORp,CurrentCompany,SVOp,CurrentCompany);
    CreateRecordLink(SVOp,CurrentCompany,ORp,CurrentCompany);
  end;
LRecordAction_raPasteSVOInOrder:;
  RecordAction_raPasteSVOInOrder = res;
  RETURN;
END;
//-------------------------------------------------------------------------------------------------------------------

global
procedure CopyToCompPUDsm()
begin
	record PUVc PUr;
	row PUVc PUrw;
	integer wn,mtrw,i;
	wn = CurWindow;
	GetWindowRecord(wn,PUr);
	mtrw = MatRowCnt(PUr);
	createfile("../ImportPU.txt");
	CloseFile;
	OpenExportFile("../ImportPU.txt",true);
	
	For(i=0;i<mtrw;i=i+1) begin
		MatrowGet(PUr,i,PUrw);
		ExportString(PUrw.ArtCode);
		ExportString(PUrw.Quant);
		ExportString(PUrw.SerialNr);
		ExportString(PUrw.UPrice);
		NewLine;
	end;
	
	CloseFile;
	
	return;
end;


global
updating procedure PasteFromCompPUDsm()
begin
	
	integer wn,mtrw,i,k,nwn;
	val Qant,Price;
	record PUVc PUr;
	row PUVc PUrw;
	string 20 Art,Ser;
	array string 20 AArt, ASer;
	array val APrice, AQuant;
	
	wn = curwindow;
	//getwindowrecord(wn,PUr);
	
	if (PUr.OKFlag==0) then begin
		if (fileexists("../ImportPU.txt")) then begin
			OpenFile("../ImportPU.txt");
			k=0;
			while (TestEOF()==false) begin
        AArt[k] = importfield;
        AQuant[k] = evaltoval(importfield);
        ASer[k] = importfield;
        APrice[k] = evaltoval(importfield);
        NextImportLine(true);
        k = k+1;
			end;
			CloseFile;
		//	getwindowrecord(nwn,PUr);
			//while (TestEOF()==false) begin
			for (i=0;i<k;i=i+1) begin	
				Art = AArt[i];
				Qant = AQuant[i];
				Ser = ASer[i];
				Price = APrice[i];
				if(nonblank(Art)) then begin
				  GetWindowRecord(wn,PUr);
					PUrw.ArtCode = Art;
					matRowPut(PUr,i,PUrw);
					PutWindowRecord(wn,PUr);
					PUDClassAfterEditField(wn,"ArtCode",0,i,1);
					
					GetWindowRecord(wn,PUr);
					matrowget(PUr,i,PUrw);
					PUrw.Quant = Qant;
					PUrw.UPrice = Price;
					matRowPut(PUr,i,PUrw);
					PutWindowRecord(wn,PUr);
					PUDClassAfterEditField(wn,"Quant",0,i,1);
					
				end;
			end;
		end;
	end;
	
	
	return;
end;

global
updating procedure ImportFroFilePODsm()
begin
	
	integer wn,mtrw,i,k,nwn;
	val Qant,Price;
	record POVc POr;
	row POVc POrw;
	string 20 Art,Ser;
	record PUVc PUr;
	row PUVc PUrw;
	array string 20 AArt, ASer;
	array val APrice,AQuant;
	
	wn = curwindow;
	getwindowrecord(wn,POr);
	
	if (POr.OKFlag==0) then begin
	nwn = OpenWindow("PUDClass",1,0,"","",PUr); 
		if (fileexists("../ImportPU.txt")) then begin
			OpenFile("../ImportPU.txt");
			k=0;
			while (TestEOF()==false) begin
			AArt[k] = importfield;
			ASer[k] = importfield;
			APrice[k] = evaltoval(importfield);
			AQuant[k] = evaltoval(importfield);
			NextImportLine(true);
			k = k+1;
			end;
			CloseFile;
			getwindowrecord(nwn,PUr);
			//while (TestEOF()==false) begin
			for (i=0;i<k;i=i+1) begin	
				Art = AArt[i];
				Qant = AQuant[i];
				Ser = ASer[i];
				Price = APrice[i];
				if(nonblank(Art)) then begin
				  GetWindowRecord(wn,POr);
					POrw.ArtCode = Art;
					matRowPut(POr,i,POrw);
					PutWindowRecord(wn,POr);
					PODClassAfterEditField(wn,"ArtCode",0,i,1);
					
					GetWindowRecord(wn,POr);
					matrowget(POr,i,POrw);
					POrw.Quant = Qant;
					//POrw.OrdRow = i;
					POrw.Price = Price;
					matRowPut(POr,i,POrw);
					PutWindowRecord(wn,POr);
					PODClassAfterEditField(wn,"Quant",0,i,1);
					
					getWindowRecord(nwn,PUr);
					PUrw.ArtCode = Art;
					matRowPut(PUr,i,PUrw);
					PutWindowRecord(nwn,Pur);
					PUDClassAfterEditField(nwn,"ArtCode",0,i,1);
					GetWindowRecord(nwn,PUr);
					matrowget(PUr,i,PUrw);
					PUrw.Quant = Qant;
					PUrw.OrdRow = i;
					PUrw.SerialNr = Ser;
					PUrw.UPrice = Price;
					matRowPut(PUr,i,PUrw);
					PutWindowRecord(nwn,PUr);
					PUDClassAfterEditField(nwn,"Quant",0,i,1);
				end;
			end;
		end;
	end;
	
	
	return;
end;

global updating procedure StockMovFileCheckDsm()
begin
  integer wn,mtrw,i,k,j,g,ii;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record INVc INr;
	string 20 Art,Ser;
	boolean testf,res;
	string 40 altcode;
	Array string 40 arArt,arSer;
	
	//MessageBox(0,"begin");
	wn = CurWindow;
	GetWindowRecord(wn,SMr);
	if (fileexists("../ImportPU.txt")) then begin
		OpenFile("../ImportPU.txt");
	
		mtrw = matrowCnt(SMr);
		While(TestEof()==false) begin
		Art = importfield;
		Ser = importfield;
		NextImportLine(true);
			testf = true;
			for (i=0;i<mtrw;i=i+1) begin
				matrowget(SMr,i,SMrw);
				If (SMrw.SerialNr == Ser) then begin
					SMrw.SentQuant = SMrw.SentQuant+1;
					MatRowPut(SMr,i,SMrw);
					testf = false;
				end;
			end;	
			if (testf) then begin MessageBox(0,"åòó ñîâïàäåíèß ñ òàêèì ñåðèéíûì íîìåðîì: " & Ser); end;
		end;
		CloseFile;
	ii = OpenWindow("CheckStockMovDClass",0,wn,"","",SMr);
	//PutWindowRecord(ii,SMr);	
	end;
	
return;
end;

global updating procedure ImportFromFileDsm()
begin
	integer wn,mtrw,i,ii,g,k,ch,a,s;
	record PUVc PUr;
	row PUVc PUrw;
	string 20 Art,Ser,Flag;
	area MyArea;
	Array string 40 arArt,arSer,arFlag;
	string 40 altcode,sercut,sercut1;
	boolean testf;
	Record INVc INr;
	string 5 alt1,alt2;
	boolean testalt;

	SetAreaZeroSize(MyArea);
	wn = curwindow;
	getwindowrecord(wn,PUr);
	if (PUr.OKFlag==0) then begin
		if (fileexists("../ImportPU.txt")) then begin
			OpenFile("../ImportPU.txt");
			ii=0;
			
			while (TestEOF()==false) begin
					
					arArt[ii] = importfield;
					arSer[ii] = importfield;
					sercut = arSer[ii];
					sercut1 = "";
					for(s=0;s<len(sercut);s=s+1)begin
					  if(mid(sercut,s,1)!=" ")then begin
					    sercut1 = sercut1 & mid(sercut,s,1);
					  end;
					end;
					arSer[ii] = sercut1;
					arFlag[ii] = importfield;
					NextImportLine(true);
					ii=ii+1;
			end;
			Closefile;
			
			mtrw = MatRowCnt(PUr);
			if (mtrw>0) then begin
				for(g=0;g<mtrw;g=g+1) begin
					MatRowGet(PUr,g,PUrw);
					if (blank(PUrw.ArtCode)) then begin
						matrowdelete(PUr,g);
						g=-1;
						mtrw = mtrw-1;
					end;
				end;
			end;

			if (mtrw==0) then begin
				ch = 1;
				for (i=0;i<ii;i=i+1) begin
					
					Art = arArt[i];
					Ser = arSer[i];
					alt1 = mid(Art,0,5);		
					alt2 = mid(Ser,0,5);
					
					testalt = true;
          for(a=0;a<5;a=a+1) begin
            if((asc(mid(alt1,a,1))<48) or (asc(mid(alt1,a,1))>58)) then begin
              testalt = false;
            end;
          end;
          
          if(testalt and alt1!=alt2)then begin
            MessageBox(0,"îçìîæíî íåïðàâèëüíûé ñåðèéíèê â ñòðîêå Ü" & i+1);
          end;
								
					PUrw.ArtCode = Art;
					PUrw.SerialNr = Ser;   
					matRowPut(PUr,i,PUrw);
				
				end;
			end
			else
			begin
				ch = 2;
				for (k=0;k<ii;k=k+1) begin
					Art = arArt[k];
					Ser = arSer[k];
					Flag = arFlag[k];
					
					testf = true;
					//AddStringToArea(Art,MyArea);
					//AddStringToArea(Ser,MyArea);
					altcode = "";
					INr.AlternativeCode = Art;
					if (Flag != "+") then begin
					
						if (ReadFirstKey("AlternativeCode",INr,1,false)) then begin
							if (INr.AlternativeCode == Art) then begin
								alt1 = mid(Art,0,5);
								altcode = INr.Code;
							end;
						end;
						
						INr.BarCode = Art;
						if (ReadFirstKey("BarCode",INr,1,false)) then begin
              if (INr.BarCode == Art) then begin
                altcode = INr.Code;
								end;
            end;
			
						if (nonblank(altcode)) then begin
							Art = altcode;
						end;
						for (i=0;i<mtrw;i=i+1) begin
							MatRowGet(PUr,i,PUrw);
							
							if ((PUrw.ArtCode == Art) and (blank(PUrw.SerialNr)) and testf) then begin
								PUrw.SerialNr = Ser;
								alt2 = mid(Ser,0,5);
								testalt = true;
								for(a=0;a<5;a=a+1) begin
									if((asc(mid(alt1,a,1))<48) or (asc(mid(alt1,a,1))>58)) then begin
										testalt = false;
									end;
								end;
								
								if(testalt and alt1!=alt2)then begin
									MessageBox(0,"îçìîæíî íåïðàâèëüíûé ñåðèéíèê â ñòðîêå Ü" & i+1);
								end;
								
								Flag = "+";
								testf = false;
								matRowPut(PUr,i,PUrw);
							end;
						end;
					end;
					AddTextToArea(Art & chr(9) & Ser & chr(9) & Flag & chr(13) & chr(10),MyArea);
				end;
			WriteAreaToFile(MyArea,"../ImportPU.txt",0);
			end;
		end;
		if (testf) then begin
			MessageBox(0," ôàéëå èìïîðòà áîëüøå ñòðîê ÷åì â äîêóìåíòå íàäõîäæåííß");
		end;
		PutWindowRecord(wn,PUr);
	end;
	
	for (k=0;k<=i;k=k+1) begin
		if (ch == 1) then begin
			PUDClassAfterEditField(wn,"ArtCode",0, k,1);
		end;
		if (ch == 2) then begin
			PUDClassAfterEditField(wn,"SerialNr",0, k,1);
		end;
	end;
	
return;
end;

global
updating function Integer RecordAction_raPasteSVOInPP(var record PPVc PPp,var record SVOVc SVOp)
BEGIN
  Integer res,numr;
  numr=-1;
  res = 1;
  
  Recordnew(PPp);
   PPp.SerNr = NextSerNr("PPVc",CurrentDate,numr,false,"");
  RecordAction_raPasteSVOInPP = res;
  RETURN;
END;

global
updating function Integer RecordAction_raPasteSVOInExp(var record ExpVc Expp,var record SVOVc SVOp)
BEGIN
  Integer res;
  LongInt newnr;
  
  res = -1;
  RecordNew(Expp);
  if (Expp.SerNr==-1) then begin
    Expp.SerNr = NextSerNr("ExpVc",CurrentDate,newnr,false,"");
    if (Expp.SerNr==-1) then begin goto LRecordAction_raPasteSVOInExp; end;
  end;
  
  if (RecordStore(Expp,false)) then begin 
    res = 1;
    CreateRecordLink(Expp,CurrentCompany,SVOp,CurrentCompany);
    CreateRecordLink(SVOp,CurrentCompany,Expp,CurrentCompany);
  end else begin
    res = -1;
  end;
LRecordAction_raPasteSVOInExp:;
  RecordAction_raPasteSVOInExp = res;
  RETURN;
END;


global
updating function Integer RecordAction_raPasteSVOInIP(var record IPVc IPp,var record SVOVc SVOp)
BEGIN
  Integer res;
  LongInt newnr;
  
  res = -1;
  RecordNew(IPp);
  if (IPp.SerNr==-1) then begin
    IPp.SerNr = NextSerNr("IPVc",CurrentDate,newnr,false,"");
    if (IPp.SerNr==-1) then begin goto LRecordAction_raPasteSVOInIP; end;
  end;
  
  if (RecordStore(IPp,false)) then begin 
    res = 1;
    CreateRecordLink(IPp,CurrentCompany,SVOp,CurrentCompany);
    CreateRecordLink(SVOp,CurrentCompany,IPp,CurrentCompany);
  end else begin
    res = -1;
  end;
LRecordAction_raPasteSVOInIP:;
  RecordAction_raPasteSVOInIP = res;
  RETURN;
END;

global
updating function Integer RecordAction_raPasteSVOInStockMov(var record StockMovVc SMp,var record SVOVc SVOp)
BEGIN
  Integer res;
  LongInt newnr;
  string 25 frloc,toloc;
  
  
  switch(CurrentCompany)begin
  
  case 1: frloc = "MAIN";
  case 2: frloc = "INV#1";
  
  end;
  
  res = -1;
  RecordNew(SMp);
  if (SMp.SerNr==-1) then begin
    SMp.SerNr = NextSerNr("SMVc",CurrentDate,newnr,false,"");
    if (SMp.SerNr==-1) then begin goto LRecordAction_raPasteSVOInIP; end;
  end;
  
  SMp.FrLocation = frloc;
  SMp.ToLocation = "SERVICE";
  
  if (RecordStore(SMp,false)) then begin 
    res = 1;
    CreateRecordLink(SMp,CurrentCompany,SVOp,CurrentCompany);
    CreateRecordLink(SVOp,CurrentCompany,SMp,CurrentCompany);
  end else begin
    res = -1;
  end;
LRecordAction_raPasteSVOInIP:;
  RecordAction_raPasteSVOInStockMov = res;
  RETURN;
END;

global updating procedure RA_AvansCreateDsm(record PPVc PPr,var record ExpVc Expr)
begin
integer curcomp;
  
  curcomp = currentcompany;
  Expr.SerNr = NextSerNr("ExpVc",Expr.TransDate,-1,true,"");
  Expr.Person = "";
  Expr.Name = "";
  
 if(recordinsert(Expr,false)) then begin
      CreateRecordLink(Expr,curcomp,PPr,curcomp);
      CreateRecordLink(PPr,curcomp,Expr,curcomp);
    end;

return;
end;

global //Edit***************************Sasha2,16:38 03.03.2016 {
function Boolean IsEnoughRemQtyInHist(string code,string location,date docdate,val qty,string serialnumber)
begin
  record ItemHistvc IHr;
  record INVc INr;
  Boolean TrHs,testf;
  val remval,checkedqty;
  Boolean res;
  string 30 serialnr;
    
    res = false;
    //LogText(0,"IsEnoughRemQtyInHist:" & "Code:" & code & "," & "Loc:" & location & "," & "Date:" & docdate & "," & "Qty:" & qty & "," & "Serial:" & serialnumber);
    if (blank(code) or blank(location) or blankdate(docdate)) then begin
      goto LIsEnoughRemQtyInHist;
    end;
    
    serialnr = serialnumber;
    INr.Code = code;
    ReadFirstMain(INr,1,true);
    
    if (INr.SerNrf>0) then begin
      checkedqty = 1;
    end else begin
      serialnr = "";
      checkedqty = qty;
    end;

    IHr.ArtCode = code;
    IHr.Location = location;
    TrHs = true;
    while (LoopKey("ActiveLocQty",IHr,2,TrHs)) begin
      testf = true;
      if (IHr.ArtCode!=code or IHr.Location!=location) then begin TrHs = false; testf = false; end;
      if (NonBlank(serialnr) and IHr.SerialNr!=serialnr) then begin testf = false; end;
      if (docdate<IHr.TransDate) then begin testf = false; end;
      if (testf) then begin
        remval = remval + IHr.RemQty;
      end;
    end;
    if (checkedqty<=remval) then begin
      res = true;
    end;

LIsEnoughRemQtyInHist:;
 
    IsEnoughRemQtyInHist = res;
  return;
end; //Edit***************************Sasha2,16:39 03.03.2016 }

global updating procedure MyAddBalaceCUMn(record RcVc RepSpec)
begin
	record CSVc CSr;
	
	CSr.CustCode = RepSpec.f1;
  //CSr.BranchID = "";
  //CSr.Class = "";
  CSr.CurncyCode = RepSpec.f2; 
	readfirstmain(CSr,1,true);
  AddBalance(CSr,RepSpec.d1,"",0,"",0,"",0,"",0,"balance",RepSpec.vals0,"",0);
  AddBalance(CSr,RepSpec.d1,"",0,"",0,"",0,"",0,"paidvalue",RepSpec.vals0,"",0);
  
return;
end;

global updating procedure MyAddBalaceVEMn(record RcVc RepSpec)
begin
	record VSVc CSr;
	
	CSr.VECode = RepSpec.f1;
  //CSr.BranchID = "";
  //CSr.Class = "";
  CSr.CurncyCode = RepSpec.f2; 
	readfirstmain(CSr,1,true);
  AddBalance(CSr,RepSpec.d1,"",0,"",0,"",0,"",0,"vebalance",RepSpec.vals0,"",0);
  AddBalance(CSr,RepSpec.d1,"",0,"",0,"",0,"",0,"vepaidvalue",RepSpec.vals0,"",0);
  
return;
end;

global //Edit***************************Sasha2,17:28 18.04.2016 {
function date GetDateOfSerial(string artcode,string serial,date transdate)
begin
	date dt;
	boolean testf,TrHs;
	record ItemHistVc IHr;
    
    if (blank(artcode) or blank(serial)) then begin
      goto LGetDateOfSerial;
    end;
    
    dt = transdate;
    
    IHr.ArtCode = artcode;
    IHr.SerialNr = serial;
    TrHs = true;
    while (LoopKey("ArtCodeSerialNr",IHr,2,TrHs)) begin
      testf = false;
      if (IHr.ArtCode!=artcode or IHr.SerialNr!=serial) then begin TrHs = true; testf = false; end;
      if (testf) then begin
        if(IHr.FileName=="PUVc")then begin
        	dt = IHr.TransDate;
        	goto LGetDateOfSerial;
        end;
      end;
    end;
    resetloop(IHr);
		
		IHr.ArtCode = artcode;
    IHr.SerialNr = serial;
    TrHs = true;
    while (LoopKey("ArtCodeSerialNr",IHr,2,TrHs)) begin
      testf = false;
      if (IHr.ArtCode!=artcode or IHr.SerialNr!=serial) then begin TrHs = true; testf = false; end;
      if (testf) then begin
        if(IHr.FileName=="IVVc" and IHr.Qty<0 and IHr.StockAffectf>0)then begin
        	dt = IHr.TransDate;
        	goto LGetDateOfSerial;
        end;
      end;
    end;
			    
LGetDateOfSerial:;
	
	GetDateOfSerial = dt;
return;
end; //Edit***************************Sasha2,17:28 18.04.2016 }

global updating procedure RecalcWebRegMn()
begin
	record WebSyncRegVc WSRr;
	record ItemStatusVc ISr,ISfind;
	record WebSyncBlock WSBb;
	record WebSyncMatBlock WSMBb;
	row WebSyncMatBlock WSMBwr;
	integer i,mtrw;
	boolean TrHs,testf,testf1,TrHs1;
	string 255 available,notAvailable,otherCompsAvailable; //Edit***************************Sasha2,13:04 07.04.2016
	string 20 curID; //Edit***************************Sasha2,13:04 07.04.2016
  integer pos; //Edit***************************Sasha2,13:04 07.04.2016
	
	blockload(WSMBb);
  blockload(WSBb);
  mtrw = matrowcnt(WSMBb);
	
	WSRr.ArtCode = "";
	While(loopmain(WSRr,1,true)) begin
	  
		ISfind.Code = WSRr.ArtCode;
		TrHs1 = true;
		available = "";
		while(loopmain(ISfind,1,TrHs1))begin
			testf1 = true;
			if(ISfind.Instock<=0)then begin testf1 = false; end;
			if(ISfind.Code!=WSRr.ArtCode)then begin testf1 = false; TrHs1 = false; end;
		
			if(testf1)then begin
				for(i=0;i<mtrw;i=i+1)begin
					matrowget(WSMBb,i,WSMBwr);
					if(ISfind.Location==WSMBwr.Location)then begin
						if(nonblank(available))then begin available = available & ","; end;
						available = available & WSMBwr.ID;
					end;
				end;
			end;
		end;
		resetloop(ISfind);
		notAvailable = ""; //Edit***************************Sasha2,12:53 07.04.2016 {
		for(i=0;i<mtrw;i=i+1) begin
      matrowget(WSMBb,i,WSMBwr);
      if (NonBlank(WSMBwr.Location) and setinset(WSMBwr.Location,available)==false) then begin
        if(nonblank(notAvailable))then begin notAvailable = notAvailable & ","; end;
        notAvailable = notAvailable & WSMBwr.ID;
      end;
    end;
		otherCompsAvailable = "";
    pos = 0;
    ExtractObj(WSRr.Available,pos,curID);
    while (NonBlank(curID)) begin
      if (setinset(curID,available)==false and setinset(curID,notAvailable)==false) then begin
        if(nonblank(otherCompsAvailable))then begin otherCompsAvailable = otherCompsAvailable & ","; end;
        otherCompsAvailable = otherCompsAvailable & curID;
      end;
      ExtractObj(WSRr.Available,pos,curID);
    end; 
    if (NonBlank(otherCompsAvailable) and NonBlank(available)) then begin
      available = otherCompsAvailable & "," & available;
    end;
    if (NonBlank(otherCompsAvailable) and Blank(available)) then begin
      available = otherCompsAvailable;
    end;
    //Edit***************************Sasha2,12:53 07.04.2016 }
	  //otherCompsAvailable = WSRr.Available;
	  WSRr.Available = available;
    WSRr.DateChange = CurrentDate;
	  recordstore(WSRr,true);//LogText(0,"WSRr.ArtCode:" & WSRr.ArtCode & Chr(9) & "WSRr.Available:" & otherCompsAvailable & Chr(9) & "WSRr.Available:" & WSRr.Available);
	  
	end; 
	
return;
end;


global updating procedure SyncWebRegMn()
begin
record WebSyncRegVc WSRr;
record ItemStatusVc ISr,ISfind;
record WebSyncBlock WSBb;
record WebSyncMatBlock WSMBb;
row WebSyncMatBlock WSMBwr;
integer i,mtrw;
record PLDefVc PLDr;
record PLVc PLr;
boolean TrHs,testf,testf1,TrHs1;
string 255 available,notAvailable,otherCompsAvailable,tempAvailable; //Edit***************************Sasha2,13:04 07.04.2016
string 20 curID; //Edit***************************Sasha2,13:04 07.04.2016
integer pos; //Edit***************************Sasha2,13:04 07.04.2016

  blockload(WSMBb);
  blockload(WSBb);
  mtrw = matrowcnt(WSMBb);
  
  
  ISr.Code = "";
  ISr.Location = ";;;";
  TrHs = true;
  while(loopkey("Location",ISr,2,TrHs)) begin
    testf = true;
    if(ISr.Location!=";;;")then begin TrHs = false; testf = false; end;
    if(ISr.Instock<=0)then begin testf = false; end;
    
    if(testf)then begin
      ISfind.Code = ISr.Code;
      TrHs1 = true;
      available = "";
      while(loopmain(ISfind,1,TrHs1)) begin
        testf1 = true;
        if(ISfind.Instock<=0)then begin testf1 = false; end;
        if(ISfind.Code!=ISr.Code)then begin testf1 = false; TrHs1 = false; end;
        
        if(testf1)then begin
          for(i=0;i<mtrw;i=i+1) begin
            matrowget(WSMBb,i,WSMBwr);
            if(ISfind.Location==WSMBwr.Location)then begin
              if(nonblank(available))then begin available = available & ","; end;
              available = available & WSMBwr.ID;
            end;
          end;
        end;
      end;
      resetloop(ISfind);
      WSRr.ArtCode = ISr.Code;
      if(readfirstmain(WSRr,1,true) and (WSRr.ArtCode==ISr.Code))then begin
        notAvailable = "";  //Edit***************************Sasha2,12:53 07.04.2016 {
        for(i=0;i<mtrw;i=i+1) begin
          matrowget(WSMBb,i,WSMBwr);
          if (NonBlank(WSMBwr.Location) and setinset(WSMBwr.Location,available)==false) then begin
            if(nonblank(notAvailable))then begin notAvailable = notAvailable & ","; end;
            notAvailable = notAvailable & WSMBwr.ID;
          end;
        end;
        otherCompsAvailable = "";
        pos = 0;
        ExtractObj(WSRr.Available,pos,curID);
        while (NonBlank(curID)) begin
          if (setinset(curID,available)==false and setinset(curID,notAvailable)==false) then begin
            if(nonblank(otherCompsAvailable))then begin otherCompsAvailable = otherCompsAvailable & ","; end;
            otherCompsAvailable = otherCompsAvailable & curID;
          end;
          ExtractObj(WSRr.Available,pos,curID);
        end; 
        if (NonBlank(otherCompsAvailable) and NonBlank(available)) then begin
          available = otherCompsAvailable & "," & available;
        end;
        if (NonBlank(otherCompsAvailable) and Blank(available)) then begin
          available = otherCompsAvailable;
        end;
        //Edit***************************Sasha2,12:53 07.04.2016 }
        PLr.PLCode = WSBb.DefPriceList;
        PLr.ArtCode = ISr.Code;
        if(readfirstmain(PLr,2,true))then begin
          WSRr.Price = PLr.ExVatPrice;
        end;
        tempAvailable = WSRr.Available; //Edit***************************Sasha2,14:37 07.04.2016
        WSRr.Available = available;
        WSRr.DateChange = CurrentDate;
        if(tempAvailable!=available)then begin //Edit***************************Sasha2,14:37 07.04.2016
          recordStore(WSRr,true); //LogText(0,"WSRr.ArtCode:" & WSRr.ArtCode & Chr(9) & "WSRr.Available:" & tempAvailable & Chr(9) & "WSRr.Available:" & WSRr.Available);
        end;
      end else begin
        Recordnew(WSRr);
        WSRr.ArtCode = ISr.Code;
        PLr.PLCode = WSBb.DefPriceList;
        PLr.ArtCode = ISr.Code;
        if(readfirstmain(PLr,2,true))then begin
          WSRr.Price = PLr.ExVatPrice;
        end;
        WSRr.Available = available;
        WSRr.DateChange = CurrentDate;
        if(nonblank(WSRr.Available))then begin
          recordStore(WSRr,true);
        end;
      end;
      resetloop(WSRr);
    end;
  end;
  resetloop(ISr);
  
  WSBb.DateLastTime = currentdate;
  blockstore(WSBb);
  
return;
end;

global updating procedure UpdateWebRegMn()
begin
record WebSyncRegVc WSRr;

  WSRr.ArtCode = "";
  While(loopmain(WSRr,1,true))begin
      WSRr.DateChange = currentdate;
      recordstore(WSRr,true);
  end;
 
return;
end;


global updating procedure SyncWebRegUpdateFromIS(record ItemStatusVc ISr)
begin
record WebSyncRegVc WSRr;
record WebSyncBlock WSBb;
record WebSyncMatBlock WSMBb;
row WebSyncMatBlock WSMBwr;
record INVc INr;
integer i,mtrw;
record PLVc PLr;
boolean testf;
string 200 aval,newaval,curLocsAvailable,curID;
string 255 otherLocsAvailable;
integer lenth,k,pos;
string 5 achar,char;
  
  blockload(WSBb);
  blockload(WSMBb);
  mtrw = matrowcnt(WSMBb);
  testf = false;
  for(i=0;i<mtrw;i=i+1)begin
    matrowget(WSMBb,i,WSMBwr);
    if(WSMBwr.Location==ISr.Location)then begin
      aval = WSMBwr.ID;
      testf = true;
    end;
    if (Blank(curLocsAvailable)) then begin
      curLocsAvailable = WSMBwr.ID;
    end else begin
      curLocsAvailable = curLocsAvailable & "," & WSMBwr.ID;
    end;
  end;
  
  if(testf)then begin
    INr.Code = ISr.Code;
    ReadFirstMain(INr,1,true);
    WSRr.ArtCode = ISr.Code;
    if(readfirstmain(WSRr,1,true) and WSRr.ArtCode==ISr.Code)then begin
      PLr.PLCode = WSBb.DefPriceList;
        PLr.ArtCode = ISr.Code;
        if(readfirstmain(PLr,2,true))then begin
          WSRr.Price = PLr.ExVatPrice;
        end;
        if(setinset(aval,WSRr.Available))then begin
          if(ISr.Instock<=0)then begin
            lenth = len(WSRr.Available);
            achar = "";
            char = "";
            newaval = "";
            
            for(i=0;i<lenth;i=i+1) begin
              char = mid(WSRr.Available,i,1);
              if(char!=",")then begin
                achar = achar & char;
              end else begin
                if(achar!=aval)then begin
                  if(nonblank(newaval))then begin
                    newaval = newaval & "," & achar;
                  end else begin
                    newaval = achar;
                  end;
                end;
                achar = "";
              end;
            end;
            if(achar!=aval)then begin
              if(nonblank(newaval))then begin
                newaval = newaval & "," & achar;
              end else begin
                newaval = achar;
              end;
            end;
            WSRr.Available = newaval;
          end;
        end else begin
        	if(ISr.Instock>0)then begin
						if(nonblank(WSRr.Available))then begin
							WSRr.Available = WSRr.Available & "," & aval;
						end else begin
							WSRr.Available = aval;
						end;
          end;
        end;
        WSRr.DateChange = CurrentDate;
        recordStore(WSRr,true);
    end else begin
      Recordnew(WSRr);
      WSRr.ArtCode = ISr.Code;
      PLr.PLCode = WSBb.DefPriceList;
      PLr.ArtCode = ISr.Code;
      if(readfirstmain(PLr,2,true))then begin
        WSRr.Price = PLr.ExVatPrice;
      end;
      WSRr.Available = aval;
      WSRr.DateChange = CurrentDate;
      recordStore(WSRr,true);
    end;
  end;
return;
end;

updating procedure SyncWebRegUpdateFromPL(record PLVc PLr)
begin
  record WebSyncRegVc WSRr;
  record WebSyncBlock WSBb;
  record INVc INr;
  record WebSyncMatBlock WSMBb;
  row WebSyncMatBlock WSMBwr;
  Boolean proceedf;
  string 255 otherLocsAvailable,curLocsAvailable;
  string 50 curID;
  Integer mtrw,pos,i;
  
  blockload(WSBb);
  if(WSBb.DefPriceList==PLr.PLCode)then begin
    INr.Code = PLr.ArtCode;
    ReadFirstMain(INr,1,true);
    
    proceedf = true; //Edit***************************Sasha2,13:01 24.05.2016 {
    if (proceedf) then begin
      WSRr.ArtCode = PLr.ArtCode;
      if(readfirstmain(WSRr,1,true))then begin
        if (proceedf) then begin //Edit***************************Sasha2,13:01 24.05.2016 }
          WSRr.Price = PLr.ExVatPrice;
          WSRr.DateChange = currentdate;
          recordstore(WSRr,true);  
        end;
      end else begin //Edit***************************Sasha2,14:34 26.06.2014 {
        recordnew(WSRr);// Edit ************************** ÷åòâåðã, 26 èþíß 2014 ã., 16:50:36
        WSRr.ArtCode = PLr.ArtCode;
        WSRr.Price = PLr.ExVatPrice;
        WSRr.DateChange = currentdate;
        recordstore(WSRr,true);
      end; //Edit***************************Sasha2,14:35 26.06.2014 }
    end;
  end;
return;
end;


global updating procedure UpdatePricesInWebSyncReg()
begin
	record PLVc PLr;
	record WebSyncBlock WSBb;
	boolean TrHs,testf;
	record WebSyncRegVc WSRr;
	
	
	blockload(WSBb);
	
	PLr.PLCode = WSBb.DefPriceList;
	
	TrHs = true;
	while(loopmain(PLr,1,TrHs))begin
		if(PLr.PLCode!=WSBb.DefPriceList)then begin TrHs = false; end;
		
		if(TrHs)then begin
			WSRr.ArtCode = PLr.ArtCode;
			if(readfirstmain(WSRr,1,true))then begin
				if(WSRr.Price!=PLr.ExVatPrice)then begin
					logtext(0,WSRr.ArtCode & " WebChangePrice " & WSRr.Price & " -> " & PLr.ExVatPrice);
					WSRr.Price = PLr.ExVatPrice;
          WSRr.DateChange = currentdate;
          recordstore(WSRr,true); 
				end;
			end;
		end;
		
	end;


return;
end;


global
updating function LongInt ItemStatusVcRecordSaveAfter(var record ItemStatusVc ISr,record ItemStatusVc IS2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  SyncWebRegUpdateFromIS(ISr);
  ItemStatusVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt ItemStatusVcRecordUpdate(var record ItemStatusVc ISr,record ItemStatusVc IS2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  SyncWebRegUpdateFromIS(ISr);
  ItemStatusVcRecordUpdate = res;
  RETURN;
END;


global
updating function LongInt PLVcRecordSaveAfter(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  SyncWebRegUpdateFromPL(PLr);
  PLVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt PLVcRecordUpdateAfter(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  SyncWebRegUpdateFromPL(PLr);
  PLVcRecordUpdateAfter = res;
  RETURN;
END;


global
updating function LongInt WebSyncRegVcRecordUpdate(var record WebSyncRegVc WSRr,record WebSyncRegVc WSR2r,LongInt stat,LongInt long4)
BEGIN
	
	WSRr.DateChange = currentdate;
	
return;
end;

global
updating function LongInt WebSyncRegVcRecordSave(var record WebSyncRegVc WSRr,record WebSyncRegVc WSR2r,LongInt stat,LongInt long4)
BEGIN
	
	WSRr.DateChange = currentdate;
	
return;
end;


updating procedure AddTextToNote(var record NotepadVc Noter,string tstr)
BEGIN
    AddToText(tstr,Noter);
    AddToText(Chr(13) & Chr(10),Noter);
    
  RETURN;
END;

global updating procedure CreateSVOSerNoter(record SVOVc SVOr,string tstr)
begin
record NotepadVc Noter,OldNoter;
record RLinkVc RLinkr;
Integer notenr;
boolean findf;


    notenr = 1;
    findf = false;
    while (ReadRecordLink(SVOr,notenr,Noter,RLinkr)) begin
       if(RLinkr.Comment==USetStr(1243))then begin 
         findf = true;
         goto Lfindnoter; 
       end;
       notenr = notenr + 1;
    end;
Lfindnoter:;
    if(findf)then begin
      OldNoter.SerNr = Noter.SerNr;
      OldNoter.LangCode = Noter.LangCode;
      OldNoter.Classification = Noter.Classification;
      OldNoter.FromRecidStr = Noter.FromRecidStr;
      OldNoter.CompanyNr = Noter.CompanyNr;
      RecordClear(Noter);
      //if (RecordStore(Noter,true)) then begin  end;// Edit ************************** Monday, 13 June 2016 11:42:58
      recordCopy(Noter,OldNoter);
      Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");// Edit ************************** Monday, 13 June 2016 11:43:54
      AddTextToNote(Noter,tstr);// Edit ************************** Wednesday, 8 June 2011 11:45:42
      if (RecordStore(Noter,true)) then begin  end;
    end else begin
      recordNew(Noter);
      AddTextToNote(Noter,tstr);// Edit ************************** Wednesday, 8 June 2011 11:45:46
      Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
      if (RecordStore(Noter,false)) then begin
        CreateRecordLink(SVOr,CurrentCompany,Noter,CurrentCompany);  
        notenr = 1;
        while (ReadRecordLink(SVOr,notenr,Noter,RLinkr)) begin
          notenr = notenr + 1;
        end;
        if (ReadRecordLink(SVOr,notenr-1,Noter,RLinkr)) then begin
          RLinkr.Comment = USetStr(1243);//"Printed Docs";   
          if (RecordStore(RLinkr,true)) then begin  end;
        end;
      end;
    end;
  
return;
end;





global updating procedure FillSVOHistSerialMn()
begin
record SVOVc SVOr;
row SVOVc SVOrw;
record SVOHistSerialVc SVHistr;
integer mtrw,i;
  
  
  while(loopmain(SVOr,1,true))begin
    mtrw = matrowcnt(SVOr);
    for(i=0;i<mtrw;i=i+1)begin
      matrowget(SVOr,i,SVOrw);
      if(nonblank(SVOrw.SerialNr))then begin
        recordnew(SVHistr);
        SVHistr.SerialNr = SVOrw.SerialNr;
        SVHistr.ArtCode = SVOrw.ArtCode;
        SVHistr.Qty = SVOrw.Quant;
        SVHistr.TransNr = SVOr.SerNr;
        SVHistr.FileName = "SVOVc";
        SVHistr.OKFlag = SVOr.DoneMark;
        SVHistr.Type = SVOrw.ItemType;
        SVHistr.TransDate = SVOr.TransDate;
        SVHistr.OkDate = SVOr.PlanShipDate; //Edit***************************Sasha2,14:53 16.02.2017
        SVHistr.ReturnDate = SVOr.RegDate;
        SVHistr.SalesMan = SVOr.CustomField7;
        SVHistr.Client = SVOr.CustCode;
        SVHistr.Vlastnik = SVOr.Vlastnik;
        recordinsert(SVHistr,true);
      end;
    end;
  end;


return;
end;

global updating procedure FillSVOStatusTextMn()
begin
record SVOVc SVOr;
row SVOVc SVOrw;
record SVOHistSerialVc SVHistr;
integer mtrw,i;
  
  
  while(loopmain(SVOr,1,true))begin
    switch(SVOr.OrderStatus)begin
			case 0: SVOr.StatusText = USetStr(31044);
			case 1: SVOr.StatusText = USetStr(31045);
			case 3: SVOr.StatusText = USetStr(31050);
			case 2: SVOr.StatusText = USetStr(31046);
			case 4: SVOr.StatusText = USetStr(31061);
			case 5: SVOr.StatusText = USetStr(31085);
			case 6: SVOr.StatusText = USetStr(31095);
			case 7: SVOr.StatusText = USetStr(31096);
			case 8: SVOr.StatusText = USetStr(31097);
			case 9: SVOr.StatusText = USetStr(31501);
			case 10: SVOr.StatusText = USetStr(31506);
      case 11: SVOr.StatusText = USetStr(31509);//Edit-------------------Vitalii 15:51 21.09.2017
      case 12: SVOr.StatusText = USetStr(31510);//Edit-------------------Vitalii 15:51 21.09.2017
		end;
    recordstore(SVOr,true);
  end;


return;
end;


global function string 200 DuplicateSVOSerial(string Serial)
begin
record SVOHistSerialVc SVHistr;
string 200 tstr;
boolean testf;

    testf = true;
    tstr = "";
    SVHistr.SerialNr = Serial;
    while(loopmain(SVHistr,1,testf))begin
      if(SVHistr.SerialNr!=Serial) then begin testf=false; end;
      if(testf and SVHistr.Qty>-1)then begin
        if(nonblank(tstr))then begin
          tstr = tstr & "," & SVHistr.TransNr;
        end else begin
          tstr = SVHistr.TransNr;
        end;
      end;
    end;
DuplicateSVOSerial = tstr;

return;
end;

global //Edit***************************Sasha2,11:10 27.01.2017 {
procedure CollectLocationBalancesToDate(var vector val locHistBalances,var vector val locAccBalances,date endDate,string locations)
begin
  record LocationVc Locr;
  record ItemHistVc IHr;
  record ObjBalVc ObjBalr;
  record MainVc mainr;
	record TRVc TRr;
	row TRVc TRrw;
	record FBVc FBr;
	row FBVc FBrw;
  array string 30 locationList;
  array string 100 vectorKeys;
  vector string 30 locAccountList;
  Boolean TrHs,testf,skipMainVcF;
  integer i,j,rwcnt,keys,pos;
  string 30 curLoc,curAcc;
  date toDate,balanceDate;
  val dvp,cvp;
  
    GetVectorTags(locHistBalances,vectorKeys);
		for(i=0;i<vectorKeys.length;i=i+1) begin
			locHistBalances[vectorKeys[i]] = 0;
		end;
		
		GetVectorTags(locAccBalances,vectorKeys);
		for(i=0;i<vectorKeys.length;i=i+1) begin
			locAccBalances[vectorKeys[i]] = 0;
		end;
		
		if (BlankDate(endDate)) then begin
		  toDate = CurrentDate;
		end else begin
		  toDate = endDate;
		end;
    
    if (NonBlank(locations)) then begin
      pos = 0;
      ExtractObj(locations,pos,curLoc);
      while (NonBlank(curLoc)) begin
        Locr.Code = curLoc;
        if (ReadFirstMain(Locr,1,true)) then begin
          locationList[locationList.length] = Locr.Code;
          locAccountList[Locr.Code] = Locr.StockAcc;
        end;
        ExtractObj(locations,pos,curLoc);
      end; 
    end else begin
      Locr.Code = "";
      while (LoopMain(Locr,1,true)) begin
        locationList[locationList.length] = Locr.Code;
        locAccountList[Locr.Code] = Locr.StockAcc;
      end;
    end;
    
    for (i=0;i<locationList.length;i=i+1) begin
      skipMainVcF = false;
      curLoc = locationList[i];
      curAcc = locAccountList[curLoc];
      TrHs = true;
  		IHr.Location = curLoc;
  		while (LoopKey("SerNrPerLoc",IHr,1,TrHs)) begin
  			testf = true;
  			if (IHr.Location!=curLoc) then begin TrHs = false; testf = false; end;
  			if (toDate<IHr.TransDate) then begin testf = false; end;
  			if (IHr.StockAffectf!=1) then begin testf = false; end;
  			if (testf) then begin
  				if (IHr.Qty>0) then begin
  				  locHistBalances[curLoc] = locHistBalances[curLoc] + IHr.TotCostPrice;
  				end else begin
  					locHistBalances[curLoc] = locHistBalances[curLoc] - IHr.TotCostPrice;
  				end;		
  			end;
  		end; RESETLOOP(IHr);
  		
  		if (NonBlank(curAcc)) then begin
    		if (GetMonth(AddDay(toDate,1))!=GetMonth(toDate)) then begin
    		  skipMainVcF = true;
    		  balanceDate = toDate;
    		end else begin
    		  balanceDate = AddMonth(toDate,-1);
    		end;
    		
    		ObjBalr.AccNumber = curAcc;
        if (ReadFirstMain(ObjBalr,1,true)) then begin
          dvp = GetBalance(ObjBalr,"transdebit",balanceDate);
          cvp = GetBalance(ObjBalr,"transcredit",balanceDate);
          locAccBalances[curLoc] = locAccBalances[curLoc] + (dvp - cvp);
        end else begin
          LogText(0,"CollectLocationBalancesToDate. Not found ObjBalVc for account " & curAcc);
        end;  	
        
        if (skipMainVcF==false) then begin
          mainr.AccNumber = curAcc;
          mainr.TransDate = StringToDate("1/" & GetMonth(toDate) & "/" & GetYear(toDate));
      		TrHs = true;
      		while (LoopMain(mainr,2,TrHs)) begin
      			if ((mainr.AccNumber!=curAcc) or (mainr.TransDate > toDate))  then begin TrHs = false; end;
      			if (TrHs) then begin
      				if (mainr.FileName=="TRVc") then begin
      					TRr.Number = mainr.TransNr;
      					TRr.IntYc = mainr.IntYc;
      					if (ReadFirstMain(TRr,2,true)) then begin
      						if (mainr.TransDate == TRr.TransDate) then begin
      							rwcnt = MatRowCnt(TRr);
      							for (j=0;j<rwcnt;j=j+1) begin
      								MatRowGet(TRr,j,TRrw);
      								if ((TRrw.AccNumber == curAcc) and (TRrw.ovst <> 1) and (TRrw.stp == 1)) then begin
      								  locAccBalances[curLoc] = locAccBalances[curLoc] + (TRrw.DebVal - TRrw.CredVal);
      								end;
      							end;
      						end;
      					end;
      				end;
      				if (mainr.FileName=="FBVc") then begin
      					FBr.SerNr = mainr.TransNr;
      					if (ReadFirstMain(FBr,1,true)) then begin
      					  testf = true;
      					  if (mainr.TransDate!=FBr.TransDate or NonBlank(FBr.Objects)) then begin testf = false; end;
      						if (testf) then begin
      							rwcnt = MatRowCnt(FBr);
      							for (j=0;j<rwcnt;j=j+1) begin
      								MatRowGet(FBr,j,FBrw);
      								if (FBrw.AccNumber == curAcc) then begin
      								  locAccBalances[curLoc] = locAccBalances[curLoc] + (FBrw.DebVal - FBrw.CredVal);
      								end;
      							end;
      						end;
      					end;
      				end;
      			end;
      		end;
      		ResetLoop(mainr);
        end;
  		end;
  		
      //LogText(0,"Account:" & ObjBalr.AccNumber);
      //LogText(0,"Location:" & curLoc & ", IHr balance:" & locHistBalances[curLoc]);
      //LogText(0,"Location:" & curLoc & ", Acc balance:" & locAccBalances[curLoc]);	
      //LogText(0,"-----------------------------------" & endDate);
      
    end;

  return;
end; //Edit***************************Sasha2,11:10 27.01.2017 }

/*global //Edit***************************Sasha2,11:10 27.01.2017 {
procedure ChkCollectLocationBalancesToDate()
begin
  vector val locHistBalances;
  vector val locAccBalances;
  date blankd;
    
    CollectLocationBalancesToDate(locHistBalances,locAccBalances,StringToDate("21/12/2016"),"");

  return;
end;*/ //Edit***************************Sasha2,11:10 27.01.2017 }

global procedure StockBalDiffRn(record RcVc RepSpec)
begin
	vector val locHistBalances;
	vector val locAccBalances;
	date endDate;
	string 200 locations;
	record LocationVc Locr;
	date todate;
	boolean Foundf;
	record ActVc Act;
	//record UserVc User;
	
	if(nonblank(RepSpec.d1))then begin
		todate = RepSpec.d1;
	end else begin
		todate = currentdate;
	end;
	CollectLocationBalancesToDate(locHistBalances,locAccBalances,todate,locations);
	
	/*Actr.TransDate = currentdate;
	while()begin
	
	end;*/
	
	startreportnoheaderjob("îçá´æí´ñòü êëàäà ç ðàõóíêîì!");
		startformat(15);
			outstring(0,0,"àòà",false);
			outstring(50,0,todate,false);
		endformat;
		black_divider(0,100);
		startformat(15);
			outstring(0,0,"êëàä",false);
			outstring(80,0,"àðò´ñòü ñêëàäó",false);
			outstring(160,0,"à ðàõóíêó",false);
			outstring(240,0,"´çíèöß",false);
			outstring(320,0,"àõóíîê ñêäàäó",false);
		endformat;
		
		
		while(loopmain(Locr,1,true))begin
			if(locHistBalances[Locr.Code]!=0 and locAccBalances[Locr.Code]!=0)then begin
				startformat(15);
					outstring(0,0,Locr.Code,false);
					outstring(80,0,locHistBalances[Locr.Code],false);
					outstring(160,0,locAccBalances[Locr.Code],false);
					outstring(240,0,locHistBalances[Locr.Code] - locAccBalances[Locr.Code],false);
					outstring(320,0,Locr.StockAcc,false);
				endformat;
			end;
		end;
	endjob;

return;
end;

global updating procedure StockBalDiffMn(string users)
begin
	record ActVc Actr;
	record LocationVc Locr;
	vector val locHistBalances;
	vector val locAccBalances;
	string 200 locations;
	boolean foundf;
  //record AcceptanceRulesVc Acptr;

	
	CollectLocationBalancesToDate(locHistBalances,locAccBalances,currentdate,locations);
	foundf = false;
	while(loopmain(Locr,1,true))begin
		if(locHistBalances[Locr.Code]!=0 and locAccBalances[Locr.Code]!=0)then begin
			foundf = true;
		end;
	end;
	
	if(foundf)then begin
		recordnew(Actr);
			Actr.Comment = "§ñíó¹ ðîçá´æí´ñòü ñêëàäó ç áàëàíñîì íà " & currentdate;
			//Actr.AlarmType = kAlarmTypeMessage; //Edit-------------------Vitalii 11:31 23.12.2016
      Actr.AlarmType = kAlarmTypeNone;
			Actr.TodoFlag = kTodoFlagTodo;
			//Actr.SymbNr = 3;
			Actr.ActType = "MES";
			Actr.MainPersons = users;
			
		recordstore(Actr,true);
	end;
	
return;
end;

global updating procedure UnreservOldOrdersMn()
begin
  record ORVc ORr;
  row ORVc ORrw;
  record RetVc Retr;
  row RetVc Retrw;
  boolean TrHs,testf,TrHs1;
  integer mtrw,i,rescnt,mtrw1,j;
  
  
  
  ORr.Reserved = 1;
  TrHs = true;
  while(loopkey("Reserved",ORr,1,TrHs))begin
    testf = true;
    if(ORr.Reserved<1)then begin  TrHs = false; testf = false;  end;
    
    if(testf)then begin
      rescnt = 0;
      mtrw = matrowcnt(ORr);
      for(i=0;i<mtrw;i=i+1)begin
        matrowget(ORr,i,ORrw);
        rescnt = rescnt + ORrw.Quant - ORrw.Shipd2;
        
        if((ORrw.Quant-ORrw.Shipd2)>0)then begin
          Retr.OrdNr = ORr.SerNr;
          TrHs1=true;
          while(loopkey("OrdNr",Retr,1,TrHs1))begin
            if(Retr.OrdNr!=ORr.SerNr)then begin TrHs1=false; end;
            if(TrHs1)then begin
              mtrw1 = matrowcnt(Retr);
              for(j=0;j<mtrw1;j=j+1)begin
                matrowget(Retr,j,Retrw);
                if(Retrw.ArtCode==ORrw.ArtCode and Retrw.OrdRow==i)then begin
                  rescnt = rescnt - Retrw.Quant;
                end;
              end;
            end;
          end;
          resetloop(Retr);
        end;
      end;
      
      if(rescnt==0)then begin
        ORr.Reserved=0;
        RecordStore(ORr,true);
        logtext(0,currentcompany & " Unreserv Order " & ORr.SerNr);
      end;
      
    end;
  end; 

return;
end;


global updating procedure FixReservesMn()
begin
	record ORVc ORr;
	row ORVc ORrw;
	record ItemStatusVc ISr;
	boolean TrHs,testf,TrHs1;
	integer mtrw,i,rescnt,mtrw1,j;
	
	ISr.Code = "";
	while(loopmain(ISr,1,true))begin
		if(ISr.RsrvQty!=0)then begin
			ISr.RsrvQty = 0;
			recordStore(ISr,true);
		end;
	end;
	
	ORr.Reserved = 1;
  TrHs = true;
	while(loopkey("Reserved",ORr,1,TrHs))begin
    testf = true;
    if(ORr.Reserved<1)then begin  TrHs = false; testf = false;  end;
    if(ORr.Closed==1)then begin testf = false;  end;
    
    if(testf)then begin
      rescnt = 0;
      mtrw = matrowcnt(ORr);
    		for(i=0;i<mtrw;i=i+1)begin
        matrowget(ORr,i,ORrw);
        if((ORrw.Quant-ORrw.Shipd1)>0)then begin
        		ISr.Code = ORrw.ArtCode;
        		ISr.Location = ";;;";
        		if(readfirstmain(ISr,2,true))then begin
        			ISr.RsrvQty = ISr.RsrvQty + (ORrw.Quant-ORrw.Shipd1);
        			recordstore(ISr,true);
        		end;
        		ISr.Code = ORrw.ArtCode;
        		ISr.Location = ORr.Location;
        		if(nonblank(ORrw.Location))then begin
        			ISr.Location = ORrw.Location;
        		end;
        		if(readfirstmain(ISr,2,true))then begin
        			ISr.RsrvQty = ISr.RsrvQty + (ORrw.Quant-ORrw.Shipd1);
        			recordstore(ISr,true);
        		end;
        end;
      end;   		
    end;
	end;

return;
end;



global //Edit***************************Sasha2,17:37 15.04.2015 {
updating procedure ImportWebItemsIn()
begin
string 100 artcode,classtoadd,classtodel,tempstr,newdisps;
record INVc INr;
record DIVc DIr;
boolean testf;
integer cnt,pos;
record WebSyncRegVc WSRr;

	cnt = 0;
	while (TestEOF()==false) begin
		artcode = ImportField;
		classtoadd = ImportField; 
		classtodel = ImportField;
		
		if(nonblank(artcode))then begin
			WSRr.ArtCode = artcode;
			if(readfirstmain(WSRr,1,true))then begin
			  testf = false;
			  			  
			  if (NonBlank(classtodel)) then begin
			    testf = true;
			              
  			  pos = 0;
  			  newdisps = "";
          ExtractObj(WSRr.Available,pos,tempstr);
          while (nonblank(tempstr)) begin
            if (SetInSet2(tempstr,classtodel)==false) then begin
              if (Blank(newdisps)) then begin
                newdisps = tempstr;
              end else begin
                newdisps = newdisps & "," & tempstr;
              end;
            end;
            ExtractObj(WSRr.Available,pos,tempstr);
          end; 
          //if (NonBlank(newdisps)) then begin
            WSRr.Available = newdisps; 
          //end;
			  end;
			  
			  if (NonBlank(classtoadd)) then begin
			    testf = true;
			    			    
  			  if (NonBlank(WSRr.Available)) then begin
  			  	if(!setinset(classtoadd,WSRr.Available))then begin
							WSRr.Available = WSRr.Available & "," & classtoadd;
  				  end;
  				end else begin
  				  WSRr.Available = classtoadd;
  				end;
			  end; 

				if (testf) then begin
					WSRr.DateChange = currentdate;
				  recordStore(WSRr,true);
				end;
 LSomeErrorInDI:; 			
			end;
		end;
	NextImportLine(true);   
  end; 

LImportNewItemsWithClassIn:;
	
return;
end; //Edit***************************Sasha2,17:37 15.04.2015 }

global //Edit***************************Sasha2,16:35 14.12.2016 {
updating procedure UpdateTextFieldsForQuickSearchMn(record RcVc RepSpec)
begin
  record SVOVc SVOr;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  Boolean saveF;
  
      SVOr.SerNr = -1;
      while (LoopMain(SVOr,1,true)) begin
        rwcnt = MatRowCnt(SVOr);
        if (rwcnt>0) then begin
          saveF = false;
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(SVOr,i,SVOrw);
            if (NonBlank(SVOrw.ArtCode)) then begin
              //if (Blank(SVOr.ArtCodeTextSearch)) then begin
                SVOr.ArtCodeTextSearch = SVOrw.ArtCode;
                saveF = true;
              /*end else begin
                if (len(SVOr.ArtCodeTextSearch & " " & SVOrw.ArtCode)<=255 and FindStringInString(SVOr.ArtCodeTextSearch,SVOrw.ArtCode)==false) then begin
                  SVOr.ArtCodeTextSearch = SVOr.ArtCodeTextSearch & " " & SVOrw.ArtCode;
                  saveF = true;
                end;
              end;*/
              //if (Blank(SVOr.SpecTextSearch)) then begin
                SVOr.SpecTextSearch = SVOrw.Spec;
                saveF = true;
              /*end else begin
                if (len(SVOr.SpecTextSearch & " " & SVOrw.Spec)<=255 and FindStringInString(SVOr.SpecTextSearch,SVOrw.Spec)==false) then begin
                  SVOr.SpecTextSearch = SVOr.SpecTextSearch & " " & SVOrw.Spec;
                  saveF = true;
                end;
              end;*/
              //if (Blank(SVOr.SerialNrTextSearch)) then begin// Edit ************************** Tuesday, 21 February 2017 11:28:19
                SVOr.SerialNrTextSearch = SVOrw.NewSerialNr;
                saveF = true;
              /*end else begin// Edit ************************** Tuesday, 21 February 2017 11:28:20
                if (len(SVOr.SerialNrTextSearch & " " & SVOrw.SerialNr)<=255 and FindStringInString(SVOr.SerialNrTextSearch,SVOrw.SerialNr)==false) then begin
                  SVOr.SerialNrTextSearch = SVOr.SerialNrTextSearch & " " & SVOrw.SerialNr;
                  saveF = true;
                end;
              end;*/
            end;
          end;
          if (saveF) then begin
            RECORDSTORE(SVOr,true);
          end;
        end;
      end;

  return;
end; //Edit***************************Sasha2,16:35 14.12.2016 }

global //Edit***************************Sasha2,14:56 16.02.2017 {
updating procedure UpdPlanShipDateFrPlanShipSVOMn(record RcVc RepSpec)
begin
  record SVOVc SVOr;
  Boolean saveF;
  
      SVOr.SerNr = -1;
      while (LoopMain(SVOr,1,true)) begin
        if (SVOr.PlanShipDate!=StringToDate(SVOr.PlanShip)) then begin
          SVOr.PlanShipDate = StringToDate(SVOr.PlanShip);
          RECORDSTORE(SVOr,true);
        end;
      end;

  return;
end; //Edit***************************Sasha2,14:56 16.02.2017 }

global //Edit***************************Sasha2,15:27 28.02.2017 {
function string 50 GetPhone1SerNrByPhone(string phone)
begin
  record Phone1Vc Phoner;
  record SVOVc SVOr;
  string 50 tempPhone,res;
  Boolean testf;
    
    res = "";
    tempPhone = phone;
		if(left(tempPhone,1)<"0" or left(tempPhone,1)>"9")then begin
			tempPhone = "+" & right(tempPhone,len(tempPhone)-1);
		end;
				
		Phoner.PhoneNum = tempPhone;
		testf = readfirstmain(Phoner,1,true);
		if (!testf) then begin
		  Phoner.PhoneNum = "044" & tempPhone;
		  testf = readfirstmain(Phoner,1,true);
		end;
		if (!testf) then begin
		  Phoner.PhoneNum = "+38044" & tempPhone;
		  testf = readfirstmain(Phoner,1,true);
		end;
		if (!testf) then begin
		  Phoner.PhoneNum = "+38" & tempPhone;
		  testf = readfirstmain(Phoner,1,true);
		end;
		if (testf) then begin
	    res = Phoner.PhoneNum;
	  end;
    
    GetPhone1SerNrByPhone = res;
  return;
end; //Edit***************************Sasha2,15:27 28.02.2017 }

global //Edit***************************Sasha2,10:51 10.03.2017 {
updating procedure RecalcRepairSumInPhone1Mn(record RcVc RepSpec)
begin
  record IVVc IVr;
  record SVOVc SVOr;
  record RLinkVc RLinkr;
  record Phone1Vc Phoner;
  Integer notenr,sign,i;
  boolean testf,foundf;
  LongInt svorNr;
  string 100 phone,phone1Code;
  vector Boolean phone1IsFound;
  vector val phoneSumBalance;
  array string 255 indexes;
  string 255 curindex;
  
      IVr.SerNr = -1;
      while (LoopMain(IVr,1,true)) begin
        testf = true;
        svorNr = -1;
        if (IVr.OKFlag==0 or IVr.Invalid==1) then begin testf = false; end;
        if (IVr.Sum4==0) then begin testf = false; end;
        if (testf) then begin
          if (IVr.SVONr!=-1) then begin
            svorNr = IVr.SVONr;
          end else begin
            notenr = 1;
            if (ReadRecordLink(IVr,notenr,SVOr,RLinkr)) then begin
              svorNr = SVOr.SerNr;
            end;
          end;
        end;
        if (svorNr!=-1) then begin
          SVOr.SerNr = svorNr;
          if (ReadFirstMain(SVOr,1,true)) then begin
            if (NonBlank(SVOr.Kontinfo1)) then begin
              phone = SVOr.Kontinfo1;
            end else begin
              phone = SVOr.Phone2;
            end;            
            phone1Code = GetPhone1SerNrByPhone(phone);
            if (NonBlank(phone1Code)) then begin
              foundf = phone1IsFound[phone1Code];
              if (foundf==false) then begin
                Phoner.PhoneNum = phone1Code;
                if (ReadFirstMain(Phoner,1,true)) then begin
                  phone1IsFound[phone1Code] = true;
                  foundf = true;
                end;
              end;
              if (foundf) then begin
                sign = 1;
                if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales or IVr.Sum4<0) then begin
                  sign = -1;
                end;
                phoneSumBalance[phone1Code] = phoneSumBalance[phone1Code] + IVr.Sum4 * sign;
              end;
            end;
          end;
        end;
      end;
      
      GetVectorTags(phoneSumBalance,indexes);
      for (i=0;i<indexes.length;i=i+1) begin
        curindex = indexes[i];
        Phoner.PhoneNum = curindex;
        if (ReadFirstMain(Phoner,1,true) and phoneSumBalance[curindex]<>blankval) then begin
          Phoner.RepairsSum = phoneSumBalance[curindex];
          RECORDSTORE(Phoner,true);
          LogText(0,Phoner.PhoneNum & " Sum:" & Phoner.RepairsSum);
        end;
      end;

  return;
end; //Edit***************************Sasha2,10:51 10.03.2017 }

/*global //Edit***************************Sasha2,15:45 04.08.2015 {
updating function Boolean HandleFromITeckToMMR(record INVc INr,integer currcomp)
begin
  Boolean res;
    
    res = false;
    if (SETCOMPANY(6,false)) then begin
      if (RECORDSTORE(INr,true)) then begin
        res = true;
      end;
      RESETCOMPANY(currcomp);
    end;
    
    HandleFromITeckToMMR = res;
    
  return;
end;*/ //Edit***************************Sasha2,15:45 04.08.2015 }


global //Edit***************************Sasha2,14:33 28.07.2015 {
updating procedure HandleUpdatePricesInORFromStockMov(record StockMovVc SMr,var string error)
begin
  record ORVc ORr;
	row ORVc ORrw;
	record IVVc IVr;
	row StockMovVc SMrw;
	integer i,rwcnt;
	Boolean chsum,sumupf;
	
	  sumupf = false;
	  ORr.SerNr = SMr.OrderNr; 
  	if (ReadFirstMain(ORr,1,true) /*and ORr.OrderClass=="Shops"*/) then begin
      if (ORr.OKFlag>0 or ORr.Closed>0) then begin
        error = "Target Order is OKed or closed";
        goto LHandleUpdatePricesInORFromStockMov;
      end;
      IVr.OrderNr = ORr.SerNr;
      if (ReadFirstKey("OrderNr",IVr,1,true)) then begin
        error = "Target Order has Invoice";
        goto LHandleUpdatePricesInORFromStockMov;
      end;
      rwcnt = MatRowCnt(SMr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SMr,i,SMRw);
        if (SMRw.ORRow>-1) then begin
          MatRowGet(ORr,SMRw.ORRow,ORrw);
          if (SMRw.ArtCode==ORrw.ArtCode) then begin
            chsum = false;
            ORrw.Price = Round(SMRw.NewPrice + SMRw.NewPrice*(0.09),DefaultCurRoundOff);
            MatRowPut(ORr,SMRw.ORRow,ORrw);
            ORVc_PastePrice(ORr,SMRw.ORRow,chsum);
            if (chsum) then begin
              ORDchsum(ORr,SMRw.ORRow);
              sumupf = true;
            end;
          end;
        end;
      end;
      if (sumupf) then begin
        ORSumup(ORr);
      end;
      RECORDSTORE(ORr,true);
  	end;
  	
  LHandleUpdatePricesInORFromStockMov:;
  
  return;
end; //Edit***************************Sasha2,14:33 28.07.2015 }


global
procedure BarcodeIncrement(var string barcode,Integer increment)
begin
  integer lenght,i,lastindex,leftover,base,incr;
  array integer digit;
  boolean testf;
    
    testf = true;
    lenght = len(barcode);
    incr = increment;
    for (i=0;i<lenght;i=i+1) begin
      digit[i] = StringToInt(mid(barcode,i,1));
      lastindex = i;
    end;
    digit[lastindex] = digit[lastindex] + incr;
    while (digit[lastindex]>9 and testf) begin
      leftover = Mod(digit[lastindex],10);
      base = digit[lastindex] - leftover;
      if (base>0) then begin
        digit[lastindex] = leftover;
        incr = base/10;
        lastindex = lastindex - 1;
        digit[lastindex] = digit[lastindex] + incr;
      end;
      if (lastindex==0 and digit[lastindex]>9) then begin
        testf = false;
      end;
    end;
    barcode = "";
    if (testf) then begin
      for (i=0;i<lenght;i=i+1) begin
        barcode = barcode & digit[i];
      end;
    end;
 
  return; 
end;

global  //Edit***************************Sasha2,12:00 22.01.2015 {
updating procedure HandleSetEAN13PU(var record PUVc PUr)
begin
  row PUVc PUrw;
  record INVc INr,IN2r;
  integer mrcnt,i;
  string 40 barcode,tempean;
  boolean TrHs,testf;
  
    mrcnt = MatRowCnt(PUr);
    for (i=0;i<mrcnt;i=i+1) begin
      MatRowGet(PUr,i,PUrw);
      if (NonBlank(PUrw.ArtCode) and blank(PUrw.AlternativeCode)) then begin
        INr.Code = PUrw.ArtCode;
        if (ReadFirstMain(INr,1,true)) then begin
          if (NonBlank(INr.BarCode)) then begin
            PUrw.AlternativeCode = INr.BarCode;
            MatRowPut(PUr,i,PUrw);
          end else begin
            IN2r.BarCode = "2";
            TrHs = true;
            testf = true;
            if (blank(tempean)) then begin
              while (LoopKey("BarCode",IN2r,1,TrHs)) begin
                if (left(IN2r.BarCode,1)!="2") then begin TrHs = false; end;
                if (Len(IN2r.BarCode)==13) then begin testf = false; end;
                if (Len(IN2r.BarCode)!=13 and testf==false) then begin TrHs = false; end;
                if (TrHs) then begin
                  tempean = IN2r.BarCode;
                end;
              end; RESETLOOP(IN2r);
            end;
            if (tempean=="2999999999991") then begin
              goto LHandleSetEAN13PU;
            end;
            if (blank(tempean) or left(tempean,1)!="2" or len(tempean)!=13) then begin
              barcode = "199999999999";
            end else begin
              barcode = mid(tempean,0,12);
            end;
            BarcodeIncrement(barcode,1);
            if (NonBlank(barcode)) then begin 
              CalcEANCHS(barcode);
              INr.BarCode = barcode;
              tempean = barcode;
              RECORDSTORE(INr,true);
              PUrw.AlternativeCode = barcode;
              MatRowPut(PUr,i,PUrw);
            end;
          end;
        end;
      end;
    end;
    
LHandleSetEAN13PU:;    

  return;
end; //Edit***************************Sasha2,12:01 22.01.2015 }

global
updating procedure CopyFrINToMyLabelItemMn(record RcVc RepSpec)
BEGIN
  boolean TrHs,testf;
  record INvc INr;
  row INvc INrw;
  record MyLabelItemVc MLIr;
  row MyLabelItemVc MLIrw;
  integer rwcnt,i;
  string 30 item;

  TrHs = true;
  INr.Code = "";
  while (LoopMain(INr,1,TrHs)) begin
  	testf = true;
  	MLIr.ArtCode = INr.Code;
  	if (!ReadFirstMain(MLIr,1,true)) then begin testf = false; end;
  	if (nonblank(item) and INr.Code==item) then begin testf = false; end;
  	if (testf) then begin
  		item = INr.Code;
  		INr.LPriceList = MLIr.PriceList;
  		INr.LName = MLIr.Name;
  		INr.LDefFormCode = MLIr.DefFormCode;
  		INr.LComment = MLIr.Comment;
  		INr.LCurncyCode = MLIr.CurncyCode;
  		INr.LSize = MLIr.Size;
  		INr.LCust1 = MLIr.Cust1;
  		INr.LCust2 = MLIr.Cust2;
  		INr.LCust3 = MLIr.Cust3;
  		INr.LCust4 = MLIr.Cust4;
  		INr.LCust5 = MLIr.Cust5;
  		INr.LCustInt1 = MLIr.CustInt1;
  		INr.LCustInt2 = MLIr.CustInt2;
  		INr.LCustInt3 = MLIr.CustInt3;
  		INr.LCustInt4 = MLIr.CustInt4;
  		INr.LCustInt5 = MLIr.CustInt5;
  		rwcnt = MatRowCnt(MLIr);
  		for (i=0;i<rwcnt;i=i+1) begin
  			MatRowGet(MLIr,i,MLIrw);
  			INrw.LParam = MLIrw.Param;
  			INrw.LName = MLIrw.Name;
  			INrw.LComment1 = MLIrw.Comment1;
  			INrw.LComment2 = MLIrw.Comment2;
  			INrw.LComment3 = MLIrw.Comment3;
  			INrw.LComment4 = MLIrw.Comment4;
  			INrw.LComment5 = MLIrw.Comment5;
  			INrw.LComment6 = MLIrw.Comment6;
  			INrw.LComment7 = MLIrw.Comment7;
  			INrw.LComment8 = MLIrw.Comment8;
  			INrw.LArInt1 = MLIrw.ArInt1;
  			INrw.LArInt2 = MLIrw.ArInt2;
  			INrw.LArInt3 = MLIrw.ArInt3;
  			INrw.LArInt4 = MLIrw.ArInt4;
  			MatRowPut(INr,i,INrw);
  		end;
  		if (RECORDSTORE(INr,true)) then begin
  		end;
  	end;
  end;
  RETURN;
END;


global
updating procedure ClearINPLMn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  record PLVc PLr;
  record ItemStatusVc ISr;
  
  while(loopmain(INr,1,true))begin
  	if(INr.LastPriceChange<stringtodate("01/01/2014"))then begin
			ISr.Code = INr.Code;
			if(readfirstmain(ISr,1,true)==false)then begin
				recorddelete(INr);
				stepback(INr);
			end;
  	end;
  end;
  
  while(loopmain(PLr,1,true))begin
  	INr.Code = PLr.ArtCode;
  	if(readfirstmain(INr,1,true)==false)then begin
  		recorddelete(PLr);
  		stepback(PLr);
  	end;
  end;
  
  RETURN;
END;

/*global //Edit***************************Sasha2,13:02 04.11.2014 {
updating procedure RecalcShopsItemsMn(record RcVc RepSpec)
BEGIN
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  	
  	RecalcORShops(RepSpec.f1);
  
  RETURN;
END;*/ //Edit***************************Sasha2,13:02 04.11.2014 }

global //Edit***************************Sasha2,12:34 25.03.2015 {
function Boolean OverFlowStock_SerialNrAvail(string item,string ser)
BEGIN
  record SerBalVc SBr;
  Boolean res,TrHs;
  Integer qty;
  
  qty = 0;
  RESETLOOP(SBr);
  SBr.Item = item;
  SBr.Serial = ser;
  TrHs = true;
  while (LoopKey("ItemSerial",SBr,2,TrHs)) begin
    if (SBr.Item!=item or SBr.Serial!=ser) then begin TrHs = false; end;
    if (TrHs) then begin
      qty = qty + SBr.Quant;
    end;
  end;
  if (qty>0) then begin 
    res = true; 
  end;

  OverFlowStock_SerialNrAvail = res;
  RETURN;
END; //Edit***************************Sasha2,12:34 25.03.2015 }



global 
updating procedure INChangeSizeMn()
begin
	record INVc INr;
	
	while(loopmain(INr,1,true))begin
		INr.LSize = 7;
		INr.LPriceList = "";
		recordstore(INr,true);
	end;
	
return;
end;

global //Edit***************************Sasha2,14:38 10.02.2016 {
updating procedure SetClosedCUCARDAndLoyaltyCardMn()
begin
	record CUVc CUr,oldCUr;
	record LoyaltyCardVc LCr,oldLCr;
	boolean TrHs;
	
	LCr.SerNr = "";
	while (LoopMain(LCr,1,true)) begin
	  RecordCopy(oldLCr,LCr);
    LCr.Closed = 1;
    if (RecordUpdate(oldLCr,LCr,true)==0) then begin end;
	end;
	
	TrHs = true;
	CUr.CustCat = "CARD";
	while (LoopKey("Group",CUr,1,TrHs)) begin
		if (CUr.CustCat!="CARD") then begin TrHs = false; end;
		if (TrHs) then begin
		  RecordCopy(oldCUr,CUr);
      CUr.blockedFlag = 1;
      CUr.Name = CUr.Code;
      if (RecordUpdate(oldCUr,CUr,true)==0) then begin end;
		end;
	end;
	
	
return;
end; //Edit***************************Sasha2,14:39 10.02.2016 }

global //Edit***************************Sasha2,14:33 28.07.2015 {
procedure GetDefaultValuesMoveForServiceVc(var record MoveForServiceVc MoveForServicer,integer curcomp)
begin
	record CompaniesBlock CBb;
  row CompaniesBlock CBrw;
	integer i,rwcnt;
	
     BlockLoad(CBb);
     rwcnt = MatRowCnt(CBb);
     for (i=0;i<rwcnt;i=i+1) begin
       MatRowGet(CBb,i,CBrw);
       if (curcomp==StringToInt(CBrw.CompCode)) then begin
         MoveForServicer.FromCompNr = curcomp;
         MoveForServicer.FromCompName = CBrw.CompName;
         i = rwcnt;
       end;
     end;
     MoveForServicer.ToCompNr = 8;
     MoveForServicer.ToCompName = "A-Service";
     MoveForServicer.TransDate = CurrentDate;
  
  return;
end; //Edit***************************Sasha2,14:33 28.07.2015 }

global //Edit***************************Sasha2,14:33 28.07.2015 {
updating procedure CreateMoveForServiceFromStockMov(var record MoveForServiceVc MoveForServicer,record StockMovVc SMr,var string error)
begin
	record INVc INr;
	row StockMovVc SMrw;
	row MoveForServiceVc MoveForServicerw;
	integer i,rwcnt,curcomp;
	
      curcomp = CurrentCompany;
      RecordNew(MoveForServicer);
      GetDefaultValuesMoveForServiceVc(MoveForServicer,curcomp);
      MoveForServicer.StockMovSerNr = SMr.SerNr;
      MoveForServicer.FromLocation = SMr.FrLocation;
      rwcnt = MatRowCnt(SMr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SMr,i,SMRw);
        if (NonBlank(SMRw.ArtCode)) then begin
          INr.Code = SMRw.ArtCode;
          ReadFirstMain(INr,1,true);
          ClearRow(MoveForServicer,MoveForServicerw,1);
          MoveForServicerw.ArtCode = INr.Code;
          MoveForServicerw.Spec = INr.Name;
          MoveForServicerw.SerialNr = SMRw.SerialNr;
          MoveForServicerw.SendQuant = SMRw.SentQuant;
          MoveForServicerw.SendUser = CurrentUser;
          MatRowPut(MoveForServicer,i,MoveForServicerw);
        end;
      end;
      if (RECORDSTORE(MoveForServicer,true)) then begin
        CreateRecordLink(MoveForServicer,curcomp,SMr,curcomp);  
        CreateRecordLink(SMr,curcomp,MoveForServicer,curcomp); 
      end else begin
        error = "MoveForServiceVc was not saved";
      end;
  	
  LCreateMoveForServiceFromStockMov:;
  
  return;
end; //Edit***************************Sasha2,14:33 28.07.2015 }

global updating procedure RecalcRegisters2CurValMn()
begin
	integer i,mtrw;
	val frrate,torate;
	boolean error;
	record TRVc TRr;
	row TRVc TRrw;
	record FBVc FBr;
	row FBVc FBrw;
	
	while(loopmain(FBr,1,true))begin
		FBr.Diff2Val = blankval;
		FBr.D2Sum = blankval;
		FBr.C2Sum = blankval;
		mtrw = matrowcnt(FBr);
		frrate = blankval;
		torate = blankval;
		
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(FBr,i,FBrw);
				if(FBrw.CurncyCode=="UAH")then begin
					FBrw.CurDebVal = FBrw.Deb2Val;
					FBrw.CurCredVal = FBrw.Cred2Val;
				end;
				if(FBrw.CurDebVal==0 and FBrw.CurCredVal==0)then begin
					FBrw.CurncyCode = "";
				end;
				FBrw.Deb2Val = blankval;
				FBrw.Cred2Val = blankval;		
			matrowput(FBr,i,FBrw);	  
		end; 
		
		recordstore(FBr,true);
	end;
	
	while(loopmain(TRr,1,true))begin
		TRr.Diff2Val = blankval;
		TRr.DSum2 = blankval;
		TRr.CSum2 = blankval;
		mtrw = matrowcnt(TRr);
		frrate = blankval;
		torate = blankval;
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(TRr,i,TRrw);
			if(TRrw.Curncy=="UAH")then begin
				if(TRrw.BaseRate1!=0 and TRrw.BaseRate2!=0)then begin
					frrate = TRrw.BaseRate2;
					torate = TRrw.BaseRate1;
				end;
			end;
		end;
		error = false;
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(TRr,i,TRrw);
								
				if(TRrw.Curncy=="UAH")then begin
					TRrw.CurDebVal = TRrw.DebVal2;
					TRrw.CurCredVal = TRrw.CredVal2;
					if(TRrw.BaseRate1!=0 and TRrw.BaseRate2!=0)then begin
						TRrw.FrRate = TRrw.BaseRate2;
						TRrw.ToRateB1 =	TRrw.BaseRate1;
					end else begin
						If(frrate!=0 and torate!=0)then begin
							TRrw.FrRate = frrate;
							TRrw.ToRateB1 =	torate;
						end else begin
							error = true;
						end;
					end;
				end;
				TRrw.DebVal2 = blankval;
				TRrw.CredVal2 = blankval;
				TRrw.BaseRate1 = blankval;
				TRrw.BaseRate2 = blankval;
				
				
			matrowput(TRr,i,TRrw);	  
		end; 
		
		if(!error)then begin
			recordstore(TRr,true);
		end;
	end;
	
return;
end;


global updating procedure FixFBVcMn()
begin
	integer i,mtrw;
	val frrate,torate;
	boolean error;
	record TRVc TRr;
	row TRVc TRrw;
	record FBVc FBr;
	row FBVc FBrw;
	
	while(loopmain(FBr,1,true))begin
		mtrw = matrowcnt(FBr);
		
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(FBr,i,FBrw);
				if(FBrw.CurncyCode=="UAH")then begin
					if(FBrw.Deb2Val!=0 or FBrw.Cred2Val!=0)then begin
						FBrw.CurDebVal = FBrw.Deb2Val;
						FBrw.CurCredVal = FBrw.Cred2Val;
					end else begin
							FBrw.CurncyCode = "";
							FBrw.CurDebVal = blankval;
							FBrw.CurCredVal = blankval;
					end;
				end;
			matrowput(FBr,i,FBrw);	  
		end; 
		
		recordstore(FBr,true);
	end;
		
return;
end;

global 
procedure GitHALFilesMn(record RcVc RepSpec)
begin
	
	logtext(0,"GIT Pull HAL");
	runprogram("./githal.sh","");
	
return;
end;

global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure CustomRegisterRemoveMn(record RcVc RepSpec)
begin
  record IVCashVc IVCashr;
  record POSEventVc POSEventr;
  record CashupHistVc CashupHistr;
  record CashVc Cashr;
  record POSBalanceVc POSBalancer;
  record CashierBalVc CashierBalr;
  record CLInVc CLInr;
	record CLOutVc CLOutr;
	record ERVc ERr;
	record IPVc IPr;
	record OPVc OPr;
	record IVVc IVr;
	record VIVc VIr;
	record POVc POr;
	record SHVc SHr;
	record PUVc PUr;
	record SDVc SDr;
	record StockMovVc StockMovr;
	record RetVc Retr;
	record RetPUVc RetPUr;
	record StockTakeVc StockTaker;
	record SRVc SRr;
	record ORVc ORr;
	record TRVc TRr;
	record FBVc FBr;
	record ItemHistVc IHr;
	record ItemStatusVc ISr;
	record SerBalVc SerBalr;
	record PPVc PPr;
	//record CUVc CUr;
	//record INVc INr;
	record APVc APr;
	record ARVc ARr;
	record OPrsVc OPrsr;
	record IPrsVc IPrsr;
	record RecVc Recr; //òðóêòóðû (åöåïòû)
	record ProdOrderVc ProdOrderr;
	record ProdVc Prodr;
	record SVOVc SVOr;
	record WSVc WSr;
	record WSIVVc WSIVr;
	record SVOSerVc SVOSerr;
	record IntORVc IntORr;
	
	record SynkDBIDRegVc SynkDBIDRegr;
	record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr;
	record SynkDBIDTakenSerVc SynkDBIDTakenSerr;
	record SynkGlobalDBIDTakenSerVc SynkGlobalDBIDTakenSerr;
	record SynkGlobalAutoSerVc SynkGlobalAutoSerr;
	
	//ìîäóëü ðåíäà (rent module)
	record AgreementVc Agreementr;
	record RentResVc RentResr;
	record RentResBookVc RentBookr;
	record DispatchVc Dispatchr;
	record IntINrsVc IntINrsr; //ñòîðèß òîâàðà ïî ðåãèñòðàì OffHireVc, INTransferVc, DispatchVc
	record OffHireVc OffHirer;
	record InternMovVc InternMovr;
	record RentINVc RentINr;
	record IntISVc IntISr;
	record CustRentStatVc CustRentStatr; //customer rent status
	record QualConVc QualConr; //Inspection of rental items
	record RentChrgVc RentChrgr;//Agreement Charges
	record IntSerBalVc IntSBr;
	//record AgreeTypeVc AgreeTyper; //èï íà÷èñëåíèß äëß àðåíäû
	
	record INTransferVc INTransferr;

	//ìîäóëü êòèâû (assets module)
	record AT2UnitVc AT2Unitr; //êòèâû
	/*
	record AT2Vc AT2r; //àòåãîðèè àêòèâîâ
	record AT2WrofVc AT2Wrofr; //ûáûòèå àêòèâîâ
	record AT2DprVc AT2Dprr; //åðåîöåíêà àêòèâîâ
	record AT2TakeVc AT2Taker; //òàòóñ àêòèâîâ
	record AT2TransVc AT2Transr; //ïåðàöèè/âèæåíèå àêòèâîâ
	record DprModVc DprModr; //îäåëè àìîðòèçàöèè

	record ITVc ITr;
	record DIVc DIr;
	record CTypeVc CTyper;
	record UnitVc Unitr;
	record ObjVc Objr;
	record LocationVc Locationr;
	record PDVc PDr;
	record CurncyCodeVc CurncyCoder;
	record AccVc Accr;
	record ActTypeVc ActTyper;
	*/
	record ActVc Actr;
	
	                   //CUSTOM ASERVICE REGISTERS
	//record MyLabelItemVc
	record MyRepricingVc MyRepricingr;
	//record GigieneTextVc GigieneTextr;
	record INNnum1Vc INNnum1r;
	record SVOHistSerialVc SVOHistSerialr;
	record WebSyncRegVc WebSyncRegr;
	//record IssueVc Issuer;
	//record RejectReasonVc RejectReasonr;
	//record DefectVc Defectr;
	record MoveForServiceVc MoveForServicer;
	record PhoneVc Phoner;
	record Phone1Vc Phone1r;
	//record SVOPrintDataVc SVOPrintDatar;
	record BinotelCallEndVc BinotelCallEndr;
	record BinotelCallPushVc BinotelCallPushr;

	Boolean TrHs,testf;
	
  TrHs = true;
	while (LoopMain(IVCashr,1,TrHs)) begin
		recorddelete(IVCashr);
		StepBack(IVCashr);
	end;
	
	TrHs = true;
	while (LoopMain(POSEventr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSEventr);
	    StepBack(POSEventr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(CashupHistr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CashupHistr);
	    StepBack(CashupHistr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Cashr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Cashr);
	    StepBack(Cashr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(POSBalancer,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSBalancer);
	    StepBack(POSBalancer);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(CashierBalr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CashierBalr);
	    StepBack(CashierBalr);
	  end;
	end;

  TrHs = true;
	while (LoopMain(CLInr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CLInr);
	    StepBack(CLInr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(CLOutr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CLOutr);
	    StepBack(CLOutr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(ERr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ERr);
	    StepBack(ERr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IPr);
	    StepBack(IPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IVr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IVr);
	    StepBack(IVr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(VIr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(VIr);
	    StepBack(VIr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(POr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POr);
	    StepBack(POr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(OPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OPr);
	    StepBack(OPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(SHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SHr);
	    StepBack(SHr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(PUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(PUr);
	    StepBack(PUr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(SDr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SDr);
	    StepBack(SDr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(StockMovr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(StockMovr);
	    StepBack(StockMovr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(Retr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Retr);
	    StepBack(Retr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(RetPUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RetPUr);
	    StepBack(RetPUr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(ORr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ORr);
	    StepBack(ORr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(TRr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(TRr);
	    StepBack(TRr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(FBr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(FBr);
	    StepBack(FBr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IHr);
	    StepBack(IHr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(ISr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ISr);
	    StepBack(ISr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SerBalr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SerBalr);
	    StepBack(SerBalr);
	  end;
	end; 

	TrHs = true;
	while (LoopMain(PPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(PPr);
	    StepBack(PPr);
	  end;
	end;
/*
	TrHs = true;
	while (LoopMain(CUr,1,TrHs)) begin
		RecordDelete(CUr);
		StepBack(CUr);
	end;

	TrHs = true;
	while (LoopMain(INr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(INr);
	    StepBack(INr);
	  end;
	end; 
*/	
	TrHs = true;
	while (LoopMain(ARr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ARr);
	    StepBack(ARr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(APr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(APr);
	    StepBack(APr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(OPrsr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OPrsr);
	    StepBack(OPrsr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(IPrsr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IPrsr);
	    StepBack(IPrsr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(StockTaker,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(StockTaker);
	    StepBack(StockTaker);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(SRr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SRr);
	    StepBack(SRr);
	  end;
	end; 
	
	//Clear up allocated serial numbers 
	TrHs = true;
	while (LoopMain(SynkDBIDRegr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkDBIDRegr);
	    StepBack(SynkDBIDRegr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(SynkGlobalDBIDRegr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkGlobalDBIDRegr);
	    StepBack(SynkGlobalDBIDRegr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(SynkDBIDTakenSerr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkDBIDTakenSerr);
	    StepBack(SynkDBIDTakenSerr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SynkGlobalDBIDTakenSerr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkGlobalDBIDTakenSerr);
	    StepBack(SynkGlobalDBIDTakenSerr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SynkGlobalAutoSerr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SynkGlobalAutoSerr);
	    StepBack(SynkGlobalAutoSerr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Recr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Recr);
	    StepBack(Recr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(ProdOrderr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ProdOrderr);
	    StepBack(ProdOrderr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Prodr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Prodr);
	    StepBack(Prodr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(WSr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(WSr);
	    StepBack(WSr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(WSIVr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(WSIVr);
	    StepBack(WSIVr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(IntORr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IntORr);
	    StepBack(IntORr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SVOSerr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SVOSerr);
	    StepBack(SVOSerr);
	  end;
	end;
	
	TrHs = true;
	SVOr.SerNr = 36043;
	while (LoopMain(SVOr,1,TrHs)) begin
	  testf = true;
	  if (SVOr.SerNr<36043) then begin testf = false; end;
	  if (testf) then begin
	    RecordDelete(SVOr);
	    StepBack(SVOr);
	  end;
	end;
	//Rent
	TrHs = true;
	while (LoopMain(Agreementr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Agreementr);
	    StepBack(Agreementr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(RentResr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RentResr);
	    StepBack(RentResr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(RentBookr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RentBookr);
	    StepBack(RentBookr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(Dispatchr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Dispatchr);
	    StepBack(Dispatchr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IntINrsr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IntINrsr);
	    StepBack(IntINrsr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(OffHirer,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OffHirer);
	    StepBack(OffHirer);
	  end;
	end;

	TrHs = true;
	while (LoopMain(InternMovr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(InternMovr);
	    StepBack(InternMovr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(RentINr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RentINr);
	    StepBack(RentINr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IntISr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IntISr);
	    StepBack(IntISr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(CustRentStatr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CustRentStatr);
	    StepBack(CustRentStatr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(QualConr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(QualConr);
	    StepBack(QualConr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(RentChrgr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RentChrgr);
	    StepBack(RentChrgr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(IntSBr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IntSBr);
	    StepBack(IntSBr);
	  end;
	end;
/*	
	TrHs = true;
	while (LoopMain(AgreeTyper,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(AgreeTyper);
	    StepBack(AgreeTyper);
	  end;
	end;
*/	
	TrHs = true;
	while (LoopMain(INTransferr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(INTransferr);
	    StepBack(INTransferr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(AT2Unitr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(AT2Unitr);
	    StepBack(AT2Unitr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Actr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Actr);
	    StepBack(Actr);
	  end;
	end;
	                   //CUSTOM REGISTERS REMOVAL
	
	TrHs = true;
	while (LoopMain(MyRepricingr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(MyRepricingr);
	    StepBack(MyRepricingr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(INNnum1r,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(INNnum1r);
	    StepBack(INNnum1r);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(SVOHistSerialr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SVOHistSerialr);
	    StepBack(SVOHistSerialr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(WebSyncRegr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(WebSyncRegr);
	    StepBack(WebSyncRegr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(MoveForServicer,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(MoveForServicer);
	    StepBack(MoveForServicer);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Phoner,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Phoner);
	    StepBack(Phoner);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Phone1r,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Phone1r);
	    StepBack(Phone1r);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(BinotelCallEndr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(BinotelCallEndr);
	    StepBack(BinotelCallEndr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(BinotelCallPushr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(BinotelCallPushr);
	    StepBack(BinotelCallPushr);
	  end;
	end;

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }

global //Edit***************************Sasha2,13:38 15.06.2017 {
updating function LongInt IntOrdfromWSRemote(record WSVc WSr, var record IntORVc IntORr)
begin
  LongInt res;
	row WSVc WSrw;
	row IntORVc IntORrw;
	record INVc INr;
	integer i,mtrw,rownr;
	val t;
	
	recordnew(IntORr);
	
	IntORr.SVONr = WSr.SVONr;// Edit ************************** Monday, 24 July 2017 14:38:16
	IntORr.WSNr = WSr.SerNr;// Edit ************************** Monday, 24 July 2017 14:38:17
	
	IntORr.Location = WSr.Location;
	mtrw = matrowcnt(WSr);
	rownr = 0;
	For(i=0;i<mtrw;i=i+1) begin
	  matrowget(WSr,i,WSrw);
	  INr.Code = WSrw.ArtCode;
	  if(readfirstmain(INr,1,true))then begin
	  	if(INr.ItemType==kItemTypeStocked)then begin
	  		ClearRow(IntORr,IntORrw,1);
	  		IntORrw.ArtCode = INr.Code;
	  		IntORrw.SerialNr = WSrw.SerialNr;
	  		MatRowPut(IntORr,rownr,IntORrw);
	  		IntORVc_PasteArtCode(IntORr,rownr,true);
	  		MatRowGet(IntORr,rownr,IntORrw);
	  		IntORrw.Quant = WSrw.Quant;
	  		MatRowPut(IntORr,rownr,IntORrw);
	  		IntORchrsum(IntORr,rownr);
	  		rownr = rownr + 1;
	  	end;
	  end;
	end; 
	if (rownr>0) then begin
	  SumupIntOR(IntORr,t);
    IntORr.Total = t;
  end else begin
    res = 31500;
	end;
	if (res==-1) then begin
  	IntORr.SerNr = NextSerNr("IntORVc",IntORr.TransDate,-1,false,"");
    if (IntORr.SerNr==-1) then begin 
      res = 1747;
    end; 
	end;
  if (res==-1) then begin
    if (RecordStore(IntORr,false)) then begin
      CreateRecordLink(IntORr,CurrentCompany,WSr,CurrentCompany);  
      CreateRecordLink(WSr,CurrentCompany,IntORr,CurrentCompany);  
    end;
  end;

	IntOrdfromWSRemote = res;
return;
end; //Edit***************************Sasha2,13:38 15.06.2017 }

global //Edit***************************Sasha2,11:35 09.06.2017 {
updating function Integer CreateAndOKOffHireFromSVO(record SVOVc SVOr,record LocalMachineBlock LocMachBl,var string errMes)
begin
  record OffHireVc OHr,oldOHr;
  Integer r;

    errMes = "";
    if (UserCanAction("SVOToOffHire",true)) then begin
      r = RecordAction_raPasteSVOInOffHire(SVOr,OHr,LocMachBl,false);
      if (r==0) then begin
        RecordCopy(oldOHr,OHr);
        OHr.OKFlag = 1;
        if (RecordUpdate(oldOHr,OHr,true)!=0) then begin 
          r = 31092;
          errMes = " #" & OHr.SerNr & ". " & USetStr(5394);
        end;
      end;
    end else begin
      r = 1274;
      errMes = StringFromStringSet(3,"SVOToOffHire");
    end;
    
    CreateAndOKOffHireFromSVO = r;
  return;
end; //Edit***************************Sasha2,11:35 09.06.2017 }

global //Edit***************************Sasha2,11:35 09.06.2017 {
updating function Integer CreateAndOKDispatchFromSVO(record SVOVc SVOr,record LocalMachineBlock LocMachBl,var string errMes)
begin
  record DispatchVc Dispatchr,oldDispatchr;
  record UserVc Userr;
  row SVOVc SVOrw;
  Integer err,i,rwcnt;
  string 20 location;
  Boolean anyAvailableItemsF,TrHs;
  record IntSerBalVc IntSBr;
  record IntISVc IntISp;
  record INVc INr;

    errMes = "";
    if (UserCanAction("SVOToDispatch",true)) then begin
      //GetCurUser(Userr);
      if(usercanaction("SVOToDispatchAnyway",false))then begin
      	rwcnt = MatRowCnt(SVOr);
      	if (rwcnt>0) then begin
					MatRowGet(SVOr,0,SVOrw);
					IntSBr.Item = SVOrw.ArtCode;
          IntSBr.Serial = SVOrw.SerialNr;
          location = "";
          TrHs = true;
          while(loopkey("ItemSerial",IntSBr,2,TrHs))begin
          	if(IntSBr.Item!=SVOrw.ArtCode)then begin TrHs = false; end;
          	if(IntSBr.Serial!=SVOrw.SerialNr)then begin TrHs = false; end;
          	
          	if(TrHs)then begin
          		if(IntSBr.Quant>0)then begin
          			location = IntSBr.Location;
          			TrHs = false;
          		end;
          	end;
          end;
					
					if(blank(location))then begin
						Userr.Code = CurrentUser;
						ReadFirstMain(Userr,1,true);
						if (Blank(LocMachBl.DefLocation) and Blank(Userr.Location)) then begin
							err = 31098;
						end else begin
							location = LocMachBl.DefLocation;
							if (Blank(location)) then begin
								location = Userr.Location;
							end;
						end;
					end;
      	end;
      end else begin
				Userr.Code = CurrentUser;
				ReadFirstMain(Userr,1,true);
				if (Blank(LocMachBl.DefLocation) and Blank(Userr.Location)) then begin
					err = 31098;
				end else begin
					location = LocMachBl.DefLocation;
					if (Blank(location)) then begin
						location = Userr.Location;
					end;
				end; 
      end;
      
      
      
      if (err==0) then begin
        rwcnt = MatRowCnt(SVOr);
        if (rwcnt>0) then begin
          anyAvailableItemsF = false;
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(SVOr,i,SVOrw);
            if (NonBlank(SVOrw.ArtCode) and NonBlank(SVOrw.SerialNr)) then begin
              INr.Code = SVOrw.ArtCode;
              ReadFirstMain(INr,1,true);
              if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
                IntSBr.Item = SVOrw.ArtCode;
                IntSBr.Serial = SVOrw.SerialNr;
                IntSBr.Location = location;
                if (ReadFirstMain(IntSBr,3,true) and IntSBr.Quant>0) then begin
                  anyAvailableItemsF = true;
                  i = rwcnt;
                end;
              end else begin
                IntISp.Code = SVOrw.ArtCode;
                IntISp.Location = location;
                if (ReadFirstMain(IntISp,2,true) and IntISp.Instock>0) then begin
                  anyAvailableItemsF = true;
                  i = rwcnt;
                end;
              end;
            end;
          end;
          if (anyAvailableItemsF==false) then begin
            err = 31099;
            errMes = " " & location;
          end;
        end;
      end;
      if (err==0) then begin
        err = RecordAction_raPasteSVOInDispatch(SVOr,Dispatchr,LocMachBl,false);
      end;
      if (err==0) then begin
        RecordCopy(oldDispatchr,Dispatchr);
        Dispatchr.OKFlag = 1;
        if (RecordUpdate(oldDispatchr,Dispatchr,true)!=0) then begin 
          err = 11580;
          errMes = " #" & Dispatchr.SerNr & ". " & USetStr(5394);
        end;
      end;
    end else begin
      err = 1274;
      errMes = StringFromStringSet(3,"SVOToDispatch");
    end;
    
    CreateAndOKDispatchFromSVO = err;
  return;
end; //Edit***************************Sasha2,11:35 09.06.2017 }

//Edit***************************Sasha2,16:49 15.06.2017 { 
updating procedure CreateActFromSVOForInspectorWithActType(record SVOVc SVOr,string actType,LongInt delayHours,string message,string users)
begin
  record ActVc Actr,oldActr;
	string 50 curPhone;
	row SVOVc SVOrw;
	record INVc INr;
	boolean createf,TrHs,testf,foundf;
	
	if (SVOr.SerNr>-1 and NonBlank(actType)) then begin
	  curPhone = SVOr.Kontinfo1;
	  if (Blank(curPhone)) then begin
	    curPhone = SVOr.Phone2;
	  end;
	  Actr.SVOSerNr = SVOr.SerNr;
	  TrHs = true;
	  foundf = false;
	  while (LoopKey("SVOSerNr",Actr,1,TrHs)) begin
	    testf = true;
	    if (Actr.SVOSerNr!=SVOr.SerNr) then begin TrHs = false; testf = false; end;
	    if (Actr.ActType!=actType) then begin testf = false; end;
	    if (testf) then begin
	      //Actr.Comment = SVOr.SerNr & " " & message;
  		  //recordstore(Actr,true);
	      TrHs = false;
	      foundf = true;
	    end;
	  end;
	  if (foundf==false) then begin
	    createf = true;
  		recordnew(Actr);
  		Actr.MainPersons = "";
  		Actr.Comment = SVOr.SerNr & " " & message;
  		Actr.CUCode = SVOr.CustCode;
  		Actr.CUName = SVOr.Addr0;
  		//Actr.AlarmType = kAlarmTypeMessage; //Edit-------------------Vitalii 11:31 23.12.2016
      Actr.AlarmType = kAlarmTypeNone;
  		Actr.SVOSerNr = SVOr.SerNr;
  		Actr.TodoFlag = kTodoFlagTodo;
  		Actr.SymbNr = 3;
  		Actr.ActType = actType;
  		if (delayHours>0) then begin
  		  Actr.StartTime = StringToTime("00:00:00");
  		  Actr.TransDate = AddDay(Actr.TransDate,delayHours);
  		  Actr.EndDate = AddDay(Actr.EndDate,delayHours);
  		end;
  		Actr.Phone = curPhone;
  		Actr.MainPersons = users;
  		if (NonBlank(SVOr.CustomField7)) then begin
  			if(blank(Actr.MainPersons))then begin
					Actr.MainPersons = SVOr.CustomField7;
			  end else begin
			  	Actr.MainPersons = Actr.MainPersons & "," & SVOr.CustomField7;
			  end;
			end;
			if (NonBlank(SVOr.Inspector) and SetInSet(SVOr.Inspector,Actr.MainPersons)==false) then begin
			  Actr.MainPersons = SVOr.Inspector & "," & Actr.MainPersons;
			end;
  		/*if(matrowcnt(SVOr)>0)then begin
  			matrowget(SVOr,0,SVOrw);
  			INr.Code = SVOrw.ArtCode;
  			if(readfirstmain(INr,1,true))then begin
  				Actr.Comment = INr.Code & " " & Actr.Comment;
  				Actr.Comment = addhours(currenttime,2) & " " & Actr.Comment; //Edit***************************Sasha2,16:14 23.05.2017 }
  			end;	
  		end;	*/		
	  end;
  	if(NonBlankDate(SVOr.RegDate)/*(SVOr.OrderStatus>0 or SVOr.DoneMark>0)*/)then begin
  		Actr.SVOSerNr = SVOr.SerNr;
  		TrHs = true;
  	  RESETLOOP(Actr);
  	  while (LoopKey("SVOSerNr",Actr,1,TrHs)) begin
  	    testf = true;
  	    if (Actr.SVOSerNr!=SVOr.SerNr) then begin TrHs = false; testf = false; end;
  	    if (Actr.ActType!=actType) then begin testf = false; end;
  	    if (testf) then begin
  	      if(Actr.OKFlag==0)then begin
    				RecordCopy(oldActr,Actr);
    				if (Blank(Actr.MainPersons)) then begin
  	          Actr.MainPersons = ",";
  	        end;
    				Actr.OKFlag = 1;
    				RecordUpdate(oldActr,Actr,true);
    			end;
  	      TrHs = false;
  	    end;
  	  end;
  	  createf = false;
  	end;
  	
  	if(createf)then begin	
  		Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  		if(recordstore(Actr,true))then begin
  			CreateRecordLink(SVOr,CurrentCompany,Actr,CurrentCompany);  
  			CreateRecordLink(Actr,CurrentCompany,SVOr,CurrentCompany); 
  		end;
  	end;
	end;

return;
end; //Edit***************************Sasha2,16:49 15.06.2017 }

global //Edit***************************Sasha2,16:49 15.06.2017 { 
updating procedure CreateActFromSVOForInspectorIfItemIssued(record SVOVc SVOr)
begin
	
	CreateActFromSVOForInspectorWithActType(SVOr,"CLLCL",0,"åìîíò ãîòîâ.",SVOr.ServiceManager);
	CreateActFromSVOForInspectorWithActType(SVOr,"RMDCL",5,"àïîìíèòü êëèåíòó çàáðàòü îòðåìîíòèðîâàííóþ òåõíèêó.","");

return;
end; //Edit***************************Sasha2,16:49 15.06.2017 }

global //Edit***************************Sasha2,16:49 15.06.2017 {    
updating procedure CreateActFromSVOForInspectorIfItemRejected(record SVOVc SVOr)
begin

	CreateActFromSVOForInspectorWithActType(SVOr,"RJCTD",5,"àïîìíèòü êëèåíòó çàáðàòü òåõíèêó áåç ðåìîíòà.","");
	CreateActFromSVOForInspectorWithActType(SVOr,"RJC",0,"àêàç îòìåíåí. îáðàòü óñòðîéñòâî íà âûäà÷ó!","");

return;
end; //Edit***************************Sasha2,16:49 15.06.2017 }*/

global //Edit***************************Sasha2,11:47 03.07.2017 {
updating procedure UpdateSVOOfServiceMYMn(record RcVc RepSpec)
begin
	record SVOVc SVOr;
	Boolean TrHs,updateF;
	
    SVOr.SerNr = -1;
    TrHs = true;
    while (LoopMain(SVOr,1,TrHs)) begin
      if (SVOr.SerNr>9999999) then begin TrHs = false; end;
      if (TrHs) then begin
        updateF = false;
        if (NonBlankDate(SVOr.PlanShipDate) and SVOr.OrderStatus!=2) then begin
          SVOr.OrderStatus = 2;
          updateF = true;
        end;
        if (Blank(SVOr.Kontinfo1)) then begin
          SVOr.Kontinfo1 = SVOr.CustCode;
          updateF = true;
        end;
        if (updateF) then begin
          RECORDSTORE(SVOr,true);
        end;
      end;
    end;
  
return;
end; //Edit***************************Sasha2,11:47 03.07.2017 }

global //Edit***************************Sasha2,13:36 12.07.2017 {
updating procedure RemoveCertainSVOMn(record RcVc RepSpec)
begin
	record SVOVc SVOr;
	Boolean TrHs;
	date forDate;
	LongInt count;
	
    forDate = StringToDate("29/6/2017");
    SVOr.TransDate = forDate;
    TrHs = true;
    count = 0;
    while (LoopKey("TransDate",SVOr,1,TrHs)) begin
      if (SVOr.TransDate!=forDate) then begin TrHs = false; end;
      if (TrHs) then begin
        RecordDelete(SVOr);
        StepBack(SVOr);
        count = count + 1;
      end;
    end;
    LogText(0,count & " records removed for date 29/6/2017");
  
return;
end; //Edit***************************Sasha2,13:36 12.07.2017 }

global //Edit***************************Sasha2,15:59 15.07.2017 {
updating procedure MoveSumsFromMatrixToHeadSVOMn(record RcVc RepSpec)
begin
	record SVOVc SVOr;
	row SVOVc SVOrw;
	Boolean TrHs;
	
    SVOr.SerNr = -1;
    TrHs = true;
    while (LoopMain(SVOr,1,TrHs)) begin
      if (SVOr.SerNr>=36042) then begin TrHs = false; end;
      if (TrHs) then begin
        MatRowGet(SVOr,0,SVOrw);
        if (SVOrw.Cost<>0) then begin
          SVOr.WSCost = SVOrw.Cost;
          RecordStore(SVOr,true);
        end;
      end;
    end;
  
return;
end; //Edit***************************Sasha2,15:59 15.07.2017 }

global //Edit***************************Sasha2,13:36 12.07.2017 {
updating procedure ClrarActVc(record RcVc RepSpec)
begin
	record ActVc Acrt;

    while (LoopMain(Acrt,1,true)) begin
			RecordDelete(Acrt);
			StepBack(Acrt);
    end;
  
return;
end; //Edit***************************Sasha2,13:36 12.07.2017 }

global //Edit***************************Sasha2,13:07 01.08.2017 {
updating procedure ActFromPUIfIntOrExists(record PUVc PUr,boolean delflag)
begin
	record ActVc Actr;
	record SVOVc SVOr;
	record WSVc WSr;
	record POVc POr;
	record IntORVc IntORr;
	record LogisticUserBlock LUb;
	row LogisticUserBlock LUrw;
	integer i,rwcnt;
	string 255 users;
	date blankd;
	boolean testf,TrHs;
	
	blankd = Actr.EndDate;
	
  if (PUr.PONr>-1) then begin
    POr.SerNr = PUr.PONr;
    if (ReadFirstMain(POr,1,true) and POr.IntORNo>-1) then begin
      IntORr.SerNr = POr.IntORNo;
      if (ReadFirstMain(IntORr,1,true) and IntORr.WSNr>-1) then begin
        blockload(LUb);
        if(delflag==false)then begin
          WSr.SerNr = IntORr.WSNr;
			    readfirstmain(WSr,1,true);
        	recordnew(Actr);
        	Actr.Comment = "î âíóòðåííåìó çàêàçó Ü" & IntORr.SerNr & " ñäåëàíî îñòóïëåíèå Ü" & PUr.SerNr;
        	Actr.CUCode = WSr.CustCode;
        	Actr.CUName = WSr.Addr0;
        	Actr.AlarmType = kAlarmTypeNone;
        	Actr.SVOSerNr = WSr.SVONr;
        	Actr.TodoFlag = kTodoFlagTodo;
        	Actr.SymbNr = 3;
        	Actr.ActType = "";
        	Actr.StartTime = currenttime;//StringToTime("00:00:00");
        	Actr.TransDate = CurrentDate;
        	Actr.EndDate = blankd;
        	users = IntORr.OurUser & ",";
        	/*rwcnt = matrowcnt(LUb);
        	For(i=0;i<rwcnt;i=i+1) begin
        		matrowget(LUb,i,LUrw);
        		if(nonblank(LUrw.User))then begin
        			if(blank(LUrw.Location))then begin
        				users = users & LUrw.User & ",";
        			end;
        			if(nonblank(LUrw.Location) and LUrw.Location==IntORr.Location)then begin
        				users = users & LUrw.User & ",";
        			end;
        		end;
        	end;*/ 
        	
        	users = left(users,len(users)-1);
        	if(nonblank(users))then begin
        		Actr.MainPersons = users;
        	end else begin
        		Actr.MainPersons = currentuser;
        	end;
        	Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
        	if(recordstore(Actr,true))then begin
        		CreateRecordLink(IntORr,CurrentCompany,Actr,CurrentCompany);  
        		CreateRecordLink(Actr,CurrentCompany,IntORr,CurrentCompany); 
        		CreateRecordLink(IntORr,CurrentCompany,PUr,CurrentCompany);  
        		CreateRecordLink(PUr,CurrentCompany,IntORr,CurrentCompany); 
        	end;
        end else begin
        	/*WSr.SerNr = IntORr.WSNr;
        	readfirstmain(WSr,1,true);
        	Actr.SVOSerNr = WSr.SVONr;
        	TrHs = true;
        	while(loopkey("SVOSerNr",Actr,1,TrHs))begin
        		testf = true;
        		if(Actr.SVOSerNr!=WSr.SVONr)then begin TrHs = false; testf = false; end;
        		if(Actr.ActType = "")then begin testf = false; end;
        		
        		if(testf)then begin
        		
        		end;
        	end;*/
        end;
	    end;
	  end;
  end;
	
return;
end; //Edit***************************Sasha2,13:07 01.08.2017 }

global //Edit***************************Sasha2,22:25 04.08.2017 {
function LongInt IssueVcRecordCheck(record IssueVc Issuer,record IssueVc Issue2r,LongInt stat,LongInt check)
begin
  LongInt res;
  Integer insertmode,updatemode;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  
  if (Issuer.SerNr==-1) then begin
    Issuer.SerNr = NextSerNr("IssueVc",CurrentDate,-1,false,"");
  end;
  
LIssueVcRecordCheck:;  
  IssueVcRecordCheck = res;
  return;
end; //Edit***************************Sasha2,22:25 04.08.2017 }

global //Edit***************************Sasha2,22:25 04.08.2017 {
function LongInt RejectReasonVcRecordCheck(record RejectReasonVc RejectReasonr,record RejectReasonVc RejectReason2r,LongInt stat,LongInt check)
begin
  LongInt res;
  Integer insertmode,updatemode;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  
  if (RejectReasonr.SerNr==-1) then begin
    RejectReasonr.SerNr = NextSerNr("RejectReasonVc",CurrentDate,-1,false,"");
  end;
  
LRejectReasonVcRecordCheck:;  
  RejectReasonVcRecordCheck = res;
  return;
end; //Edit***************************Sasha2,22:25 04.08.2017 }

global //Edit***************************Sasha2,22:25 04.08.2017 {
function LongInt DefectVcRecordCheck(record DefectVc Defectr,record DefectVc Defect2r,LongInt stat,LongInt check)
begin
  LongInt res;
  Integer insertmode,updatemode;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  
  if (Defectr.SerNr==-1) then begin
    Defectr.SerNr = NextSerNr("DefectVc",CurrentDate,-1,false,"");
  end;
  
LDefectVcRecordCheck:;  
  DefectVcRecordCheck = res;
  return;
end; //Edit***************************Sasha2,22:25 04.08.2017 }

//Edit***************************Sasha2,15:12 15.08.2017 {
function string 20 FindSVOPayField(record SVOVc SVOr,string ipPayMode) 
begin
  string 20 SVOPayField;
  record SalesGroupVc SGr;
  boolean TrHs;
    
    SGr.SGroupCode = SVOr.SalesGroup;
    if (readfirstmain(SGr,1,true)) then begin
      if (Blank(SVOPayField) and SGr.FastPMCash==ipPayMode) then begin
        SVOPayField = "cash";
      end;
      if (Blank(SVOPayField) and SGr.FastPMCard==ipPayMode) then begin
        SVOPayField = "card";
      end;
      if (Blank(SVOPayField) and SGr.FastPMBN==ipPayMode) then begin
        SVOPayField = "bn";
      end;
    end; 
    if (Blank(SVOPayField)) then begin
      SGr.SGroupCode = "";
      TrHs = true;
      while (LoopMain(SGr,1,TrHs)) begin
        if (TrHs) then begin
          if (Blank(SVOPayField) and SGr.FastPMCash==ipPayMode) then begin
            SVOPayField = "cash";
          end;
          if (Blank(SVOPayField) and SGr.FastPMCard==ipPayMode) then begin
            SVOPayField = "card";
          end;
          if (Blank(SVOPayField) and SGr.FastPMBN==ipPayMode) then begin
            SVOPayField = "bn";
          end;
          if (NonBlank(SVOPayField)) then begin
             TrHs = false;
          end;
        end;
      end;
    end; 
    
  FindSVOPayField = SVOPayField;
  return;
end; //Edit***************************Sasha2,15:12 15.08.2017 }

global //Edit***************************Sasha2,14:33 15.08.2017 {
updating procedure IPUpdateSVO(record IPVc IPr,Boolean wasUnOkedF)
begin
  record SVOVc SVOr,SVO2r;
  record IVVc IVr;
  row IPVc IPrw;
  Integer i,rwcnt;
  val sumToSVO;
  string 20 payField;
  Boolean saveF,prepaymentF;
  
  rwcnt = MatRowCnt(IPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPr,i,IPrw);
    SVOr.SerNr = -1;
    saveF = false;
    prepaymentF = false;
    if (IPrw.InvoiceNr>-1) then begin
      IVr.SerNr = IPrw.InvoiceNr;
      if (ReadFirstMain(IVr,1,true) and IVr.SVONr>-1) then begin
        SVOr.SerNr = IVr.SVONr;
      end;
    end else begin
      if (IPrw.CUPNr>-1) then begin
        SVOr.SerNr = IPrw.CUPNr;
        prepaymentF = true;
      end;
    end;
    if (SVOr.SerNr>-1 and ReadFirstMain(SVOr,1,true)) then begin
    	recordcopy(SVO2r,SVOr);
      sumToSVO = IPrw.RecVal;
      if (wasUnOkedF) then begin
        sumToSVO = -sumToSVO;
      end;
      payField = FindSVOPayField(SVOr,IPr.PayMode);
      switch (payField) begin
        case "cash":
          SVOr.FastCash = SVOr.FastCash + sumToSVO;
          saveF = true;
        case "card":
          SVOr.FastTerm = SVOr.FastTerm + sumToSVO;
          saveF = true;
        case "bn":
          SVOr.FastPMBN = SVOr.FastPMBN + sumToSVO;
          saveF = true;
      end;
      if (prepaymentF) then begin
        SVOr.PrepaySum = SVOr.PrepaySum + sumToSVO;
        saveF = true;
      end;
      if (saveF) then begin
      	UpdateLoyCard(SVOr,SVO2r);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 15 03 2018 y. î 19:51:40
        RecordStore(SVOr,true);
      end;
    end;
  end;
  return;
end; //Edit***************************Sasha2,14:33 15.08.2017 }

global updating procedure REcalSVOPayments(record RcVc RepSpec)
begin
	record SVOVc SVOr;
	record IPrsVc IPrsr;
	record IVVc IVr;
	boolean testf,TrHs,TrHs2;
	record IPVc IPr;
	row IPVc IPrw;
	integer i,mtrw;
	
	if(RepSpec.long1>-1)then begin
		SVOr.SerNr = RepSpec.long1;
		if(readfirstmain(SVOr,1,true))then begin
			SVOr.FastCash = blankval;
			SVOr.FastTerm = blankval;
			SVOr.FastPMBN = blankval;
			SVOr.PrepaySum = blankval;
			
			resetloop(IVr);
			TrHs = true;
			IVr.SVONr = SVOr.SerNr;
			while(loopkey("SVONr",IVr,1,TrHs))begin
				if(IVr.SVONr!=SVOr.SerNr)then begin TrHs = false; end;
				
				if(TrHs)then begin
					resetloop(IPrsr);
					IPrsr.IVNr = IVr.SerNr;
					TrHs2 = true;
					while(loopkey("IVKey",IPrsr,1,TrHs2))begin
						testf = true;
						if(IPrsr.IVNr!=IVr.SerNr)then begin TrHs2 = false; testf = false; end;
						if(IPrsr.TransType!=1)then begin testf = false; end;
						
						if(testf)then begin
							IPr.SerNr = IPrsr.TransNr;
							if(readfirstmain(IPr,1,true))then begin
								mtrw = matrowcnt(IPr);
								for(i=0;i<mtrw;i=i+1)begin
									matrowget(IPr,i,IPrw);
									if(IPrw.InvoiceNr==IVr.SerNr)then begin
										
									end;
								end;
							end;
						end;
					end;
				end;
			end;
			
			
		end;
	end;

return;
end;


function string 100 WSGetEMCode(record WSVc WSr)
begin
	record SVOVc SVOr;
	string 100 res;
	
	res = WSr.EMCode;
	
	SVOr.SerNr = WSr.SVONr;
	if(readfirstmain(SVOr,1,true))then begin
		if(nonblank(SVOr.ServiceManager))then begin
			res = SVOr.ServiceManager;
		end;
	end;
	WSGetEMCode = res;
return;
end;

global updating procedure FixWSManagerMn(record RcVc RepSpec)
begin
	record WSVc WSr;
	
	WSr.SerNr = -1;
	while(loopmain(WSr,1,true))begin
		switch(WSr.EMCode)begin
			case "": WSr.EMCode = WSGetEMCode(WSr); recordstore(WSr,true); logtext(0,WSr.SerNr & " " & WSr.EMCode);
			case "": WSr.EMCode = WSGetEMCode(WSr); recordstore(WSr,true); logtext(0,WSr.SerNr & " " & WSr.EMCode);
			case "": WSr.EMCode = WSGetEMCode(WSr); recordstore(WSr,true); logtext(0,WSr.SerNr & " " & WSr.EMCode);
			case "": WSr.EMCode = WSGetEMCode(WSr);	recordstore(WSr,true); logtext(0,WSr.SerNr & " " & WSr.EMCode);		
		end;
	end;
  
return;
end;


global updating procedure FIXSOMEACTMn()
begin
	record ActVc Actr;
	record SVOVc SVOr;
	
	
	while(loopmain(Actr,1,true))begin
		if(Actr.OKFlag==0)then begin
			if(Actr.SVOSerNr>0)then begin
				if(Actr.ActType=="RMDCl" or Actr.ActType=="CLLCl" or Actr.ActType=="RMDCL" or Actr.ActType=="CLLCL")then begin
					SVOr.SerNr = Actr.SVOSerNr;
					if(readfirstmain(SVOr,1,true))then begin
						if(nonblankdate(SVOr.RegDate))then begin
							Actr.OKFlag=1;
						end;
					end;
					Actr.MainPersons =  StrReplace(Actr.MainPersons," ",",");
					recordstore(Actr,true);
				end;
			end;		
		end;
	end;
	
return;
end;


global updating procedure RemodeUpdateOtherPhones(string changeuser,string changephone)
begin
record UserVc User;
	
	User.Code = "";
	while(loopmain(User,1,true))begin
		if(User.Code!=changeuser)then begin
			if(User.Phone2==changephone)then begin
				User.Phone2 = "";
				recordstore(User,true);
			end;
		end;
	end;

return;
end;


global updating procedure FillINClass()
begin
	record SVOVc SVOr;
	row SVOVc SVOrw;
	record INVc INr;
	vector boolean infound;
	
	SVOr.SerNr = 0;
	while(loopmain(SVOr,1,true))begin
		if(matrowcnt(SVOr)>0)then begin
			matrowget(SVOr,0,SVOrw);
			if(nonblank(SVOrw.ArtCode))then begin
				INr.Code = SVOrw.ArtCode;
				if(infound[INr.Code]==false)then begin
					if(readfirstmain(INr,1,true))then begin
						if((blank(INr.Disp2) and INr.Disp1=="USER" and blank(INr.Disp3)) or (blank(INr.Disp1) and INr.DispGroups=="USER"))then begin
							INr.Disp2 = "SKLADU";
							INr.Disp2Name = "êëàäèðóåìûé òîâàð";
							if(blank(INr.Disp3))then begin
								INr.Disp3 = "ñòðîéñ001";
								INr.Disp3Name = "ñòðîéñòâî êëèåíòà";
							end;
							if(blank(INr.Disp1))then begin
								INr.Disp1 = "USER";
								INr.Disp1Name = "ñòðîéñòâà êëèåíòîâ";
							end;
							INr.DispGroups = "USER,SKLADU,001";
							logtext(0,INr.Code & " " & INr.Name);
							recordstore(INr,true);
						end;
					end;
					infound[INr.Code] = true;
				end;
			end;
		end;
	end;
	

return;
end;


global updating procedure FillDisp4INClass()
begin
	record SVOVc SVOr;
	row SVOVc SVOrw;
	record INVc INr;
	vector boolean infound;
	record DIVc DIr;
	array string 255 DINames;
	array string 255 DICodes;
	array string 255 DI5Names;
	array string 255 DI5Codes;
	array string 255 DI5Class;
	integer acnt,i,a5cnt;
	record ITVc ITr;
	vector string 255 ITNames;
	string 255 newdisp;
	
	DIr.Code = "";
	while(loopmain(DIr,1,true))begin
		if(DIr.CType=="DISP4" and DIr.DispGroups=="ñòðîéñ001")then begin
			DINames[acnt] = trim(DIr.Name);
			DICodes[acnt] = DIr.Code;
			logtext(0,"*** " & DINames[acnt] & " " & DICodes[acnt]);
			acnt = acnt + 1;
		end;
		if(DIr.CType=="DISP5")then begin
			DI5Names[a5cnt] = trim(DIr.Name);
			DI5Codes[a5cnt] = DIr.Code;
			DI5Class[a5cnt] = DIr.DispGroups;
			a5cnt = a5cnt + 1;
		end;
	end;
	
	ITr.Code = "";
	while(loopmain(ITr,1,true))begin
		ITNames[ITr.Code] = trim(ITr.Comment);
	end;
	
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(INr.Disp1=="USER" and INr.Disp3=="ñòðîéñ001" and blank(INr.Disp4))then begin
			For(i=0;i<acnt;i=i+1) begin
	  		if(DINames[i]==left(INr.Name,len(DINames[i])))then begin
	  			INr.Disp4 = DICodes[i];
	  			INr.Disp4Name = DINames[i];
	  		end;
			end; 
			if(nonblank(INr.Disp4))then begin
				Logtext(0,INr.Code & " " & INr.Name & " " & INr.Disp4 & " " & INr.Disp4Name);
				recordstore(INr,true);
			end;
		end;
	end;
	resetloop(INr);
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(INr.Disp1=="USER" and INr.Disp3=="ñòðîéñ001" and nonblank(INr.Disp4) and blank(INr.Disp5))then begin
			INr.DispGroups = INr.Disp1 & "," & INr.Disp2 & "," & INr.Disp3 & "," & INr.Disp4;
			For(i=0;i<a5cnt;i=i+1) begin
	  		if(DI5Names[i]==ITNames[INr.Group] and DI5Class[i]==INr.Disp4)then begin
	  			INr.Disp5 = DI5Codes[i];
	  			INr.Disp5Name = DI5Names[i];
	  		end;
			end;
			INr.DispGroups = INr.DispGroups & "," & INr.Disp5;
			logtext(0,INr.Code & " " & INr.Group & "  " & INr.Disp5);
			recordstore(INr,true);
		end;
	end;
	
	resetloop(INr);
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		newdisp = "";
		if(nonblank(INr.Disp1) and nonblank(INr.Disp2) and nonblank(INr.Disp3) and nonblank(INr.Disp4) and nonblank(INr.Disp5) and blank(INr.Disp6))then begin
			newdisp = INr.Disp1 & "," & INr.Disp2 & "," & INr.Disp3 & "," & INr.Disp4 & "," & INr.Disp5;
			if(newdisp!=INr.DispGroups)then begin
				INr.DispGroups = newdisp;
				recordstore(INr,true);
			end;
		end;
	end;

return;
end;