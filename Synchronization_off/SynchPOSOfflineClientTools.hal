external updating procedure SynkMachineRegister(string,var record SynkDBIDRegVc,string);
external updating procedure SynkGlobalMachineRegister(string,var record SynkDBIDRegVc,string);
external function Integer OpenMasterWClass();
remote updating procedure CreateInvoiceFromPOSSales_OnServer(record POSSalesVc,record POSSalesVc,string,string,Integer,Integer);
external function Integer GetPOSOffLineCompNo();
remote procedure POSOffLineToServ_SynchRegisters_AreIVCashsStored(Array string,var Array Boolean,var Integer); //Edit***************************Sasha2,14:42 24.09.2014
remote procedure POSServToOffLine_ReadLocalMachineSettings(string,var record LocalMachineIBVc,var record LocalMachineITLVc,var record LocalMachineLoginVc,var record LocalMachineSetVc,var record LocalMachineSPVc,var record LocalMachineVc);
remote function Boolean POSOffline_ShouldItemUpdateStock(string,string);
remote updating procedure POSServToOffLine_SynchRegisters(Integer,Integer,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,string,string); //Edit***************************Sasha2,16:13 22.09.2014
remote updating procedure POSServToOffLine_SynchBefSettings(Integer,Integer,
                        var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt);

procedure SetupSynkLastNumber(var record SynkDBIDRegVc SynkDBIDRegr)
begin
  row SynkDBIDRegVc SynkDBIDRegrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SynkDBIDRegr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SynkDBIDRegr,i,SynkDBIDRegrw);
    SynkDBIDRegrw.LastNumber = NextSerNr(SynkDBIDRegrw.FileName,CurrentDate,SynkDBIDRegrw.From,false,"");
    if (SynkDBIDRegrw.LastNumber>0) then begin
      SynkDBIDRegrw.LastNumber = SynkDBIDRegrw.LastNumber - 1;
    end;
    if (SynkDBIDRegrw.LastNumber==-1) then begin
      SynkDBIDRegrw.LastNumber = SynkDBIDRegrw.To;
    end;
    MatRowPut(SynkDBIDRegr,i,SynkDBIDRegrw);
  end;
  return;
end;

procedure SetupGlobalSynkLastNumber(var record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr)
begin
  row SynkGlobalDBIDRegVc SynkGlobalDBIDRegrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SynkGlobalDBIDRegr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SynkGlobalDBIDRegr,i,SynkGlobalDBIDRegrw);
    SynkGlobalDBIDRegrw.LastNumber = NextSerNr(SynkGlobalDBIDRegrw.FileName,CurrentDate,SynkGlobalDBIDRegrw.From,false,"");
    if (SynkGlobalDBIDRegrw.LastNumber>0) then begin
      SynkGlobalDBIDRegrw.LastNumber = SynkGlobalDBIDRegrw.LastNumber - 1;
    end;
    if (SynkGlobalDBIDRegrw.LastNumber==-1) then begin
      SynkGlobalDBIDRegrw.LastNumber = SynkGlobalDBIDRegrw.To;
    end;
    MatRowPut(SynkGlobalDBIDRegr,i,SynkGlobalDBIDRegrw);
  end;
  return;
end;

updating procedure SetupSynkMachine(var record SynkDBIDRegVc SynkDBIDRegr)
begin
  record SynkDBIDRegVc oldSynkDBIDRegr;
  Integer oldprogmode;
  
  oldprogmode = CompanyDefaultProgramMode;
  SetCompanyProgramMode(kProgramModeLiveSync);
  
  oldSynkDBIDRegr.DBIDCode = SynkDBIDRegr.DBIDCode;
  if (ReadFirstMain(oldSynkDBIDRegr,1,true)) then begin
    if (RecordUpdate(oldSynkDBIDRegr,SynkDBIDRegr,false)==0) then begin
    end;
  end else begin
    if (RecordStore(SynkDBIDRegr,false)) then begin
    end;
  end;
  
  UpdateSyncNumberSeries(SynkDBIDRegr); // primitive can handle both
  
  SetCompanyProgramMode(oldprogmode);
  return;
end;

updating procedure SetupGlobalSynkMachine(var record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr)
begin
  record SynkGlobalDBIDRegVc oldSynkGlobalDBIDRegr;
  Integer oldprogmode;
  
  oldprogmode = CompanyDefaultProgramMode;
  SetCompanyProgramMode(kProgramModeLiveSync);
  
  oldSynkGlobalDBIDRegr.DBIDCode = SynkGlobalDBIDRegr.DBIDCode;
  if (ReadFirstMain(oldSynkGlobalDBIDRegr,1,true)) then begin
    if (RecordUpdate(oldSynkGlobalDBIDRegr,SynkGlobalDBIDRegr,false)==0) then begin
    end;
  end else begin
    if (RecordStore(SynkGlobalDBIDRegr,false)) then begin
    end;
  end;
  
  UpdateSyncNumberSeries(SynkGlobalDBIDRegr); // primitive can handle both
  
  SetCompanyProgramMode(oldprogmode);
  return;
end;

global 
function Boolean CheckIfOfflineCompanyExists(Integer offlinecomp)
BEGIN
  Boolean res;
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  
  BlockLoad(CompaniesRec);
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if (StringToInt(comprw.CompCode)==offlinecomp) then begin
      if (blank(comprw.TCPIP)) then begin
        res = true;
      end;
    end;
  end;
  CheckIfOfflineCompanyExists = res;
  RETURN;
END;

function LongInt ThisMachineLastIVCashNr(record LastSerNrBlock LastSerNrRec,string LocalMachineCode)
BEGIN
  LongInt res;
  row LastSerNrBlock LastSerNrrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(LastSerNrRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LastSerNrRec,i,LastSerNrrw);
    if (LastSerNrrw.LocalMachineCode==LocalMachineCode) then begin
      res = LastSerNrrw.LastIVCashNr;
      i = rwcnt;
    end;
  end;
  ThisMachineLastIVCashNr = res;
  RETURN;
END;

updating procedure POSServToOffLine_SaveLocalMachineSettings(string localmachinecode,record LocalMachineIBVc LMIBr,record LocalMachineITLVc LMITLr,record LocalMachineLoginVc LMLr,record LocalMachineSetVc LMSr,record LocalMachineSPVc LMSPr)
begin
  row LocalMachineIBVc LMIBrw;
  row LocalMachineITLVc LMITLrw;
  row LocalMachineLoginVc LMLrw;
  Integer i,rwcnt;
  row ItemButtonsBlock IBbrw;
  row ItemTileLabelBlock ITLbrw;
  row LocalLoginBlock LLbrw;
  record ItemButtonsBlock IBb;
  record ItemTileLabelBlock ITLb;
  record LocalLoginBlock LLb;
  record LocalMachineBlock LMb;
  record SerPrintBlock SPb;
    
  rwcnt = MatRowCnt(LMIBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMIBr,i,LMIBrw);
    ClearRow(IBb,IBbrw,1);
    IBbrw.Label = LMIBrw.Label;
    IBbrw.ArtCode = LMIBrw.ArtCode;
    IBbrw.colnr = LMIBrw.colnr;
    IBbrw.TileNr = LMIBrw.TileNr;
    IBbrw.ButtonType = LMIBrw.ButtonType;
    MatRowPut(IBb,i,IBbrw);
  end;

  rwcnt = MatRowCnt(LMITLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMITLr,i,LMITLrw);
    ClearRow(ITLb,ITLbrw,1);
    ITLbrw.Label = LMITLrw.Label;
    ITLbrw.colnr = LMITLrw.colnr;
    ITLbrw.TileNr = LMITLrw.TileNr;
    MatRowPut(ITLb,i,ITLbrw);
  end;

  rwcnt = MatRowCnt(LMLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMLr,i,LMLrw);
    ClearRow(LLb,LLbrw,1);
    LLbrw.Code = LMLrw.Code;
    LLbrw.colnr = LMLrw.colnr;
    LLbrw.OnLoginWindow = LMLrw.OnLoginWindow;
    MatRowPut(LLb,i,LLbrw);
  end;
  if (nonblank(LMSr.LocalMachine)) then begin
    LMb.LocalMachineCode = LMSr.LocalMachine;
    LMb.DefLocation = LMSr.DefLocation;
    LMb.DefPrinter = LMSr.DefPrinter;
    LMb.WarnOnDelete = LMSr.WarnOnDelete;
    LMb.NoToolTips = LMSr.NoToolTips;
    LMb.OneBarTabWindow = LMSr.OneBarTabWindow;
    LMb.NoBackGround = LMSr.NoBackGround;
    LMb.WideScrollBars = LMSr.WideScrollBars;
    LMb.TouchScreenLook = LMSr.TouchScreenLook;
    LMb.DefExpCodepage = LMSr.DefExpCodepage;
    LMb.FiscalPrinter = LMSr.FiscalPrinter;
    LMb.DefCustCode = LMSr.DefCustCode;
    LMb.DefRestDisp = LMSr.DefRestDisp;
    LMb.entryFont = LMSr.entryFont;
    LMb.reportFont = LMSr.reportFont;
    LMb.reportFontSize = LMSr.reportFontSize;
    LMb.MirrorWindow = LMSr.MirrorWindow;
    LMb.NoServerModeIdle = LMSr.NoServerModeIdle;
    LMb.UseDisplay = LMSr.UseDisplay;
    LMb.LimitedProdEntry = LMSr.LimitedProdEntry;
    LMb.DefReturnLocation = LMSr.DefReturnLocation;
    LMb.TerminalID = LMSr.TerminalID;
    LMb.CommPort = LMSr.CommPort;
    LMb.BranchID = LMSr.BranchID;
    LMb.UserStr1 = LMSr.UserStr1;
    LMb.UserStr2 = LMSr.UserStr2;
    LMb.UserStr3 = LMSr.UserStr3;
    LMb.UserStr4 = LMSr.UserStr4;
    LMb.UserStr5 = LMSr.UserStr5;
    LMb.ResLoc = LMSr.ResLoc;
    LMb.ResClass = LMSr.ResClass;
    LMb.ActTypePastePerClass = LMSr.ActTypePastePerClass;
    LMb.SkypeInt = LMSr.SkypeInt;
    LMb.ItemPasteSpecial = LMSr.ItemPasteSpecial;
    LMb.PLCode = LMSr.PLCode;
    LMb.SyncRecordforPOS = LMSr.SyncRecordforPOS;
    LMb.SyncINClass = LMSr.SyncINClass;
    LMb.ShipToAccount = LMSr.ShipToAccount;
    LMb.POSButtonGroup = LMSr.POSButtonGroup;
    LMb.IncrementalReceiptPrinting = LMSr.IncrementalReceiptPrinting;
    LMb.BackgroundMailSync = LMSr.BackgroundMailSync;
    LMb.LockSysEncoderNo = LMSr.LockSysEncoderNo;
    LMb.POSButtonsPosition = LMSr.POSButtonsPosition;
    LMb.POSFontSize = LMSr.POSFontSize;
    LMb.Supervisor = LMSr.Supervisor;
    if (blank(LMb.Bagger)) then begin
      LMb.Bagger = LMSr.Bagger;
    end;
    LMb.DefaulBaggerSupervisor = LMSr.DefaulBaggerSupervisor;
    LMb.HideQty = LMSr.HideQty;
    LMb.CCRequireAuthCode = LMSr.CCRequireAuthCode;
    LMb.ShowBaggerSupervisor = LMSr.ShowBaggerSupervisor;
    LMb.UseCustomerDisplay = LMSr.UseCustomerDisplay;
    LMb.MailboxPasteSpecial = LMSr.MailboxPasteSpecial;
    LMb.GMTOffset = LMSr.GMTOffset;
    LMb.AccClassPasteSpecial = LMSr.AccClassPasteSpecial;
  end;

  /*BlockLoad(SPb); //Edit***************************Sasha2,10:30 15.10.2014
  SPb.BaudRate = LMSPr.BaudRate;
  SPb.ByteSize = LMSPr.ByteSize;
  SPb.Parity = LMSPr.Parity;
  SPb.StopBits = LMSPr.StopBits;
  SPb.OutCtsFlow = LMSPr.OutCtsFlow;
  SPb.OutDsrFlow = LMSPr.OutDsrFlow;
  SPb.DtrControl = LMSPr.DtrControl;
  SPb.OutXOn = LMSPr.OutXOn;
  SPb.OutXOff = LMSPr.OutXOff;
  SPb.Printer = LMSPr.Printer;
  SPb.Port = LMSPr.Port;
  SPb.Codepage = LMSPr.Codepage;*/

  
  BlockStore(IBb);
  BlockStore(ITLb);
  BlockStore(LLb);
  if (nonblank(LMSr.LocalMachine)) then begin
    BlockStore(LMb);
  end;
  //BlockStore(SPb); //Edit***************************Sasha2,10:30 15.10.2014
  RETURN;
END;

//Edit***************************Sasha2,14:57 28.10.2014 {
procedure PopulateClientDefCashBlock(var record DefCashBlock DCb,string locmachine,record LocalMachineAccBlock LMAb)
begin
  row LocalMachineAccBlock LMArw;
  integer i,rwcnt;
  
      rwcnt = matrowcnt(LMAb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LMAb,i,LMArw);
        if(LMArw.LocalMachine==locmachine)then begin
          DCb.DefCashPayMode = LMArw.CashID;
          DCb.DefCCPayMode = LMArw.TermID;
          i = rwcnt;
        end;
      end;

  return;
end; //Edit***************************Sasha2,14:57 28.10.2014 }

procedure FilterIVCashSerBlock(record IVCashSerBlock IVCSBServer,string locmachine,var record IVCashSerBlock IVCSBClient)
begin
  row IVCashSerBlock IVCSBServerw;
  row IVCashSerBlock IVCSBClientw;
  row IVCashSerBlock newIVCSBw;
  integer i,rwcnt;
  boolean found;
  Date blankd;
  
    found = false;
  	rwcnt = MatRowCnt(IVCSBServer);
  	for (i=0;i<rwcnt;i=i+1) begin
  		MatRowGet(IVCSBServer,i,IVCSBServerw);
  		if (IVCSBServerw.TSerCom==locmachine) then begin
  			newIVCSBw.TSerStart = IVCSBServerw.TSerStart;
			newIVCSBw.TSerEnd = IVCSBServerw.TSerEnd;
			newIVCSBw.StartDate = IVCSBServerw.StartDate;
			newIVCSBw.EndDate = IVCSBServerw.EndDate;
			newIVCSBw.TSerCom = UpperCase(IVCSBServerw.TSerCom);
			newIVCSBw.DonotGenTrans = IVCSBServerw.DonotGenTrans;
			found = true;
  		end;
  	end;
  	
  	rwcnt = MatRowCnt(IVCSBClient);
	for (i=0;i<rwcnt;i=i+1) begin
		MatRowGet(IVCSBClient,i,IVCSBClientw);
		MatRowDelete(IVCSBClient,i);
	end;
  	
  	if (found) then begin
  		MatRowPut(IVCSBClient,0,newIVCSBw);
  	end;
  	
  return;
end;

global
updating procedure SynchServToOfflineSettingsm()
BEGIN
  Integer offlinecomp,curcomp;
  record LocalOffLineNrBlock LastRecNr;
  LongInt AccVcSeqNr,OTVcSeqNr,ObjVcSeqNr,LocationVcSeqNr,AccessVcSeqNr;
  LongInt DIVcSeqNr,UnitVcSeqNr,PLQVcSeqNr,RebVcSeqNr;
  LongInt ITVcSeqNr,PLVcSeqNr,INVcSeqNr,CUVcSeqNr,ModifiersVcSeqNr,PDVcSeqNr;
  LongInt PLDefVcSeqNr,UserVcSeqNr,CTypeVcSeqNr,StyleVcSeqNr,DocVcSeqNr,ArtUpdStockVcSeqNr;
  LongInt RecVcSeqNr,CCatVcSeqNr,VGVcSeqNr,CurncyCodeVcSeqNr,DrawerVcSeqNr,ItemStatusVcSeqNr;  
  LongInt Custom1VcSeqNr,Custom2VcSeqNr,Custom3VcSeqNr,Custom4VcSeqNr,Custom5VcSeqNr,Custom6VcSeqNr;
  LongInt Custom7VcSeqNr,Custom8VcSeqNr,Custom9VcSeqNr,Custom10VcSeqNr;
  LongInt SerBalVcSeqNr; //Edit***************************Sasha2,16:06 22.09.2014
  record SeqNrBlock SeqnrRec;
  record LocalMachineBlock LMb;
  record LastSerNrBlock LastSerNrRec;
  record OffLineSetBlock OffLb;
  record LocalMachineIBVc LMIBr;
  record LocalMachineITLVc LMITLr;
  record LocalMachineLoginVc LMLr;
  record SynkDBIDRegVc SynkDBIDRegr;
//when SynchroniseBlock working coment out
  record VATCodeBlock VATCodeRec;
  record CYBlock CYRec;
  record LangBlock LangRec;
  record IVCashDefBlock IVCashDefRec;
  record IVCashSerBlock IVCashSerRec;
  record IVCashSerBlock IVCashSerRecClient; //Edit***************************Sasha2,11:20 26.09.2014
  record CashierDefBlock CDb;
  record CashPrintBlock CashPrintRec;
  record CostAccBlock CAb;
  record DefCashBlock DCb;
  record PMBlock PMRec;
  record MainStockBlock MainStockRec;
  record POSCommandsBlock POScb;
  record SysFormatBlock SFb;
  record LocalMachineSetVc LMSr;
  record LocalMachineSPVc LMSPr;
  record LocalMachineVc LMr;
  record ModuleBlock MBb;
  record RoundBlock Rb;
  record POSCurncyBlock PCB; //Edit***************************Sasha2,15:57 22.09.2014
  Boolean setupsf;
	record CompaniesBlock CRr;// Edit ************************** Monday, 27 October 2014 14:21:29
	row CompaniesBlock comprw;// Edit ************************** Monday, 27 October 2014 14:21:30
	record LocalMachineAccBlock LMAb;// Edit ************************** Monday, 27 October 2014 14:21:31
	row LocalMachineAccBlock LMArw;// Edit ************************** Monday, 27 October 2014 14:21:31
	record OffLineSetBlock OSb;// Edit ************************** Monday, 27 October 2014 14:21:32
	Boolean res;// Edit ************************** Monday, 27 October 2014 14:21:32
	Integer i,rwcnt,k;// Edit ************************** Monday, 27 October 2014 14:21:28
	string 10 compcode;// Edit ************************** Monday, 27 October 2014 15:00:55  
  transaction Boolean gSynchServToOfflineSettingsm;
    
  offlinecomp = GetPOSOffLineCompNo;
  curcomp = CurrentCompany;
  if (offlinecomp<=0) then begin goto LSynchServToOfflineSettingsm; end;
  if (CheckIfOfflineCompanyExists(offlinecomp)==false) then begin 
  	// Edit Start ---------------------------------------------- Edit Start
	//Monday, 27 October 2014 16:18:23
	blockLoad(LMb); //Edit***************************Sasha2,13:36 26.11.2014
	
	if (blank(LMb.LocalMachineCode)) then begin /*goto LSynchServToOfflineSettingsm; end;*/
	  // Edit Start ---------------------------------------------- Edit Start
	  //Monday, 27 October 2014 14:25:56
	  blockLoad(LMAb);
      rwcnt = matrowcnt(LMAb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LMAb,i,LMArw);
        if(LMArw.UserCode==CurrentUser)then begin
          LMb.LocalMachineCode = LMArw.LocalMachine;
          LMb.DefLocation = LMArw.DefLoc;
          LMb.DefCustCode = LMArw.CustCode;
          LMb.DefReturnLocation = LMArw.DefLoc;
          LMb.NoServerModeIdle = 1;
          res = true;
        end;
      end;
      blockstore(LMb);
			// Edit End ---------------------------------------------- Edit End
	end;
  	
  	blockload(CRr);
  	blockload(OSb);
    matrowget(CRr,currentcompany-1,comprw);
    compcode = comprw.CompCode;
    rwcnt = matrowcnt(CRr);
    k=0;
    for (i=0;i<rwcnt;i=i+1) begin
    	matrowget(CRr,i,comprw);
      if(comprw.CompCode!=compcode)then begin
        comprw.ActiveStatus=1;
      end;
      matrowput(CRr,i,comprw);
    end;
    
		ClearRow(CRr,comprw,1);
		comprw.CompCode = OSb.OffLineComp;
		comprw.CompName = "Offline";
		comprw.ShortName = "Offline";
		comprw.TCPIP = "";
		comprw.Port = "";
		matrowput(CRr,rwcnt,comprw);
    
    blockstore(CRr);
    
	// Edit End ---------------------------------------------- Edit End
	
    goto LSynchServToOfflineSettingsm;  
    
	// Edit End ---------------------------------------------- Edit End
	
  end else begin // Edit ************************** Monday, 27 October 2014 14:19:43
		//goto LSynchServToOfflineSettingsm; end;// Edit ************************** Monday, 27 October 2014 14:19:44

		gSynchServToOfflineSettingsm = true;
		SetServerCompany(offlinecomp);
		BlockLoad(LMb);  
		BlockLoad(SeqnrRec);
		BlockLoad(IVCashSerRecClient); //Edit***************************Sasha2,11:21 26.09.2014
		BlockLoad(DCb); //Edit***************************Sasha2,14:30 28.10.2014
		SetServerCompany(curcomp);

		BlockLoad(OffLb);  
		blockLoad(LMb); //Edit***************************Sasha2,13:36 26.11.2014
		if (blank(LMb.LocalMachineCode)) then begin /*goto LSynchServToOfflineSettingsm; end;*/
			// Edit Start ---------------------------------------------- Edit Start
			//Monday, 27 October 2014 14:25:56
			blockLoad(LMAb);
			
		      rwcnt = matrowcnt(LMAb);
		      for (i=0;i<rwcnt;i=i+1) begin
		        MatRowGet(LMAb,i,LMArw);
		        if(LMArw.UserCode==CurrentUser)then begin
		          LMb.LocalMachineCode = LMArw.LocalMachine;
		          LMb.DefLocation = LMArw.DefLoc;
		          LMb.DefCustCode = LMArw.CustCode;
		          LMb.DefReturnLocation = LMArw.DefLoc;
		          LMb.NoServerModeIdle = 1;
		          res = true;
		        end;
		      end;
		      blockstore(LMb);
			// Edit End ---------------------------------------------- Edit End
		end else begin
		
			BeginSync;

		//when SynchroniseBlock working coment out
			BlockLoad(VATCodeRec);
			BlockLoad(CYRec);  
			BlockLoad(LangRec);
			BlockLoad(IVCashDefRec);
			BlockLoad(IVCashSerRec);
			BlockLoad(CDb);
			BlockLoad(CashPrintRec);
			BlockLoad(CAb);
			//BlockLoad(DCb); //Edit***************************Sasha2,14:25 28.10.2014
			BlockLoad(PMRec);
			BlockLoad(MainStockRec);
			BlockLoad(POScb);
			BlockLoad(SFb);
			BlockLoad(MBb);
			BlockLoad(LastSerNrRec);
			BlockLoad(Rb);
			BlockLoad(PCB); //Edit***************************Sasha2,16:02 22.09.2014
			BlockLoad(LMAb); //Edit***************************Sasha2,14:41 28.10.2014

			AccVcSeqNr = SeqnrRec.AccVcSeqNr;
			OTVcSeqNr = SeqnrRec.OTVcSeqNr;
			ObjVcSeqNr = SeqnrRec.ObjVcSeqNr;
			LocationVcSeqNr = SeqnrRec.LocationVcSeqNr;
			AccessVcSeqNr = SeqnrRec.AccessVcSeqNr;
			DocVcSeqNr = SeqnrRec.DocVcSeqNr;
			CCatVcSeqNr = SeqnrRec.CCatVcSeqNr;
			VGVcSeqNr = SeqnrRec.VGVcSeqNr;
			CurncyCodeVcSeqNr = SeqnrRec.CurncyCodeVcSeqNr;
			ModifiersVcSeqNr = SeqnrRec.ModifiersVcSeqNr;
			PDVcSeqNr = SeqnrRec.PDVcSeqNr;

			SetServerCompany(offlinecomp);
			BlockStore(VATCodeRec);
			BlockStore(MainStockRec);

			SetServerCompany(curcomp);
			POSServToOffLine_SynchBefSettings(curcomp,offlinecomp,AccVcSeqNr,OTVcSeqNr,ObjVcSeqNr,LocationVcSeqNr,AccessVcSeqNr,DocVcSeqNr,
																				CCatVcSeqNr,VGVcSeqNr,CurncyCodeVcSeqNr,ModifiersVcSeqNr,PDVcSeqNr);
			SeqnrRec.AccVcSeqNr = AccVcSeqNr;
			SeqnrRec.OTVcSeqNr = OTVcSeqNr;
			SeqnrRec.ObjVcSeqNr = ObjVcSeqNr;
			SeqnrRec.LocationVcSeqNr = LocationVcSeqNr;
			SeqnrRec.AccessVcSeqNr = AccessVcSeqNr;
			SeqnrRec.DocVcSeqNr = DocVcSeqNr;
			SeqnrRec.CCatVcSeqNr = CCatVcSeqNr;
			SeqnrRec.VGVcSeqNr = VGVcSeqNr;
			SeqnrRec.CurncyCodeVcSeqNr = CurncyCodeVcSeqNr;
			SeqnrRec.ModifiersVcSeqNr = ModifiersVcSeqNr;
			SeqnrRec.PDVcSeqNr = PDVcSeqNr;

			SetServerCompany(offlinecomp);
	
			BlockStore(SeqnrRec);
			OffLb.OffLineComp = "";
			BlockStore(OffLb);

		//when SynchroniseBlock working coment out
		//  BlockStore(VATCodeRec); moved before accounts
			BlockStore(CYRec);
			BlockStore(LangRec);
			BlockStore(IVCashDefRec);
			FilterIVCashSerBlock(IVCashSerRec,LMb.LocalMachineCode,IVCashSerRecClient); //Edit***************************Sasha2,10:12 26.09.2014
			//BlockStore(IVCashSerRec); //Edit***************************Sasha2,11:22 26.09.2014
			BlockStore(IVCashSerRecClient); //Edit***************************Sasha2,11:22 26.09.2014
			BlockStore(CDb);
			BlockStore(CashPrintRec);
			BlockStore(CAb);
			PopulateClientDefCashBlock(DCb,LMb.LocalMachineCode,LMAb); //Edit***************************Sasha2,14:49 28.10.2014
			BlockStore(DCb);
			BlockStore(PMRec);
		//  BlockStore(MainStockRec);//moved before accounts
			BlockStore(POScb);
			BlockStore(SFb);
			BlockStore(MBb);
			BlockLoad(SeqnrRec);
			BlockStore(Rb);
			BlockStore(PCB); //Edit***************************Sasha2,16:02 22.09.2014
	
			SynkDBIDRegr.DBIDCode = DatabaseID;
			if (ReadFirstMain(SynkDBIDRegr,1,true)==false) then begin
				RecordNew(SynkDBIDRegr);
				SynkDBIDRegr.DBIDCode = DatabaseID;
			end;
			SetupSynkLastNumber(SynkDBIDRegr);
	
			SetServerCompany(curcomp);
	
			DIVcSeqNr = SeqnrRec.DIVcSeqNr;
			UnitVcSeqNr = SeqnrRec.UnitVcSeqNr;
			PLQVcSeqNr = SeqnrRec.PLQVcSeqNr;
			RebVcSeqNr = SeqnrRec.RebVcSeqNr;
			ITVcSeqNr = SeqnrRec.ITVcSeqNr;
			PLVcSeqNr = SeqnrRec.PLVcSeqNr;
			INVcSeqNr = SeqnrRec.INVcSeqNr;
			CUVcSeqNr = SeqnrRec.CUVcSeqNr;
			PLDefVcSeqNr = SeqnrRec.PLDefVcSeqNr;
			UserVcSeqNr = SeqnrRec.UserVcSeqNr;
			CTypeVcSeqNr = SeqnrRec.CTypeVcSeqNr;
			StyleVcSeqNr = SeqnrRec.StyleVcSeqNr;
			ArtUpdStockVcSeqNr = SeqnrRec.ArtUpdStockVcSeqNr;
			RecVcSeqNr = SeqnrRec.RecVcSeqNr;
			DrawerVcSeqNr = SeqnrRec.DrawerVcSeqNr;
			ItemStatusVcSeqNr = SeqnrRec.ItemStatusVcSeqNr;
		// Custom is for customised purpouse, use it.
			Custom1VcSeqNr = SeqnrRec.Custom1VcSeqNr;
			Custom2VcSeqNr = SeqnrRec.Custom2VcSeqNr;
			Custom3VcSeqNr = SeqnrRec.Custom3VcSeqNr;
			Custom4VcSeqNr = SeqnrRec.Custom4VcSeqNr;
			Custom5VcSeqNr = SeqnrRec.Custom5VcSeqNr;
			Custom6VcSeqNr = SeqnrRec.Custom6VcSeqNr;
			Custom7VcSeqNr = SeqnrRec.Custom7VcSeqNr;
			Custom8VcSeqNr = SeqnrRec.Custom8VcSeqNr;
			Custom9VcSeqNr = SeqnrRec.Custom9VcSeqNr;
			Custom10VcSeqNr = SeqnrRec.Custom10VcSeqNr;
			SerBalVcSeqNr = SeqnrRec.SerBalVcSeqNr; //Edit***************************Sasha2,16:07 22.09.2014
	
			POSServToOffLine_SynchRegisters(curcomp,offlinecomp,DIVcSeqNr,UnitVcSeqNr,PLQVcSeqNr,RebVcSeqNr,
																			ITVcSeqNr,PLVcSeqNr,INVcSeqNr,CUVcSeqNr,PLDefVcSeqNr,UserVcSeqNr,
																			CTypeVcSeqNr,StyleVcSeqNr,ArtUpdStockVcSeqNr,RecVcSeqNr,DrawerVcSeqNr,
																			ItemStatusVcSeqNr,Custom1VcSeqNr,Custom2VcSeqNr,Custom3VcSeqNr,
																			Custom4VcSeqNr,Custom5VcSeqNr,Custom6VcSeqNr,Custom7VcSeqNr,
																			Custom8VcSeqNr,Custom9VcSeqNr,Custom10VcSeqNr,
																			SerBalVcSeqNr,LMb.DefLocation,LMb.LocalMachineCode); //Edit***************************Sasha2,16:07 22.09.2014
			SeqnrRec.DIVcSeqNr = DIVcSeqNr;
			SeqnrRec.UnitVcSeqNr = UnitVcSeqNr;
			SeqnrRec.PLQVcSeqNr = PLQVcSeqNr;
			SeqnrRec.RebVcSeqNr = RebVcSeqNr;
			SeqnrRec.ITVcSeqNr = ITVcSeqNr;
			SeqnrRec.PLVcSeqNr = PLVcSeqNr;
			SeqnrRec.INVcSeqNr = INVcSeqNr;
			SeqnrRec.CUVcSeqNr = CUVcSeqNr;
			SeqnrRec.PLDefVcSeqNr = PLDefVcSeqNr;
			SeqnrRec.UserVcSeqNr = UserVcSeqNr;
			SeqnrRec.CTypeVcSeqNr = CTypeVcSeqNr;
			SeqnrRec.StyleVcSeqNr = StyleVcSeqNr;
			SeqnrRec.ArtUpdStockVcSeqNr = ArtUpdStockVcSeqNr;
			SeqnrRec.RecVcSeqNr = RecVcSeqNr;
			SeqnrRec.DrawerVcSeqNr = DrawerVcSeqNr;
			SeqnrRec.ItemStatusVcSeqNr = ItemStatusVcSeqNr;
			SeqnrRec.Custom1VcSeqNr = Custom1VcSeqNr;
			SeqnrRec.Custom2VcSeqNr = Custom2VcSeqNr;
			SeqnrRec.Custom3VcSeqNr = Custom3VcSeqNr;
			SeqnrRec.Custom4VcSeqNr = Custom4VcSeqNr;
			SeqnrRec.Custom5VcSeqNr = Custom5VcSeqNr;
			SeqnrRec.Custom6VcSeqNr = Custom6VcSeqNr;
			SeqnrRec.Custom7VcSeqNr = Custom7VcSeqNr;
			SeqnrRec.Custom8VcSeqNr = Custom8VcSeqNr;
			SeqnrRec.Custom9VcSeqNr = Custom9VcSeqNr;
			SeqnrRec.Custom10VcSeqNr = Custom10VcSeqNr;
			SeqnrRec.SerBalVcSeqNr = SerBalVcSeqNr; //Edit***************************Sasha2,16:08 22.09.2014
	
			POSServToOffLine_ReadLocalMachineSettings(LMb.LocalMachineCode,LMIBr,LMITLr,LMLr,LMSr,LMSPr,LMr); //Sasha2: Just template no actual realization
	
			//setupsf = SynkMachineRegister(CurrentUser,SynkDBIDRegr,LMb.LocalMachineCode,LMSr,LMLr);
			//asyncremote.SynkMachineRegister(CurrentUser,SynkDBIDRegr,LMb.LocalMachineCode);
			//would need global as well
	
			SetServerCompany(offlinecomp);
	
		// Sasha2 "setupsf" flag won't be used
			/*if (setupsf) then begin
				SetupSynkMachine(SynkDBIDRegr); //Edit***************************Sasha2,14:07 25.09.2014
			end;*/
	
			BlockLoad(LastRecNr);
			if (LastRecNr.LastIVCashNr<=0) then begin
				LastRecNr.LastIVCashNr = ThisMachineLastIVCashNr(LastSerNrRec,LMb.LocalMachineCode);
				BlockStore(LastRecNr);
			end;
			BlockStore(SeqnrRec);

			POSServToOffLine_SaveLocalMachineSettings(LMb.LocalMachineCode,LMIBr,LMITLr,LMLr,LMSr,LMSPr);


			SetServerCompany(curcomp);

			EndSync;
	
			gSynchServToOfflineSettingsm = false; //Edit***************************Sasha2,16:24 14.10.2014
		end;// Edit ************************** Monday, 27 October 2014 14:25:15
  end;// Edit ************************** Monday, 27 October 2014 14:25:16
LSynchServToOfflineSettingsm:;
  RETURN;
END;

procedure AddIVCashRowToPOSSales(row IVCashVc IVCashrw,string location,var record POSSalesVc POSSalesr) //Sasha2: maybe last argument should be "var"
begin
  Integer i,rwcnt;
  row POSSalesVc POSSalesrw;

  rwcnt = MatRowCnt(POSSalesr);
  for(i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSSalesr,i,POSSalesrw);
    if ((POSSalesrw.ArtCode==IVCashrw.ArtCode) and (POSSalesrw.VATCode==IVCashrw.VATCode)) then begin
      POSSalesrw.Quant = IVCashrw.Quant + POSSalesrw.Quant;
      POSSalesrw.Sum = IVCashrw.Sum + POSSalesrw.Sum;            
      if (POSSalesrw.Quant!=0) then begin
        POSSalesrw.Price = POSSalesrw.Sum / POSSalesrw.Quant;
      end;
      MatRowPut(POSSalesr,i,POSSalesrw);
      goto LAddIVCashRowToPOSSales;
    end;
  end;
  ClearRow(POSSalesr,POSSalesrw,0);
  POSSalesrw.ArtCode = IVCashrw.ArtCode;
  POSSalesrw.Quant = IVCashrw.Quant;
  POSSalesrw.Spec = IVCashrw.Spec;
  POSSalesrw.Sum = IVCashrw.Sum;
  POSSalesrw.VATCode = IVCashrw.VATCode;          
  if (POSSalesrw.Quant!=0) then begin
    POSSalesrw.Price = POSSalesrw.Sum / POSSalesrw.Quant;
    if (POSSalesrw.Price<0) then begin
      POSSalesrw.Price = -POSSalesrw.Price;
    end;
  end;
  if (POSOffline_ShouldItemUpdateStock(IVCashrw.ArtCode,location)==false) then begin
    POSSalesrw.NotUpdStockFlag = 1;
  end else begin
    POSSalesrw.NotUpdStockFlag = 0;
  end;
  MatRowPut(POSSalesr,rwcnt,POSSalesrw);          
LAddIVCashRowToPOSSales:;  
  RETURN;
END;

updating procedure CreateSummaryPOSInvoice(var record POSSalesVc POSSalesr,var record POSSalesVc POSReturnr)
begin
  Boolean found,testf,firstf;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Array LongInt acash_ser_nos;
  LongInt acnt;
  Array LongInt aretcash_ser_nos;
  LongInt aretcnt;

  acnt = 0;
  firstf = true;
  RecordNew(POSSalesr);

  IVCashr.POSSalesNo = -1;
  found = true;
  while(LoopKey("POSSalesNo",IVCashr,1,found)) begin
    if (IVCashr.POSSalesNo!=-1) then begin
     found = false;
    end;
    if (firstf==false) then begin
/*lookhere*/    
      if (IVCashr.TransDate!=POSSalesr.TransDate) then begin
        found = false;
      end;
    end;
    testf = found;
    if (blank(IVCashr.Location)) then begin
      testf = false;
    end;    
    if (testf) then begin
      rwcnt = MatRowCnt(IVCashr);
      if (IVCashr.Sum4>0) then begin
        for(i=0;i<rwcnt;i=i+1) begin     
          MatRowGet(IVCashr,i,IVCashrw);
          AddIVCashRowToPOSSales(IVCashrw,IVCashr.Location,POSSalesr);         
        end;
        POSSalesr.CashValue = POSSalesr.CashValue + IVCashr.CashValue;
        POSSalesr.RecValue = POSSalesr.RecValue + IVCashr.RecValue;
        POSSalesr.RetValue = POSSalesr.RetValue + IVCashr.RetValue;
        POSSalesr.Sum1 = POSSalesr.Sum1 + IVCashr.Sum1;
        POSSalesr.Sum2 = POSSalesr.Sum2 + IVCashr.Sum2;
        POSSalesr.Sum3 = POSSalesr.Sum3 + IVCashr.Sum3;
        POSSalesr.Sum4 = POSSalesr.Sum4 + IVCashr.Sum4;
        POSSalesr.Location = IVCashr.Location;
  /*lookhere , what if localmachine code is diffrent, what if PayDeal is diffrent on next POS Invoice*/      
        POSSalesr.LocalMachineCode = IVCashr.LocalMachineCode;
        POSSalesr.PayDeal = IVCashr.PayDeal;
        POSSalesr.TransDate = IVCashr.TransDate;
        POSSalesr.SyncTransDate = CurrentDate;
        POSSalesr.TransTime = CurrentTime;
        POSSalesr.TotQty = POSSalesr.TotQty + IVCashr.TotQty;
        acash_ser_nos[acnt] = IVCashr.SerNr;
        acnt = acnt + 1;
        firstf = false;
      end else begin
        for(i=0;i<rwcnt;i=i+1) begin     
          MatRowGet(IVCashr,i,IVCashrw);
          AddIVCashRowToPOSSales(IVCashrw,IVCashr.Location,POSReturnr);         
        end;
        POSReturnr.CashValue = POSReturnr.CashValue + IVCashr.CashValue;
        POSReturnr.RecValue = POSReturnr.RecValue + IVCashr.RecValue;
        POSReturnr.RetValue = POSReturnr.RetValue + IVCashr.RetValue;
        POSReturnr.Sum1 = POSReturnr.Sum1 + IVCashr.Sum1;
        POSReturnr.Sum2 = POSReturnr.Sum2 + IVCashr.Sum2;
        POSReturnr.Sum3 = POSReturnr.Sum3 + IVCashr.Sum3;
        POSReturnr.Sum4 = POSReturnr.Sum4 + IVCashr.Sum4;
        POSReturnr.Location = IVCashr.Location;
  /*lookhere , what if localmachine code is diffrent, what if PayDeal is diffrent on next POS Invoice*/      
        POSReturnr.LocalMachineCode = IVCashr.LocalMachineCode;
        POSReturnr.PayDeal = IVCashr.PayDeal;
        POSReturnr.TransDate = IVCashr.TransDate;
        POSReturnr.SyncTransDate = CurrentDate;
        POSReturnr.TransTime = CurrentTime;
        POSReturnr.TotQty = POSReturnr.TotQty + IVCashr.TotQty;
        aretcash_ser_nos[aretcnt] = IVCashr.SerNr;
        aretcnt = aretcnt + 1;
        firstf = false;
      end;
    end;
  end;  
  if (POSSalesr.Sum4>0) then begin    
    POSSalesr.Synced = 1;
    POSSalesr.Type = 0;
    POSSalesr.SerNr = NextSerNr("POSSalesVc",POSSalesr.TransDate,-1,false,"");    
    if (POSSalesr.SerNr>0) then begin
      if (RecordStore(POSSalesr,false)) then begin           
        for (i=0;i<acnt;i=i+1) begin
          IVCashr.SerNr = acash_ser_nos[i];
          if (ReadFirstMain(IVCashr,1,true)) then begin
            IVCashr.POSSalesNo = POSSalesr.SerNr;
            if (RecordStore(IVCashr,true)) then begin end;
  //DBFlush?          
          end;
        end;
      end;
    end;
  end;
  if (POSReturnr.Sum4!=0) then begin    
    POSReturnr.Synced = 1;
    POSReturnr.Type = 1;
    if (POSSalesr.SerNr>0) then begin
      POSReturnr.SerNr  = POSSalesr.SerNr + 1;
    end else begin
      POSReturnr.SerNr = NextSerNr("POSSalesVc",POSReturnr.TransDate,-1,false,"");        
    end;
    if (POSReturnr.SerNr>0) then begin
      if (RecordStore(POSReturnr,false)) then begin     
        for (i=0;i<aretcnt;i=i+1) begin
          IVCashr.SerNr = aretcash_ser_nos[i];
          if (ReadFirstMain(IVCashr,1,true)) then begin
            IVCashr.POSSalesNo = POSReturnr.SerNr;
            if (RecordStore(IVCashr,true)) then begin end;
  //DBFlush?          
          end;
        end;
      end;
    end;
  end;  
  return;
end;

updating procedure POSOffLineToServ_SynchRegisters(Integer servcomp,Integer offlinecomp,Integer SyncSumPOS)
begin
  LongInt seqnr;
  Integer curcomp;
  Boolean TrHs;
  record IVCashVc IVCashr,oldIVCashr; //Edit***************************Sasha2,15:40 24.09.2014
  record POSSalesVc POSSalesr;
  record POSSalesVc POSReturnr;
  record SeqNrBlock Seqnrb;
  record LocalMachineBlock LMb;
  Integer di,dinvacnt;
  //Array LongInt delinvarr; //Edit***************************Sasha2,14:39 24.09.2014
  Array string 50 delinvarr; //Edit***************************Sasha2,14:42 24.09.2014
  Array Boolean delinvarrf;
  
  curcomp = CurrentCompany;
  switch (SyncSumPOS) begin
    case 0:
      SetServerCompany(offlinecomp);
      seqnr = SynchroniseRegister("IVCashVc",offlinecomp,servcomp,-1,"");
      if (seqnr>=0) then begin
        dinvacnt = 0;
        TrHs = true;
        while (LoopMain(IVCashr,1,TrHs)) begin
          //delinvarr[dinvacnt] = IVCashr.SerNr; //Edit***************************Sasha2,13:48 24.09.2014
          delinvarr[dinvacnt] = IVCashr.MachineTimeStamp; //Edit***************************Sasha2,13:48 24.09.2014 {
          delinvarrf[dinvacnt] = false; 
          dinvacnt = dinvacnt + 1;
        end;
        SetServerCompany(servcomp);
        POSOffLineToServ_SynchRegisters_AreIVCashsStored(delinvarr,delinvarrf,dinvacnt);

        SetServerCompany(offlinecomp);

        for (di=0;di<dinvacnt;di=di+1) begin 
          if (delinvarrf[di]) then begin
            //IVCashr.SerNr = delinvarr[di]; //Edit***************************Sasha2,14:09 24.09.2014
            //ReadFirstMain(IVCashr,1,true); //Edit***************************Sasha2,14:09 24.09.2014
            IVCashr.MachineTimeStamp = delinvarr[di]; //Edit***************************Sasha2,14:09 24.09.2014
            if (ReadFirstKey("MachineTimeStamp",IVCashr,1,true)) then begin //Edit***************************Sasha2,14:09 24.09.2014
            	RecordDelete(IVCashr);
            end;	
          end;
        end;

      end;
      SetServerCompany(curcomp);
    case 1:
      SetServerCompany(offlinecomp);
      CreateSummaryPOSInvoice(POSSalesr,POSReturnr);
      BlockLoad(Seqnrb);
      Seqnrb.POSSalesVcSeqNr = SynchroniseRegister("POSSalesVc",offlinecomp,servcomp,Seqnrb.POSSalesVcSeqNr,"");
      BlockStore(Seqnrb);
      BlockLoad(LMb);
      SetServerCompany(curcomp);
      
      CreateInvoiceFromPOSSales_OnServer(POSSalesr,POSReturnr,LMb.DefCustCode,LMb.DefReturnLocation,servcomp,offlinecomp);
  end;
  return;
end;

global
updating procedure SynchOfflineToServsm()
BEGIN
  Integer offlinecomp,curcomp;
  record OffLineSetBlock OffLb;
  
  BlockLoad(OffLb);
  offlinecomp = StringToInt(OffLb.OffLineComp);
  curcomp = CurrentCompany;
  if (offlinecomp<=0) then begin goto LSynchOfflineToServsm; end;  
  BeginSync;
  POSOffLineToServ_SynchRegisters(curcomp,offlinecomp,OffLb.SyncSumPOS);
  EndSync;
LSynchOfflineToServsm:;
  RETURN;
END;

global 
updating procedure YesOffLineToServAClasssm()
BEGIN
  Integer wn;
  
  wn = CurWindow;
  SynchOfflineToServsm;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;  
END;

global 
updating procedure NoOffLineToServAClasssm()
BEGIN
  Integer wn;

  wn = CurWindow;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;  
END;

global 
updating procedure YesOffLineFromServAClasssm()
BEGIN
  Integer wn;
  
  wn = CurWindow;
  SynchServToOfflineSettingsm;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;  
END;

updating procedure SyncLocalMachineSettings(record LocalMachineBlock LMb,record LocalMachineSetVc LMSr,record LocalMachineLoginVc LMLr)
begin  
  record SerialPortDeviceVc SPDr;
  row LocalMachineLoginVc LMLrw;
  record LocalLoginBlock LLb;
  row LocalLoginBlock LLbrw;
  Integer i,rwcnt;
		
  if (nonblank(LMSr.LocalMachine)) then begin
    LMb.LocalMachineCode = LMSr.LocalMachine;
    LMb.DefLocation = LMSr.DefLocation;
    LMb.DefPrinter = LMSr.DefPrinter;
    LMb.WarnOnDelete = LMSr.WarnOnDelete;
    LMb.NoToolTips = LMSr.NoToolTips;
    LMb.OneBarTabWindow = LMSr.OneBarTabWindow;
    LMb.NoBackGround = LMSr.NoBackGround;
    LMb.WideScrollBars = LMSr.WideScrollBars;
    LMb.TouchScreenLook = LMSr.TouchScreenLook;
    LMb.DefExpCodepage = LMSr.DefExpCodepage;
    LMb.FiscalPrinter = LMSr.FiscalPrinter;
    LMb.DefCustCode = LMSr.DefCustCode;
    LMb.DefRestDisp = LMSr.DefRestDisp;
    LMb.entryFont = LMSr.entryFont;
    LMb.reportFont = LMSr.reportFont;
    LMb.reportFontSize = LMSr.reportFontSize;
    LMb.MirrorWindow = LMSr.MirrorWindow;
    LMb.NoServerModeIdle = LMSr.NoServerModeIdle;
    LMb.UseDisplay = LMSr.UseDisplay;
    LMb.LimitedProdEntry = LMSr.LimitedProdEntry;
    LMb.DefReturnLocation = LMSr.DefReturnLocation;
    LMb.TerminalID = LMSr.TerminalID;
    LMb.CommPort = LMSr.CommPort;
    LMb.BranchID = LMSr.BranchID;
    LMb.UserStr1 = LMSr.UserStr1;
    LMb.UserStr2 = LMSr.UserStr2;
    LMb.UserStr3 = LMSr.UserStr3;
    LMb.UserStr4 = LMSr.UserStr4;
    LMb.UserStr5 = LMSr.UserStr5;
    LMb.ResLoc = LMSr.ResLoc;
    LMb.ResClass = LMSr.ResClass;
    LMb.ActTypePastePerClass = LMSr.ActTypePastePerClass;
    LMb.SkypeInt = LMSr.SkypeInt;
    LMb.ItemPasteSpecial = LMSr.ItemPasteSpecial;
    LMb.PLCode = LMSr.PLCode;
    LMb.SyncRecordforPOS = LMSr.SyncRecordforPOS;
    LMb.SyncINClass = LMSr.SyncINClass;
    LMb.ShipToAccount = LMSr.ShipToAccount;
    LMb.POSButtonGroup = LMSr.POSButtonGroup;
    LMb.IncrementalReceiptPrinting = LMSr.IncrementalReceiptPrinting;
    LMb.BackgroundMailSync = LMSr.BackgroundMailSync;
    LMb.LockSysEncoderNo = LMSr.LockSysEncoderNo;
    LMb.POSButtonsPosition = LMSr.POSButtonsPosition;
    LMb.POSFontSize = LMSr.POSFontSize;
    LMb.Supervisor = LMSr.Supervisor;
    if (blank(LMb.Bagger)) then begin
      LMb.Bagger = LMSr.Bagger;
    end;
    LMb.DefaulBaggerSupervisor = LMSr.DefaulBaggerSupervisor;
    LMb.HideQty = LMSr.HideQty;
    LMb.CCRequireAuthCode = LMSr.CCRequireAuthCode;
    LMb.ShowBaggerSupervisor = LMSr.ShowBaggerSupervisor;
    LMb.UseCustomerDisplay = LMSr.UseCustomerDisplay;
    BlockStore(LMb);
  end;
  
  rwcnt = MatRowCnt(LMLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMLr,i,LMLrw);
    ClearRow(LLb,LLbrw,1);
    LLbrw.Code = LMLrw.Code;
    LLbrw.colnr = LMLrw.colnr;
    LLbrw.OnLoginWindow = LMLrw.OnLoginWindow;
    MatRowPut(LLb,i,LLbrw);
  end;
  if (rwcnt>0) then begin
    BlockStore(LLb);
  end;
  return;
end;

global 
updating procedure NoOffLineFromServAClasssm()
BEGIN
  Integer wn;

  wn = CurWindow;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;
END;

global updating //Sasha2 this function is not used anywhere
procedure AutosyncUpdateSerialNumbers()
begin
  record SynkDBIDRegVc SynkDBIDRegr;
  record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr;
  integer oldprogmode;
  Boolean setupsf;
  Boolean res;
  record LocalMachineSetVc LMSr;
  record LocalMachineLoginVc LMLr;
  record LocalMachineBlock LMb;
    
  oldprogmode = CompanyDefaultProgramMode;
  SetCompanyProgramMode(kProgramModeLiveSync);
  
  BlockLoad(LMb);
  SynkDBIDRegr.DBIDCode = DatabaseID;
  if (ReadFirstMain(SynkDBIDRegr,1,true)==false) then begin
    RecordNew(SynkDBIDRegr);
    SynkDBIDRegr.DBIDCode = DatabaseID;
  end;
  SetupSynkLastNumber(SynkDBIDRegr);
  
  SynkGlobalDBIDRegr.DBIDCode = DatabaseID;
  if (ReadFirstMain(SynkGlobalDBIDRegr,1,true)==false) then begin
    RecordNew(SynkGlobalDBIDRegr);
    SynkGlobalDBIDRegr.DBIDCode = DatabaseID;
  end;
  SetupGlobalSynkLastNumber(SynkGlobalDBIDRegr);
  
  SetCompanyProgramMode(kProgramModeClient);
  
  asyncremote.SynkMachineRegister(CurrentUser,SynkDBIDRegr,LMb.LocalMachineCode);
  asyncremote.SynkGlobalMachineRegister(CurrentUser,SynkGlobalDBIDRegr,LMb.LocalMachineCode);
  
  SetCompanyProgramMode(oldprogmode);
  
  //AutosyncUpdateSerialNumbers = res;
  return;
end;

// Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 30 December 2014 13:55:06
	
global updating procedure PastePayDeal(record LocalMachineBlock LMb,record LocalMachineAccBlock LMAb)
begin
	record DefCashBlock DCb;
	row LocalMachineAccBlock LMArw;
	integer i,rwcnt;
	string 20 locmachine;
	
	blockload(DCb);
	locmachine = LMb.LocalMachineCode;
  
	rwcnt = matrowcnt(LMAb);
	for (i=0;i<rwcnt;i=i+1) begin
		MatRowGet(LMAb,i,LMArw);
		if(LMArw.LocalMachine==locmachine)then begin
			DCb.DefCashPayMode = LMArw.CashID;
			DCb.DefCCPayMode = LMArw.TermID;
			i = rwcnt;
		end;
	end;
	blockstore(DCb);
	
return;
end;

	// Edit End ---------------------------------------------- Edit End
	
global updating
procedure SynkMachineRegisterCallback(Boolean setupsf,record SynkDBIDRegVc SynkDBIDRegr,record LocalMachineSetVc LMSr,
                                                     record LocalMachineLoginVc LMLr,record LocalMachineAccBlock LMAb)
begin
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  
  // store and update number series
  if (setupsf) then begin
    SetupSynkMachine(SynkDBIDRegr);
  end;
  
  SyncLocalMachineSettings(LMb,LMSr,LMLr); //Edit***************************Sasha2,14:02 25.09.2014
  //PastePayDeal(LMb,LMAb);// Edit ************************** Tuesday, 30 December 2014 13:54:27
  
end;

global updating
procedure SynkGlobalMachineRegisterCallback(Boolean setupsf,record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr)
begin
  if (setupsf) then begin
    SetupGlobalSynkMachine(SynkGlobalDBIDRegr);
  end;
end;
